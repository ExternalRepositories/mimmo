<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>MiMMO: src/InOut.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="MiMMOStyleSheet.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">MiMMO
   </div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('InOut_8cpp_source.html','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">InOut.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  MiMMO</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of MiMMO.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  MiMMO is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  MiMMO is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with MiMMO. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;InOut.hpp&quot;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;BaseManipulation.hpp&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">using namespace </span>mimmo;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="namespacemimmo.html#adcd5562bf751fdd5c768c1edb98298bc">   37</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> dvector1D &amp;var)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        buffer &lt;&lt; var[i];</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="namespacemimmo.html#aab676dc4f561b00a0ab0a06eb56490dd">   54</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, dvector1D &amp;var)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        buffer &gt;&gt; var[i];</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespacemimmo.html#a112611a73be6efbabc7731f60e2c8757">   72</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> livector1D &amp;var)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        buffer &lt;&lt; var[i];</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="namespacemimmo.html#a5ebd3520c7ac820c4a627072edfbb29d">   89</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, livector1D &amp;var)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        buffer &gt;&gt; var[i];</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="namespacemimmo.html#a61f3448853d7d448f59b4e3f0f15b07c">  106</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> livector2D &amp;var)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">int</span> nQ;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        nQ = var[i].size();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        buffer &lt;&lt; nQ;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nQ; ++j) {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            buffer &lt;&lt; var[i][j];</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ac9db3ab4d661055f4f468ce9357e2726">  128</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, livector2D &amp;var)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">int</span> nP, nQ;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        buffer &gt;&gt; nQ;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        var[i].resize(nQ);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nQ; ++j) {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            buffer &gt;&gt; var[i][j];</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="namespacemimmo.html#a8c0e42a1a4ffbce74f198088716adffc">  149</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> shivector1D &amp;var)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        buffer &lt;&lt; var[i];</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ae96713e9d09d0ccea95abfc73ff61200">  166</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, shivector1D &amp;var)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        buffer &gt;&gt; var[i];</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="namespacemimmo.html#aa72cb6371a64e61cbb093607908e1613">  183</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> dvecarr3E &amp;var)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 3; ++j) {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            buffer &lt;&lt; var[i][j];</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="namespacemimmo.html#afb9e789f2d159db527032cba23330e6e">  203</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, dvecarr3E &amp;var)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 3; ++j) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            buffer &gt;&gt; var[i][j];</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> <a class="code" href="namespacemimmo.html#a974bf03e98917b63425ad03641d09784">mimmo::ShapeType</a> &amp;var)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    buffer &lt;&lt; static_cast&lt;int&gt; (var);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, <a class="code" href="namespacemimmo.html#a974bf03e98917b63425ad03641d09784">mimmo::ShapeType</a> &amp;var)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">int</span> val;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    buffer &gt;&gt; val;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    var = <span class="keyword">static_cast&lt;</span><a class="code" href="namespacemimmo.html#a974bf03e98917b63425ad03641d09784">mimmo::ShapeType</a><span class="keyword">&gt;</span> (val);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, const std::array&lt;mimmo::CoordType,3&gt; &amp;var)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    std::array&lt;int,3&gt; dum;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;3; ++i) dum[i] = static_cast&lt;int&gt; (var[i]);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    buffer &lt;&lt; dum;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, std::array&lt;mimmo::CoordType,3&gt; &amp;var)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    std::array&lt;int,3&gt; val;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    buffer &gt;&gt; val;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;3; ++i)  var[i] = static_cast&lt;mimmo::CoordType&gt;(val[i]);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, std::pair&lt;MimmoObject*, dvecarr3E *&gt;&amp; element){</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classmimmo_1_1MimmoObject.html">MimmoObject</a> * geo;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    dvecarr3E * data;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    buffer &gt;&gt; geo &gt;&gt; data ;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    element = std::make_pair(geo, data);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;};</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream &amp;buffer, const std::pair&lt;MimmoObject*, dvecarr3E *&gt;&amp; element){</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        buffer&lt;&lt;element.first&lt;&lt;element.second;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;};</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, std::pair&lt;MimmoObject*, dvector1D *&gt;&amp; element){</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classmimmo_1_1MimmoObject.html">MimmoObject</a> * geo;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    dvector1D * data;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    buffer &gt;&gt; geo &gt;&gt; data ;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    element = std::make_pair(geo, data);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;};</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream &amp;buffer, const std::pair&lt;MimmoObject*, dvector1D *&gt;&amp; element){</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    buffer&lt;&lt;element.first&lt;&lt;element.second;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;};</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, std::vector&lt;mimmo::TrackingPointer * &gt; &amp; var)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        buffer &gt;&gt; var[i];</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;}</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, const std::vector&lt;mimmo::TrackingPointer * &gt; &amp;var)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        buffer &lt;&lt; var[i];</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, std::pair&lt;BaseManipulation*, double&gt;&amp; element){</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="classmimmo_1_1BaseManipulation.html">BaseManipulation</a> * obj;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordtype">double</span> data;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    buffer &gt;&gt; obj &gt;&gt; data ;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    element = std::make_pair(obj, data);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;};</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream &amp;buffer, const std::pair&lt;BaseManipulation*, double&gt;&amp; element){</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    buffer&lt;&lt;element.first&lt;&lt;element.second;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;};</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ac297773bea329c31a3b8e17881800fe7">  390</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> dvecarr2E &amp;var)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;{</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; ++j) {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            buffer &lt;&lt; var[i][j];</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ae4a92780ec16b20004af1bfe9749f70f">  410</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, dvecarr2E &amp;var)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; ++j) {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            buffer &gt;&gt; var[i][j];</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="namespacemimmo.html#aafcaf7238dd2b14055cea87d807138ff">  430</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, <span class="keyword">const</span> ivecarr2E &amp;var)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;{</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; ++j) {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            buffer &lt;&lt; var[i][j];</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;}</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ae9209e4b899255b52a2d20e91c9c7cca">  450</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, ivecarr2E &amp;var)</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordtype">int</span> nP;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; ++j) {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            buffer &gt;&gt; var[i][j];</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    }</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ab0682d9015a9481b5cd3a6b509748d38">  469</a></span>&#160;bitpit::OBinaryStream&amp; operator&lt;&lt;(bitpit::OBinaryStream  &amp;buffer, const std::vector&lt;dvecarr2E&gt; &amp;var)</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;{</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordtype">int</span> nP = var.size();</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordtype">int</span> nP2;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    buffer &lt;&lt; nP;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nP2; ++j) {</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            nP2 = var[i].size();</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            buffer &lt;&lt; nP2;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=0; k&lt;2; ++k){</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                buffer &lt;&lt; var[i][j][k];</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;        }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    }</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    </div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="namespacemimmo.html#ae531db32f01a1658ae6ce1a1bab89f93">  494</a></span>&#160;bitpit::IBinaryStream&amp; operator&gt;&gt;(bitpit::IBinaryStream &amp;buffer, std::vector&lt;dvecarr2E&gt; &amp;var)</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;{</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    <span class="keywordtype">int</span> nP, nP2;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    buffer &gt;&gt; nP;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    var.resize(nP);</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nP; ++i) {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        buffer &gt;&gt; nP2;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        var[i].resize(nP2);</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;nP2; ++j){</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 2; ++k) {</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                buffer &gt;&gt; var[i][j][k];</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            }</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        }   </div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    }</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">//==============================================================//</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">// DATA TYPE  CLASS IMPLEMENTATION                              //</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;<span class="comment">//==============================================================//</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno"><a class="line" href="classmimmo_1_1DataType.html#a6c412e8f9e46f56afe3a33cf3faddc4e">  519</a></span>&#160;DataType::DataType(){};</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00525"></a><span class="lineno"><a class="line" href="classmimmo_1_1DataType.html#a2af153755484e46d898851fa028bf295">  525</a></span>&#160;DataType::DataType(<a class="code" href="namespacemimmo_1_1mimmo_1_1pin.html#ac220136f06cf48dc8dc016d252e2b3e7">containerTAG</a> conType, <a class="code" href="namespacemimmo_1_1mimmo_1_1pin.html#ab5b677b1323ff6d20f274dad47df9182">dataTAG</a> dataType){</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    m_conType   = conType;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    m_dataType  = dataType;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;};</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno"><a class="line" href="classmimmo_1_1DataType.html#afdf99866af0d5233b75c90c756af0bfb">  533</a></span>&#160;DataType::~DataType(){};</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00537"></a><span class="lineno"><a class="line" href="classmimmo_1_1DataType.html#a2ba820d6b83aad9a4e0cc377c4cd5fd3">  537</a></span>&#160;DataType::DataType(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1DataType.html">DataType</a> &amp; other){</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    m_conType   = other.m_conType;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    m_dataType  = other.m_dataType;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;};</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="classmimmo_1_1DataType.html#a458aad214f0494e7c01dbc003cd662fb">  545</a></span>&#160;<a class="code" href="classmimmo_1_1DataType.html">DataType</a> &amp; DataType::operator=(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1DataType.html">DataType</a> &amp; other){</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    m_conType   = other.m_conType;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    m_dataType  = other.m_dataType;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;};</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno"><a class="line" href="classmimmo_1_1DataType.html#add1304f09848dbb6e2f94436c383d750">  553</a></span>&#160;<span class="keywordtype">bool</span> DataType::operator==(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1DataType.html">DataType</a> &amp; other){</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    check = check &amp;&amp; (m_conType == other.m_conType);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    check = check &amp;&amp; (m_dataType == other.m_dataType);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span>(check);</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;};</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">//==============================================================//</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">// BASE INOUT CLASS IMPLEMENTATION                              //</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="comment">//==============================================================//</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a8bba9b25194edb119cefb1bed8cbbee0">  567</a></span>&#160;PortOut::PortOut(){</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    m_objLink.clear();</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;};</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a8452f26bb933f0a1f240c2bf0fc00d48">  573</a></span>&#160;PortOut::~PortOut(){};</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a8fc5a1ff815242debcd3696b9cd04e77">  577</a></span>&#160;PortOut::PortOut(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1PortOut.html">PortOut</a> &amp; other){</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    m_objLink   = other.<a class="code" href="classmimmo_1_1PortOut.html#aed6b39c025a879e1e6c5c97c077434c9">m_objLink</a>;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    m_obuffer   = other.<a class="code" href="classmimmo_1_1PortOut.html#aabe5fb94d5236254ce6faced545ce1b2">m_obuffer</a>;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    m_portLink  = other.<a class="code" href="classmimmo_1_1PortOut.html#abff49024dac0d2ee0994729ee047ff86">m_portLink</a>;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    m_datatype  = other.<a class="code" href="classmimmo_1_1PortOut.html#af99047744c7f0b51ee6eacc5f05e839c">m_datatype</a>;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;};</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div>
<div class="line"><a name="l00587"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a727c097caaafd09d547286651c0583d4">  587</a></span>&#160;<a class="code" href="classmimmo_1_1PortOut.html">PortOut</a> &amp; PortOut::operator=(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1PortOut.html">PortOut</a> &amp; other){</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    m_objLink   = other.<a class="code" href="classmimmo_1_1PortOut.html#aed6b39c025a879e1e6c5c97c077434c9">m_objLink</a>;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    m_obuffer   = other.<a class="code" href="classmimmo_1_1PortOut.html#aabe5fb94d5236254ce6faced545ce1b2">m_obuffer</a>;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    m_portLink  = other.<a class="code" href="classmimmo_1_1PortOut.html#abff49024dac0d2ee0994729ee047ff86">m_portLink</a>;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    m_datatype  = other.<a class="code" href="classmimmo_1_1PortOut.html#af99047744c7f0b51ee6eacc5f05e839c">m_datatype</a>;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;};</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a2be0de6460499cf34307fbe493b09879">  597</a></span>&#160;<span class="keywordtype">bool</span> PortOut::operator==(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1PortOut.html">PortOut</a> &amp; other){</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    check = check &amp;&amp; (m_portLink == other.<a class="code" href="classmimmo_1_1PortOut.html#abff49024dac0d2ee0994729ee047ff86">m_portLink</a>);</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    check = check &amp;&amp; (m_objLink == other.<a class="code" href="classmimmo_1_1PortOut.html#aed6b39c025a879e1e6c5c97c077434c9">m_objLink</a>);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    check = check &amp;&amp; (m_datatype == other.<a class="code" href="classmimmo_1_1PortOut.html#af99047744c7f0b51ee6eacc5f05e839c">m_datatype</a>);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keywordflow">return</span>(check);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;};</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;std::vector&lt;mimmo::BaseManipulation*&gt;</div>
<div class="line"><a name="l00609"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a92e2552348d3b45064dc69acb79e8ffc">  609</a></span>&#160;PortOut::getLink(){</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">return</span>(m_objLink);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;}</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;std::vector&lt;PortID&gt;</div>
<div class="line"><a name="l00617"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#ac3af688995717554276e69e98ee88b03">  617</a></span>&#160;PortOut::getPortLink(){</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">return</span>(m_portLink);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<a class="code" href="classmimmo_1_1DataType.html">DataType</a></div>
<div class="line"><a name="l00625"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortOut.html#a81c5e5eb91266913dcdc9ad57eb62899">  625</a></span>&#160;PortOut::getDataType(){</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">return</span>(m_datatype);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00632"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortOut.html#ab345b2e0e686febe1f6b87bff3cb4d46">  632</a></span>&#160;mimmo::PortOut::cleanBuffer(){</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    m_obuffer.setCapacity(0);</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    m_obuffer.eof();</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortOut.html#a84b20c0b0aca4800fd7ee6be66595d77">  640</a></span>&#160;mimmo::PortOut::clear(){</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    m_objLink.clear();</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    m_portLink.clear();</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;}</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00649"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortOut.html#a39f48a00518c2ada901633e0a1eb0625">  649</a></span>&#160;mimmo::PortOut::clear(<span class="keywordtype">int</span> j){</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">if</span> (j &lt; m_objLink.size() &amp;&amp; j &gt;= 0){</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        m_objLink.erase(m_objLink.begin() + j);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        m_portLink.erase(m_portLink.begin() + j);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    }</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;}</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00660"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortOut.html#aafaece709ca0b103dfb5015a686eeda7">  660</a></span>&#160;<a class="code" href="classmimmo_1_1PortOut.html#aafaece709ca0b103dfb5015a686eeda7">mimmo::PortOut::exec</a>(){</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    <span class="keywordflow">if</span> (m_objLink.size() &gt; 0){</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        writeBuffer();</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        bitpit::IBinaryStream input(m_obuffer.data());</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        cleanBuffer();</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;m_objLink.size(); j++){</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            <span class="keywordflow">if</span> (m_objLink[j] != NULL){</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                m_objLink[j]-&gt;setBufferIn(m_portLink[j], input);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                m_objLink[j]-&gt;readBufferIn(m_portLink[j]);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                m_objLink[j]-&gt;cleanBufferIn(m_portLink[j]);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            }</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        }</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    }</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;};</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#a870ac88c62c9320813a63b22106f797f">  677</a></span>&#160;PortIn::PortIn(){};</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00681"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#aace401fd1675b52eff21b5be129f23d4">  681</a></span>&#160;PortIn::~PortIn(){};</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#a79aa7be86260c1afebea71b04afe8165">  685</a></span>&#160;PortIn::PortIn(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1PortIn.html">PortIn</a> &amp; other){</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    m_objLink   = other.<a class="code" href="classmimmo_1_1PortIn.html#aad72e164bda764074a9771781b5b864e">m_objLink</a>;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    m_ibuffer   = other.<a class="code" href="classmimmo_1_1PortIn.html#aa9b3f3ff39df967fbee8dd0f07fb324c">m_ibuffer</a>;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    m_datatype  = other.<a class="code" href="classmimmo_1_1PortIn.html#a3a9c8dc01b125b38c067938228ee568e">m_datatype</a>;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;};</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#ae46ca9f7c03b6d5cd506ed993527d2e3">  694</a></span>&#160;<a class="code" href="classmimmo_1_1PortIn.html">PortIn</a> &amp; PortIn::operator=(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1PortIn.html">PortIn</a> &amp; other){</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    m_objLink   = other.<a class="code" href="classmimmo_1_1PortIn.html#aad72e164bda764074a9771781b5b864e">m_objLink</a>;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    m_ibuffer   = other.<a class="code" href="classmimmo_1_1PortIn.html#aa9b3f3ff39df967fbee8dd0f07fb324c">m_ibuffer</a>;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    m_datatype  = other.<a class="code" href="classmimmo_1_1PortIn.html#a3a9c8dc01b125b38c067938228ee568e">m_datatype</a>;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;};</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div>
<div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#aab74af39b4c7e40cff53fa49b1041ad7">  703</a></span>&#160;<span class="keywordtype">bool</span> PortIn::operator==(<span class="keyword">const</span> <a class="code" href="classmimmo_1_1PortIn.html">PortIn</a> &amp; other){</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    check = check &amp;&amp; (m_objLink == other.<a class="code" href="classmimmo_1_1PortIn.html#aad72e164bda764074a9771781b5b864e">m_objLink</a>);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    check = check &amp;&amp; (m_datatype == other.<a class="code" href="classmimmo_1_1PortIn.html#a3a9c8dc01b125b38c067938228ee568e">m_datatype</a>);</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordflow">return</span>(check);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;};</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;std::vector&lt;mimmo::BaseManipulation*&gt;</div>
<div class="line"><a name="l00714"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#aa00fe886c01e634b50be1579104e7665">  714</a></span>&#160;PortIn::getLink(){</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordflow">return</span>(m_objLink);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;}</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<a class="code" href="classmimmo_1_1DataType.html">DataType</a></div>
<div class="line"><a name="l00722"></a><span class="lineno"><a class="line" href="classmimmo_1_1PortIn.html#ac0a8ed0f05d94dc86c52f2b0512bbcca">  722</a></span>&#160;PortIn::getDataType(){</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">return</span>(m_datatype);</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00729"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortIn.html#adf2c7046387290c0902f7436172ee363">  729</a></span>&#160;mimmo::PortIn::clear(){</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    m_objLink.clear();</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;}</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00737"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortIn.html#a36c19f40452d12c184c019e8dd976db8">  737</a></span>&#160;mimmo::PortIn::clear(<span class="keywordtype">int</span> j){</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordflow">if</span> (j &lt; m_objLink.size() &amp;&amp; j &gt;= 0){</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        m_objLink.erase(m_objLink.begin() + j);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    }</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;}</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="keywordtype">void</span></div>
<div class="line"><a name="l00747"></a><span class="lineno"><a class="line" href="classmimmo_1_1mimmo_1_1PortIn.html#afc9978d1ebcab116fa53dbdb953e72b4">  747</a></span>&#160;mimmo::PortIn::cleanBuffer(){</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    m_ibuffer.setCapacity(0);</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    m_ibuffer.eof();</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;}</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div>
<div class="ttc" id="classmimmo_1_1PortOut_html_aafaece709ca0b103dfb5015a686eeda7"><div class="ttname"><a href="classmimmo_1_1PortOut.html#aafaece709ca0b103dfb5015a686eeda7">mimmo::PortOut::exec</a></div><div class="ttdeci">void exec()</div></div>
<div class="ttc" id="classmimmo_1_1PortOut_html_abff49024dac0d2ee0994729ee047ff86"><div class="ttname"><a href="classmimmo_1_1PortOut.html#abff49024dac0d2ee0994729ee047ff86">mimmo::PortOut::m_portLink</a></div><div class="ttdeci">std::vector&lt; PortID &gt; m_portLink</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00090">InOut.hpp:90</a></div></div>
<div class="ttc" id="classmimmo_1_1DataType_html"><div class="ttname"><a href="classmimmo_1_1DataType.html">mimmo::DataType</a></div><div class="ttdoc">Class DataType defines the container and the type of data communicated by ports. </div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00056">InOut.hpp:56</a></div></div>
<div class="ttc" id="classmimmo_1_1PortOut_html_af99047744c7f0b51ee6eacc5f05e839c"><div class="ttname"><a href="classmimmo_1_1PortOut.html#af99047744c7f0b51ee6eacc5f05e839c">mimmo::PortOut::m_datatype</a></div><div class="ttdeci">DataType m_datatype</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00091">InOut.hpp:91</a></div></div>
<div class="ttc" id="namespacemimmo_1_1mimmo_1_1pin_html_ac220136f06cf48dc8dc016d252e2b3e7"><div class="ttname"><a href="namespacemimmo_1_1mimmo_1_1pin.html#ac220136f06cf48dc8dc016d252e2b3e7">mimmo::mimmo::pin::containerTAG</a></div><div class="ttdeci">containerTAG</div><div class="ttdef"><b>Definition:</b> <a href="ProjectCloud_8hpp_source.html#l00171">ProjectCloud.hpp:171</a></div></div>
<div class="ttc" id="classmimmo_1_1MimmoObject_html"><div class="ttname"><a href="classmimmo_1_1MimmoObject.html">mimmo::MimmoObject</a></div><div class="ttdoc">MimmoObject is the base container of geometry for MiMMo library. </div><div class="ttdef"><b>Definition:</b> <a href="MimmoObject_8hpp_source.html#l00046">MimmoObject.hpp:46</a></div></div>
<div class="ttc" id="classmimmo_1_1PortOut_html"><div class="ttname"><a href="classmimmo_1_1PortOut.html">mimmo::PortOut</a></div><div class="ttdoc">PortOut is the input-output PIN base class. </div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00085">InOut.hpp:85</a></div></div>
<div class="ttc" id="classmimmo_1_1PortIn_html_a3a9c8dc01b125b38c067938228ee568e"><div class="ttname"><a href="classmimmo_1_1PortIn.html#a3a9c8dc01b125b38c067938228ee568e">mimmo::PortIn::m_datatype</a></div><div class="ttdeci">DataType m_datatype</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00191">InOut.hpp:191</a></div></div>
<div class="ttc" id="classmimmo_1_1PortIn_html"><div class="ttname"><a href="classmimmo_1_1PortIn.html">mimmo::PortIn</a></div><div class="ttdoc">PortOut is the input-output PIN base class. </div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00186">InOut.hpp:186</a></div></div>
<div class="ttc" id="classmimmo_1_1PortIn_html_aad72e164bda764074a9771781b5b864e"><div class="ttname"><a href="classmimmo_1_1PortIn.html#aad72e164bda764074a9771781b5b864e">mimmo::PortIn::m_objLink</a></div><div class="ttdeci">std::vector&lt; BaseManipulation * &gt; m_objLink</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00190">InOut.hpp:190</a></div></div>
<div class="ttc" id="namespacemimmo_html_a974bf03e98917b63425ad03641d09784"><div class="ttname"><a href="namespacemimmo.html#a974bf03e98917b63425ad03641d09784">mimmo::ShapeType</a></div><div class="ttdeci">ShapeType</div><div class="ttdoc">Identifies the type of elemental shape supported by BasicShape class. </div><div class="ttdef"><b>Definition:</b> <a href="BasicShapes_8hpp_source.html#l00040">BasicShapes.hpp:40</a></div></div>
<div class="ttc" id="classmimmo_1_1BaseManipulation_html"><div class="ttname"><a href="classmimmo_1_1BaseManipulation.html">mimmo::BaseManipulation</a></div><div class="ttdoc">BaseManipulation is the base class of any object (derived class) for manipulation of the geometry...</div><div class="ttdef"><b>Definition:</b> <a href="BaseManipulation_8hpp_source.html#l00067">BaseManipulation.hpp:67</a></div></div>
<div class="ttc" id="classmimmo_1_1PortOut_html_aed6b39c025a879e1e6c5c97c077434c9"><div class="ttname"><a href="classmimmo_1_1PortOut.html#aed6b39c025a879e1e6c5c97c077434c9">mimmo::PortOut::m_objLink</a></div><div class="ttdeci">std::vector&lt; BaseManipulation * &gt; m_objLink</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00089">InOut.hpp:89</a></div></div>
<div class="ttc" id="namespacemimmo_1_1mimmo_1_1pin_html_ab5b677b1323ff6d20f274dad47df9182"><div class="ttname"><a href="namespacemimmo_1_1mimmo_1_1pin.html#ab5b677b1323ff6d20f274dad47df9182">mimmo::mimmo::pin::dataTAG</a></div><div class="ttdeci">dataTAG</div><div class="ttdef"><b>Definition:</b> <a href="ProjectCloud_8hpp_source.html#l00194">ProjectCloud.hpp:194</a></div></div>
<div class="ttc" id="classmimmo_1_1PortIn_html_aa9b3f3ff39df967fbee8dd0f07fb324c"><div class="ttname"><a href="classmimmo_1_1PortIn.html#aa9b3f3ff39df967fbee8dd0f07fb324c">mimmo::PortIn::m_ibuffer</a></div><div class="ttdeci">bitpit::IBinaryStream m_ibuffer</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00189">InOut.hpp:189</a></div></div>
<div class="ttc" id="classmimmo_1_1PortOut_html_aabe5fb94d5236254ce6faced545ce1b2"><div class="ttname"><a href="classmimmo_1_1PortOut.html#aabe5fb94d5236254ce6faced545ce1b2">mimmo::PortOut::m_obuffer</a></div><div class="ttdeci">bitpit::OBinaryStream m_obuffer</div><div class="ttdef"><b>Definition:</b> <a href="InOut_8hpp_source.html#l00088">InOut.hpp:88</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li><li class="navelem"><b>InOut.cpp</b></li>
    <li class="footer">Generated on Tue Dec 13 2016 17:55:34 for MiMMO by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.5 </li>
  </ul>
</div>
</body>
</html>

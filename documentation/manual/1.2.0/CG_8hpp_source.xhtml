
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/CG/CG.hpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_65444a4cf2ea1e0e670f935743e3f119.xhtml">CG</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">CG.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"># ifndef __BITPIT_CG_BASE_HPP__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># define __BITPIT_CG_BASE_HPP__</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// INCLUDES                                                                   //</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// Standard Template Library</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"># include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"># include &lt;array&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"># include &lt;vector&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"># include &lt;string&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"># include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// bitpit library</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"># include &quot;bitpit_operators.hpp&quot;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// Basic computational geometry ============================================= //</span></div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="namespacebitpit_1_1CGElem.xhtml">   45</a></span>&#160;<span class="keyword">namespace </span>CGElem{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">typedef</span> std::array&lt;double,3&gt; array3D ;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> std::array&lt; std::array&lt;int,2&gt;,12&gt; boxEdgeVertexConnectivity =</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    std::array&lt;int,2&gt;{ {0,2} },</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    std::array&lt;int,2&gt;{ {1,3} },</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    std::array&lt;int,2&gt;{ {0,1} },</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::array&lt;int,2&gt;{ {2,3} },</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::array&lt;int,2&gt;{ {4,6} },</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::array&lt;int,2&gt;{ {5,7} },</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::array&lt;int,2&gt;{ {4,5} },</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    std::array&lt;int,2&gt;{ {6,7} },</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::array&lt;int,2&gt;{ {0,4} },</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    std::array&lt;int,2&gt;{ {1,5} },</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::array&lt;int,2&gt;{ {2,6} },</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    std::array&lt;int,2&gt;{ {3,7} }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}};</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> std::array&lt; std::array&lt;int,4&gt;, 6&gt; boxFaceVertexConnectivity =</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    std::array&lt;int,4&gt;{ {0,2,6,4} },</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    std::array&lt;int,4&gt;{ {1,3,7,5} },</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    std::array&lt;int,4&gt;{ {0,4,5,1} },</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    std::array&lt;int,4&gt;{ {2,6,7,3} },</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    std::array&lt;int,4&gt;{ {0,1,3,2} },</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    std::array&lt;int,4&gt;{ {4,5,7,6} }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}};</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#ga0b186f528f3dfbbba58c597e5b8ca129">distancePointLine</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#ga28976f06b57e03754967b18ff086d82e">distancePointPlane</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#gae545eae55c3c1de0e5d5ddd1e61faebf">distancePointSegment</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, <span class="keywordtype">int</span> &amp; ) ;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#gae545eae55c3c1de0e5d5ddd1e61faebf">distancePointSegment</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, std::array&lt;double,2&gt; &amp; ) ;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#ga4e5d22fcba141d307e6fe304aa923697">distancePointTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, <span class="keywordtype">int</span> &amp; ) ;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#ga4e5d22fcba141d307e6fe304aa923697">distancePointTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keywordtype">double</span>              <a class="code" href="group__CG.xhtml#ga117c4d6c26f342961f9d08539f349c0e">distancePointSimplex</a>( array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, array3D &amp;, <span class="keywordtype">int</span> &amp; );</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;std::vector&lt;double&gt; <a class="code" href="group__CG.xhtml#gadaa89cadf1673e949561d5a4f76dac37">distanceCloudTriangle</a>( std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; &amp;, std::vector&lt;int&gt; &amp; );</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;std::vector&lt;double&gt; <a class="code" href="group__CG.xhtml#ga458674818b75b1483c3230aed5e79489">distanceCloudSimplex</a>( std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; &amp;, std::vector&lt;int&gt; &amp; );</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga452da0b1ef8c1f8e1800e15fa6274905">intersectPointSegment</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp; ) ;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#gaa7ef8fb3466f1a2f5b3649adc4877220">intersectPointTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp; ) ;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga5cfa556dd5a2e5b1aad6d3f3f5de1abd">intersectPointBox</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, <span class="keywordtype">int</span> dim=3 ) ;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga93d2af41505f0a9b9cf872a4e58b0d85">intersectLineLine</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga8a9146b741131d214b9de49f34da78e6">intersectLinePlane</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#gaee0b9e12077a84bab81f9723fe105e93">intersectLineTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga253f1da11618741ba6a3d28e359f2f35">intersectLineSimplex</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga4ba48b236af6deafacc652dcb6230b1a">intersectSegmentSegment</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga539176e3d1968d2c259768ffc05fbee3">intersectSegmentPlane</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga64c4dd9ddee021e20938b9ab939242d6">intersectSegmentTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga77795ed4e8b89797b0d9e53c461c42ba">intersectSegmentSimplex</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#gaaed8ea1a85150953485b336dd2c6d528">intersectSegmentBox</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, <span class="keywordtype">int</span>  dim = 3 ) ;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#gaaed8ea1a85150953485b336dd2c6d528">intersectSegmentBox</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; &amp;, <span class="keywordtype">int</span>  dim = 3 ) ;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga3df671f58183f772cd7e5c3af5a27272">intersectPlanePlane</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga28d8df159d89502ca11a1621114bef2d">intersectBoxBox</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, <span class="keywordtype">int</span>  dim = 3 ) ;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga28d8df159d89502ca11a1621114bef2d">intersectBoxBox</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp;, <span class="keywordtype">int</span>  dim = 3 ) ;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga3b8e0df06710d21b83057b3707f3017f">intersectBoxTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp; ) ;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#ga3b8e0df06710d21b83057b3707f3017f">intersectBoxTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; &amp; ) ;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#gafcc27b894cfe337cd6d3623a41bb2819">intersectBoxSimplex</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, <span class="keywordtype">int</span> dim=3 ) ;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keywordtype">bool</span>                <a class="code" href="group__CG.xhtml#gafcc27b894cfe337cd6d3623a41bb2819">intersectBoxSimplex</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; &amp;, <span class="keywordtype">int</span> dim=3 ) ;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keywordtype">void</span>                <a class="code" href="group__CG.xhtml#gaed22a95c25a4188b2aed1e195b40df68">computeAABBSegment</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keywordtype">void</span>                <a class="code" href="group__CG.xhtml#ga361eb9679beb9717525ad56d57fca646">computeAABBTriangle</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keywordtype">void</span>                <a class="code" href="group__CG.xhtml#gac750c9b80eaff130f9dab6838471805e">computeAABBSimplex</a>( std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; ) ;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keywordtype">void</span>                <a class="code" href="group__CG.xhtml#ga1e3859b64c3d6419c2ce47c0558526b6">unionAABB</a>( array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; );</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keywordtype">void</span>                <a class="code" href="group__CG.xhtml#ga1e3859b64c3d6419c2ce47c0558526b6">unionAABB</a>( std::vector&lt;array3D&gt;  <span class="keyword">const</span> &amp;, std::vector&lt;array3D&gt; <span class="keyword">const</span> &amp;, array3D &amp;, array3D &amp; );</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">//levelset    bool IntersectLineSurface(</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">//levelset            array3D  const  &amp;,                                                // (input)  first point on surface</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">//levelset            array3D  const  &amp;,                                                // (input)  normal of first point on surface</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">//levelset            array3D  const  &amp;,                                                // (input)  second point on surface</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">//levelset            array3D  const  &amp;,                                                // (input)  normal of second point on surface</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">//levelset            array3D  const  &amp;,                                                // (input)  point on line</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">//levelset            array3D  const  &amp;,                                                // (input)  versor of line</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">//levelset            array3D         &amp;,                                                // (output)  intersection of line and surface</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">//levelset            array3D         &amp;                                                 // (output)  normal at intersection</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">//levelset            );</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__CG.xhtml#gaaffff56c0556b6b8b785a26294623c32">rotateVector</a>(</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        std::array&lt;double, 3&gt;                    &amp;,</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordtype">double</span>                                     </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        );</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__CG.xhtml#ga3a50c3550715d1622f5643c5d436e96a">vertexOfBox</a>(</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordtype">int</span>              <span class="keyword">const</span>              &amp;,     </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        std::array&lt;double, 3&gt;                    &amp; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        );</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__CG.xhtml#gaaadfa940aafafbe1dd901869e0c5b005">edgeOfBox</a>(</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordtype">int</span>              <span class="keyword">const</span>              &amp;,     </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        std::array&lt;double, 3&gt;                    &amp;,</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        std::array&lt;double, 3&gt;                    &amp; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        );</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__CG.xhtml#ga2fc46bb8132243943a3e4a4edcb2c0be">faceOfBox</a>(</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordtype">int</span>              <span class="keyword">const</span>              &amp;,     </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        std::array&lt;double, 3&gt; <span class="keyword">const</span>              &amp;,</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        std::array&lt;double, 3&gt;                    &amp;,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        std::array&lt;double, 3&gt;                    &amp;,</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        std::array&lt;double, 3&gt;                    &amp;,</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        std::array&lt;double, 3&gt;                    &amp; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        );</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">// Algorithms =============================================================== //</span></div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="namespacebitpit_1_1CGAlgorithms.xhtml">  173</a></span>&#160;<span class="keyword">namespace </span>CGAlgorithms {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keywordtype">double</span> grad1DUpdate(                                                      <span class="comment">// Update the local solution to the 1D grad limiting equation on a vertex of a 1D manifold</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) number of simplicies</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        std::vector&lt;std::array&lt;double,3&gt;&gt;                       &amp;,                                    <span class="comment">// (input) vertex coordinate list</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-vertex connectivity</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        std::vector&lt;std::vector&lt;std::vector&lt;int&gt;&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-simplex adjacency</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        std::vector&lt;double&gt;                       &amp;,                                    <span class="comment">// (input) scalar field to be limited</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) global index of simplex containing the vertex</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) local index of vertex</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordtype">double</span>                           ,                                    <span class="comment">// (input) max slope</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        std::vector&lt;bool&gt;                       &amp;                                     <span class="comment">// (input) flag for dead/alive vertices</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        );</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keywordtype">void</span> gradLimiting1D(                                                      <span class="comment">// Solve the grad limiting eq. on a 1D manifold in a 2D Euclidean space</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) number of simplicies</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        std::vector&lt;std::array&lt;double,3&gt;&gt;                       &amp;,                                    <span class="comment">// (input) vertex coordinate list</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-vertex connectivity</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        std::vector&lt;std::vector&lt;std::vector&lt;int&gt;&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-simplex adjacency</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        std::vector&lt;double&gt;                       &amp;,                                    <span class="comment">// (input) scalar field to be limited</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordtype">double</span>                                                                <span class="comment">// (input) max slope</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        );</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keywordtype">double</span> grad2DUpdate(                                                      <span class="comment">// Update the local solution to the 2D grad limiting equation on a vertex of a 2D manifold</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) number of simplicies</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        std::vector&lt;std::array&lt;double,3&gt;&gt;                       &amp;,                                    <span class="comment">// (input) vertex coordinate list</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-vertex connectivity</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        std::vector&lt;std::vector&lt;std::vector&lt;int&gt;&gt;&gt;                       &amp;,                                    <span class="comment">// (input) list of simplicies in the 1-ring of the given vertex</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        std::vector&lt;double&gt;                       &amp;,                                    <span class="comment">// (input) scalar field to be limited</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) global index of simplex containing the vertex</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) local index of vertex</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordtype">double</span>                           ,                                    <span class="comment">// (input) max slope</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        std::vector&lt;bool&gt;                       &amp;                                     <span class="comment">// (input) flag for dead/alive vertices</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        );</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keywordtype">void</span> gradLimiting2D(                                                      <span class="comment">// Solve the grad limiting eq. on a 2D manifold in a 3D Euclidean space</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) number of simplicies</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        std::vector&lt;std::array&lt;double,3&gt;&gt;                       &amp;,                                    <span class="comment">// (input) vertex coordinate list</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-vertex connectivity</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        std::vector&lt;double&gt;                       &amp;,                                    <span class="comment">// (input/output) scalar field to be limited</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordtype">double</span>                                                                <span class="comment">// (input) max slope</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        );</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="keywordtype">double</span> grad2DUpdate(                                                      <span class="comment">// Update the local solution to the 2D grad limiting equation on a cell of a 2D volume</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) number of simplicies</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        std::vector&lt;std::array&lt;double,3&gt;&gt;                       &amp;,                                    <span class="comment">// (input) vertex coordinate list</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-vertex connectivity</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-simplex adjacency</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        std::vector&lt;double&gt;                       &amp;,                                    <span class="comment">// (input) scalar field to be limited</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) global index of simplex to be updated</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordtype">double</span>                           ,                                    <span class="comment">// (input) max slope</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        std::vector&lt;bool&gt;                       &amp;                                     <span class="comment">// (input) flag for dead/alive vertices</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        );</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keywordtype">void</span> gradLimiting2D(                                                      <span class="comment">// Solve the grad limiting eq. in a 2D volume</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordtype">int</span>                              ,                                    <span class="comment">// (input) number of simplicies</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        std::vector&lt;std::array&lt;double,3&gt;&gt;                       &amp;,                                    <span class="comment">// (input) vertex coordinate list</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-vertex connectivity,</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt;                       &amp;,                                    <span class="comment">// (input) simplex-simplex adjacency</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        std::vector&lt;double&gt;                       &amp;,                                    <span class="comment">// (input/output) scalar field to be limited</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordtype">double</span>                                                                <span class="comment">// (input) max slope</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        );</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;}</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="ttc" id="group__CG_xhtml_ga3a50c3550715d1622f5643c5d436e96a"><div class="ttname"><a href="group__CG.xhtml#ga3a50c3550715d1622f5643c5d436e96a">bitpit::CGElem::vertexOfBox</a></div><div class="ttdeci">void vertexOfBox(int const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01854">CG_elem.cpp:1854</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga4ba48b236af6deafacc652dcb6230b1a"><div class="ttname"><a href="group__CG.xhtml#ga4ba48b236af6deafacc652dcb6230b1a">bitpit::CGElem::intersectSegmentSegment</a></div><div class="ttdeci">bool intersectSegmentSegment(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00700">CG_elem.cpp:700</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga253f1da11618741ba6a3d28e359f2f35"><div class="ttname"><a href="group__CG.xhtml#ga253f1da11618741ba6a3d28e359f2f35">bitpit::CGElem::intersectLineSimplex</a></div><div class="ttdeci">bool intersectLineSimplex(array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00957">CG_elem.cpp:957</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga117c4d6c26f342961f9d08539f349c0e"><div class="ttname"><a href="group__CG.xhtml#ga117c4d6c26f342961f9d08539f349c0e">bitpit::CGElem::distancePointSimplex</a></div><div class="ttdeci">double distancePointSimplex(array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;, int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00511">CG_elem.cpp:511</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga1e3859b64c3d6419c2ce47c0558526b6"><div class="ttname"><a href="group__CG.xhtml#ga1e3859b64c3d6419c2ce47c0558526b6">bitpit::CGElem::unionAABB</a></div><div class="ttdeci">void unionAABB(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01734">CG_elem.cpp:1734</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga5cfa556dd5a2e5b1aad6d3f3f5de1abd"><div class="ttname"><a href="group__CG.xhtml#ga5cfa556dd5a2e5b1aad6d3f3f5de1abd">bitpit::CGElem::intersectPointBox</a></div><div class="ttdeci">bool intersectPointBox(array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01616">CG_elem.cpp:1616</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga361eb9679beb9717525ad56d57fca646"><div class="ttname"><a href="group__CG.xhtml#ga361eb9679beb9717525ad56d57fca646">bitpit::CGElem::computeAABBTriangle</a></div><div class="ttdeci">void computeAABBTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01672">CG_elem.cpp:1672</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga3b8e0df06710d21b83057b3707f3017f"><div class="ttname"><a href="group__CG.xhtml#ga3b8e0df06710d21b83057b3707f3017f">bitpit::CGElem::intersectBoxTriangle</a></div><div class="ttdeci">bool intersectBoxTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01106">CG_elem.cpp:1106</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga0b186f528f3dfbbba58c597e5b8ca129"><div class="ttname"><a href="group__CG.xhtml#ga0b186f528f3dfbbba58c597e5b8ca129">bitpit::CGElem::distancePointLine</a></div><div class="ttdeci">double distancePointLine(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00053">CG_elem.cpp:53</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga2fc46bb8132243943a3e4a4edcb2c0be"><div class="ttname"><a href="group__CG.xhtml#ga2fc46bb8132243943a3e4a4edcb2c0be">bitpit::CGElem::faceOfBox</a></div><div class="ttdeci">void faceOfBox(int const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01792">CG_elem.cpp:1792</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga458674818b75b1483c3230aed5e79489"><div class="ttname"><a href="group__CG.xhtml#ga458674818b75b1483c3230aed5e79489">bitpit::CGElem::distanceCloudSimplex</a></div><div class="ttdeci">std::vector&lt; double &gt; distanceCloudSimplex(std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; &amp;, std::vector&lt; int &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00577">CG_elem.cpp:577</a></div></div>
<div class="ttc" id="group__CG_xhtml_gaee0b9e12077a84bab81f9723fe105e93"><div class="ttname"><a href="group__CG.xhtml#gaee0b9e12077a84bab81f9723fe105e93">bitpit::CGElem::intersectLineTriangle</a></div><div class="ttdeci">bool intersectLineTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00893">CG_elem.cpp:893</a></div></div>
<div class="ttc" id="group__CG_xhtml_gaaed8ea1a85150953485b336dd2c6d528"><div class="ttname"><a href="group__CG.xhtml#gaaed8ea1a85150953485b336dd2c6d528">bitpit::CGElem::intersectSegmentBox</a></div><div class="ttdeci">bool intersectSegmentBox(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01186">CG_elem.cpp:1186</a></div></div>
<div class="ttc" id="group__CG_xhtml_gaed22a95c25a4188b2aed1e195b40df68"><div class="ttname"><a href="group__CG.xhtml#gaed22a95c25a4188b2aed1e195b40df68">bitpit::CGElem::computeAABBSegment</a></div><div class="ttdeci">void computeAABBSegment(array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01643">CG_elem.cpp:1643</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga8a9146b741131d214b9de49f34da78e6"><div class="ttname"><a href="group__CG.xhtml#ga8a9146b741131d214b9de49f34da78e6">bitpit::CGElem::intersectLinePlane</a></div><div class="ttdeci">bool intersectLinePlane(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00756">CG_elem.cpp:756</a></div></div>
<div class="ttc" id="group__CG_xhtml_gae545eae55c3c1de0e5d5ddd1e61faebf"><div class="ttname"><a href="group__CG.xhtml#gae545eae55c3c1de0e5d5ddd1e61faebf">bitpit::CGElem::distancePointSegment</a></div><div class="ttdeci">double distancePointSegment(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00107">CG_elem.cpp:107</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga28d8df159d89502ca11a1621114bef2d"><div class="ttname"><a href="group__CG.xhtml#ga28d8df159d89502ca11a1621114bef2d">bitpit::CGElem::intersectBoxBox</a></div><div class="ttdeci">bool intersectBoxBox(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01035">CG_elem.cpp:1035</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga93d2af41505f0a9b9cf872a4e58b0d85"><div class="ttname"><a href="group__CG.xhtml#ga93d2af41505f0a9b9cf872a4e58b0d85">bitpit::CGElem::intersectLineLine</a></div><div class="ttdeci">bool intersectLineLine(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00664">CG_elem.cpp:664</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga28976f06b57e03754967b18ff086d82e"><div class="ttname"><a href="group__CG.xhtml#ga28976f06b57e03754967b18ff086d82e">bitpit::CGElem::distancePointPlane</a></div><div class="ttdeci">double distancePointPlane(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00079">CG_elem.cpp:79</a></div></div>
<div class="ttc" id="group__CG_xhtml_gadaa89cadf1673e949561d5a4f76dac37"><div class="ttname"><a href="group__CG.xhtml#gadaa89cadf1673e949561d5a4f76dac37">bitpit::CGElem::distanceCloudTriangle</a></div><div class="ttdeci">std::vector&lt; double &gt; distanceCloudTriangle(std::vector&lt; array3D &gt; const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; &amp;, std::vector&lt; int &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00377">CG_elem.cpp:377</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga77795ed4e8b89797b0d9e53c461c42ba"><div class="ttname"><a href="group__CG.xhtml#ga77795ed4e8b89797b0d9e53c461c42ba">bitpit::CGElem::intersectSegmentSimplex</a></div><div class="ttdeci">bool intersectSegmentSimplex(array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00998">CG_elem.cpp:998</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga4e5d22fcba141d307e6fe304aa923697"><div class="ttname"><a href="group__CG.xhtml#ga4e5d22fcba141d307e6fe304aa923697">bitpit::CGElem::distancePointTriangle</a></div><div class="ttdeci">double distancePointTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00184">CG_elem.cpp:184</a></div></div>
<div class="ttc" id="group__CG_xhtml_gaa7ef8fb3466f1a2f5b3649adc4877220"><div class="ttname"><a href="group__CG.xhtml#gaa7ef8fb3466f1a2f5b3649adc4877220">bitpit::CGElem::intersectPointTriangle</a></div><div class="ttdeci">bool intersectPointTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01545">CG_elem.cpp:1545</a></div></div>
<div class="ttc" id="group__CG_xhtml_gac750c9b80eaff130f9dab6838471805e"><div class="ttname"><a href="group__CG.xhtml#gac750c9b80eaff130f9dab6838471805e">bitpit::CGElem::computeAABBSimplex</a></div><div class="ttdeci">void computeAABBSimplex(std::vector&lt; array3D &gt; const &amp;, array3D &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01703">CG_elem.cpp:1703</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga64c4dd9ddee021e20938b9ab939242d6"><div class="ttname"><a href="group__CG.xhtml#ga64c4dd9ddee021e20938b9ab939242d6">bitpit::CGElem::intersectSegmentTriangle</a></div><div class="ttdeci">bool intersectSegmentTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00926">CG_elem.cpp:926</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga452da0b1ef8c1f8e1800e15fa6274905"><div class="ttname"><a href="group__CG.xhtml#ga452da0b1ef8c1f8e1800e15fa6274905">bitpit::CGElem::intersectPointSegment</a></div><div class="ttdeci">bool intersectPointSegment(array3D const &amp;, array3D const &amp;, array3D const &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01512">CG_elem.cpp:1512</a></div></div>
<div class="ttc" id="group__CG_xhtml_gaaffff56c0556b6b8b785a26294623c32"><div class="ttname"><a href="group__CG.xhtml#gaaffff56c0556b6b8b785a26294623c32">bitpit::CGElem::rotateVector</a></div><div class="ttdeci">void rotateVector(std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; const &amp;, double)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01924">CG_elem.cpp:1924</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga3df671f58183f772cd7e5c3af5a27272"><div class="ttname"><a href="group__CG.xhtml#ga3df671f58183f772cd7e5c3af5a27272">bitpit::CGElem::intersectPlanePlane</a></div><div class="ttdeci">bool intersectPlanePlane(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00828">CG_elem.cpp:828</a></div></div>
<div class="ttc" id="group__CG_xhtml_gaaadfa940aafafbe1dd901869e0c5b005"><div class="ttname"><a href="group__CG.xhtml#gaaadfa940aafafbe1dd901869e0c5b005">bitpit::CGElem::edgeOfBox</a></div><div class="ttdeci">void edgeOfBox(int const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01827">CG_elem.cpp:1827</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga539176e3d1968d2c259768ffc05fbee3"><div class="ttname"><a href="group__CG.xhtml#ga539176e3d1968d2c259768ffc05fbee3">bitpit::CGElem::intersectSegmentPlane</a></div><div class="ttdeci">bool intersectSegmentPlane(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00794">CG_elem.cpp:794</a></div></div>
<div class="ttc" id="group__CG_xhtml_gafcc27b894cfe337cd6d3623a41bb2819"><div class="ttname"><a href="group__CG.xhtml#gafcc27b894cfe337cd6d3623a41bb2819">bitpit::CGElem::intersectBoxSimplex</a></div><div class="ttdeci">bool intersectBoxSimplex(array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01315">CG_elem.cpp:1315</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

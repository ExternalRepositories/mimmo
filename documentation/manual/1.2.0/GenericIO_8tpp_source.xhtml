
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/IO/GenericIO.tpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_fae119eb913a40fe8ed97cde8b98911e.xhtml">IO</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">GenericIO.tpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include&quot;logger.hpp&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include&quot;Operators.hpp&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span>genericIO{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga3b48c4796aa06cab00c521a3a6c4f967">   44</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keyword">const</span> data_T &amp;data ){</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    str &lt;&lt; std::setprecision(8) &lt;&lt; std::scientific ;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    str &lt;&lt; data &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    return ;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gafc41b44d16eb524006648b6ad1475218">   59</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keyword">const</span> std::vector&lt;data_T&gt; &amp;data ){</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, data.size(), data) ;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    return ;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;};</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gaab157d8b756031e9b085cc1097f02f66">   74</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keywordtype">int</span> elements_per_line, <span class="keyword">const</span> std::vector&lt;data_T&gt; &amp;data ){</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">int</span> i(0), j(0), k(0) ;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">int</span> nr ;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">int</span> lines, this_line ;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">bool</span> next(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    nr = data.size() ;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    lines = (nr-1) /elements_per_line + 1;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    str &lt;&lt; std::setprecision(8) &lt;&lt; std::scientific ;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">while</span>( next ) {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        this_line = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>( elements_per_line, nr - k ) ;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">for</span>( j=0; j&lt;this_line; j++){</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, data[k] ) ;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            k++ ;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        };</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        i++ ;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">if</span>( i&lt;lines){</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            str &lt;&lt; std::endl;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            next = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        };</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    };</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    return ;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;};</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga5a60cfb9bd56a73c967b7fccdf7c75ed">  119</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keyword">const</span> std::array&lt;data_T,d&gt; &amp;data ){</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, d, data ) ;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    return ;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;};</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga95d358e98e4c2a98a11448fb1fe58a3d">  134</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keywordtype">int</span> elements_per_line, <span class="keyword">const</span> std::array&lt;data_T,d&gt; &amp;data ){</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">int</span> i(0), j(0), k(0) ;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">int</span> nr ;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">int</span> lines, this_line ;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">bool</span> next(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    nr = d ;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    lines = nr /elements_per_line ;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    str &lt;&lt; std::setprecision(8) &lt;&lt; std::scientific ;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">while</span>( next ) {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        this_line = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>( elements_per_line, nr - k ) ;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">for</span>( j=0; j&lt;this_line; j++){</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, data[k] ) ;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            k++ ;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        };</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        i++ ;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">if</span>( i&lt;lines){</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            str &lt;&lt; std::endl;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            next = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        };</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    };</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    return ;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;};</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga31bdaf90b1433da5c94ec061c415a2df">  179</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keywordtype">int</span> elements_per_line, <span class="keyword">const</span> data_T *data, <span class="keywordtype">int</span> nr ){</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordtype">int</span> i(0), j(0), k(0) ;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">int</span> lines, this_line ;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">bool</span> next(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    lines = nr /elements_per_line ;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    str &lt;&lt; std::setprecision(8) &lt;&lt; std::scientific ;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">while</span>( next ) {</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        this_line = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>( elements_per_line, nr - k ) ;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">for</span>( j=0; j&lt;this_line; j++){</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, data[k] ) ;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            k++ ;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        };</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        i++ ;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span>( i&lt;lines){</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            str &lt;&lt; std::endl;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        }</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            next = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        };</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    };</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    return ;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;};</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga077235d25514f2ff6c29f30632b0e619">  223</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( std::fstream &amp;str, <span class="keywordtype">int</span> elements_per_line, <span class="keyword">const</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;data_T&gt;</a> &amp;data, <span class="keywordtype">bool</span> writeIndex ){</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedVector&lt;data_T&gt;::const_iterator</a> dataItr =data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>() ;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">int</span> i(0), j(0), k(0) ;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordtype">int</span> nr ;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">int</span> lines, this_line ;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">bool</span> next(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    nr = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03">size</a>() ;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    lines = (nr-1) /elements_per_line + 1;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    str &lt;&lt; std::setprecision(8) &lt;&lt; std::scientific ;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">while</span>( next ) {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        this_line = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>( elements_per_line, nr - k ) ;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">for</span>( j=0; j&lt;this_line; j++){</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">if</span>(writeIndex){</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, dataItr.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>() ) ;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <a class="code" href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">flushASCII</a>( str, *dataItr ) ;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            k++ ;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            dataItr++ ;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        };</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        i++ ;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">if</span>( i&lt;lines){</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            str &lt;&lt; std::endl;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            next = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        };</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    };</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    return ;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    return ;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;};</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">  275</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> data_T &amp;data ){</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">int</span> nbytes;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) ;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    str.write( reinterpret_cast&lt;const char*&gt;(&amp;data), nbytes ) ;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    return ;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;};</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga8b1441b0c9e61473683f5f197597f014">  293</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> std::vector&lt;data_T&gt; &amp;data ){</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordtype">int</span> nbytes, nr;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    nr = data.size() ;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *nr ;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    str.write( reinterpret_cast&lt;const char*&gt;(&amp;data[0]), nbytes ) ;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    return ;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;};</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga2b84c1166dd73fac7f7617c097e0eb8b">  311</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> std::vector&lt; std::vector&lt;data_T&gt; &gt; &amp;data ){</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;item : data){</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( str, item ) ;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    };</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    return ;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;};</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga259c6e7fd9218a8a778e227d15358b55">  330</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> std::vector&lt; std::array&lt;data_T,d&gt; &gt; &amp;data ){</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordtype">int</span> nbytes, nr;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    nr = data.size() ;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *nr *d ;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    str.write( reinterpret_cast&lt;const char*&gt;(&amp;data[0]), nbytes ) ;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    return ;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;};</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gaef87848ca7743dac4b72b883cc42a1c6">  349</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> std::array&lt;data_T,d&gt; &amp;data ){</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="keywordtype">int</span> nbytes;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T)*d ;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    str.write( reinterpret_cast&lt;const char*&gt;(&amp;data[0]), nbytes ) ;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    return ;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;};</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gac267180f10647b304ea65ccf66a47a75">  367</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> data_T *data, <span class="keywordtype">int</span> nr ){</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordtype">int</span> nbytes;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *nr ;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    str.write( reinterpret_cast&lt;const char*&gt;(data), nbytes ) ;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    return ;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;};</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga361cc03ad8fd4b068c1972712a225f91">  386</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( std::fstream &amp;str, <span class="keyword">const</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;data_T&gt;</a> &amp;data, <span class="keywordtype">bool</span> writeIndex ){</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;data_T&gt;::const_iterator</a> dataItr, dataEnd = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>() ;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">if</span>( writeIndex){</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">for</span>( dataItr = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(); dataItr != dataEnd; ++dataItr){</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( str, dataItr.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>() ) ;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( str, *dataItr) ;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    } <span class="keywordflow">else</span> { </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">for</span>( dataItr = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(); dataItr != dataEnd; ++dataItr){</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">flushBINARY</a>( str, *dataItr) ;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    };</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    return ;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;};</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00415"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">  415</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( std::fstream &amp;str, data_T &amp;data){</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    std::vector&lt;data_T&gt; temp;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    data_T         x_;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    std::string         line;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keywordtype">int</span>            expected, read(0) ;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    expected = 1;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    getline( str, line );</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a>( line );</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    std::stringstream ss( line );</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">while</span>( ss.good() ){</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        ss &gt;&gt; x_ ;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        temp.push_back(x_);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        read++ ;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    };</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">if</span>( read != expected){</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Not expected nr of element in line&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Expected number: &quot;</span>&lt;&lt; expected &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Actual number: &quot;</span>&lt;&lt; read &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    }</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        data=temp[0];</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    };</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;};</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga959d950c7ad1f6896477a593526bc2a7">  460</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( std::fstream &amp;str, std::vector&lt;data_T&gt; &amp;data){</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    std::string           line;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordtype">int</span>                   expected(data.size()) ;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    getline( str, line );</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a>( line );</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    std::stringstream ss( line );</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordflow">if</span>( expected == 0) {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        data_T  x_;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">while</span>( ss.good() ){</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            ss &gt;&gt; x_ ;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            data.push_back(x_);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        };</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <span class="keywordtype">int</span> read(0) ;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">while</span>( ss.good() &amp;&amp; read&lt;expected){</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            ss &gt;&gt; data[read] ;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            read++ ;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        };</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">if</span>( expected != read){</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; Not expected nr of element in line&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; Expected number: &quot;</span>&lt;&lt; expected &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; Actual number: &quot;</span>&lt;&lt; read &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;};</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00507"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga50b6e67e789b45a3f032ffeaa3dfb3ab">  507</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( std::fstream &amp;str, std::array&lt;data_T,d&gt; &amp;data){</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    std::vector&lt;data_T&gt; temp;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    data_T              x_;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    std::string         line;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordtype">int</span>                 expected, read(0), i ;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    expected = d ;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    getline( str, line );</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a>( line );</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    std::stringstream ss( line );</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordflow">while</span>( ss.good() ){</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        ss &gt;&gt; x_ ;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        temp.push_back(x_);</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        read++ ;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    };</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">if</span>( expected == read){</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">for</span>(i=0; i&lt;read; i++) data[i] = temp[i] ;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    }</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Not expected nr of element in line&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Expected number: &quot;</span>&lt;&lt; expected &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Actual number: &quot;</span>&lt;&lt; read &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    };</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;};</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00551"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gac73488a4f3b9e50ca71dbb0a022719b4">  551</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( std::fstream &amp;str, data_T *data, <span class="keywordtype">int</span> nr ){</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    std::vector&lt;data_T&gt; temp;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    data_T              x_;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    std::string         line;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordtype">int</span>                 expected, read(0), i ;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    expected = nr ;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    getline( str, line );</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a>( line );</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    std::stringstream ss( line );</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">while</span>( ss.good() ){</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        ss &gt;&gt; x_ ;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        temp.push_back(x_);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        read++ ;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    };</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordflow">if</span>( expected == read){</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">for</span>(i=0; i&lt;read; i++) data[i] = temp[i] ;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Not expected nr of element in line&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Expected number: &quot;</span>&lt;&lt; expected &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot; Actual number: &quot;</span>&lt;&lt; read &lt;&lt; std::endl ; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    };</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;};</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">  592</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">absorbASCII</a>( std::fstream &amp;str, data_T &amp;data ){</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    str &gt;&gt; data ;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    return ;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;};</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00609"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gaa8061d6fc1533763c1e8791bffd469e7">  609</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">absorbASCII</a>( std::fstream &amp;str, std::vector&lt;data_T&gt; &amp;data ){</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    std::vector&lt;data_T&gt;             temp;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keyword">typename</span> std::vector&lt;data_T&gt;::iterator   itrData, begData, endData;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keyword">typename</span> std::vector&lt;data_T&gt;::iterator   itrTemp, begTemp, endTemp;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    begData = data.begin() ;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    endData = data.end() ;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;    itrData = begData ;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">while</span>( str.good() &amp;&amp; itrData!=endData ) {</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        temp.clear() ;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( str, temp) ;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        begTemp = temp.begin() ;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        endTemp = temp.end() ;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keywordflow">for</span>( itrTemp=begTemp; (itrTemp!=endTemp &amp;&amp; itrData!=endData); ){</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            *itrData = *itrTemp ;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            ++itrTemp;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            ++itrData;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        };</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    };</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordflow">if</span>( itrData != endData ) {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Not enough elements found to fill vector&quot;</span> &lt;&lt; std::endl ;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    };</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    return ;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;};</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00659"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga53dbad0c1aebce710eb726fdd17b10bd">  659</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">absorbASCII</a>( std::fstream &amp;str, std::array&lt;data_T,d&gt; &amp;data ){</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    std::vector&lt;data_T&gt;             temp;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">typename</span> std::array&lt;data_T,d&gt;::iterator  itrData, begData, endData;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    <span class="keyword">typename</span> std::vector&lt;data_T&gt;::iterator   itrTemp, begTemp, endTemp;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    begData = data.begin() ;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    endData = data.end() ;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    itrData = begData ;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordflow">while</span>( str.good() &amp;&amp; itrData!=endData ) {</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        temp.clear() ;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( str, temp) ;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        begTemp = temp.begin() ;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        endTemp = temp.end() ;</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordflow">for</span>( itrTemp=begTemp; (itrTemp!=endTemp &amp;&amp; itrData!=endData); ){</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            *itrData = *itrTemp ;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            ++itrTemp;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;            ++itrData;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        };</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    };</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    <span class="keywordflow">if</span>( itrData != endData ) {</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Not enough elements found to fill array&quot;</span> &lt;&lt; std::endl ;</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    };</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    return ;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;};</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00710"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga843f0c55b0f6c024747743eb83f74e8d">  710</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">absorbASCII</a>( std::fstream &amp;str, data_T *data, <span class="keywordtype">int</span> nr ){</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    std::vector&lt;data_T&gt;                      temp;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    data_T*                                  itrData, begData, endData;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">typename</span> std::vector&lt;data_T&gt;::iterator   itrTemp, begTemp, endTemp;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    begData = &amp;data[0] ;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    endData = &amp;data[nr-1] ;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    itrData = begData ;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    <span class="keywordflow">while</span>( str.good() &amp;&amp; itrData!=endData ) {</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        temp.clear() ;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">lineStream</a>( str, temp) ;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        begTemp = temp.begin() ;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;        endTemp = temp.end() ;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        <span class="keywordflow">for</span>( itrTemp=begTemp; (itrTemp!=endTemp &amp;&amp; itrData!=endData); ){</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;            *itrData = *itrTemp ;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            ++itrTemp;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;            ++itrData;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        };</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    };</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    <span class="keywordflow">if</span>( itrData != endData ) {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;Not enough elements found to fill array&quot;</span> &lt;&lt; std::endl ;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    };</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    return ;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;};</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00757"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gac27b382caacb090e788c11b47d7dae1d">  757</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">absorbASCII</a>( std::fstream &amp;str, <a class="code" href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector&lt;data_T&gt;</a> &amp;data ){</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keywordtype">bool</span>    read(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    std::string line;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedVector&lt;data_T&gt;::iterator</a>  dataItr = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(), dataEnd = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>() ;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">while</span>( str.good() &amp;&amp; read ) {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    </div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        getline( str, line );</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a>( line );</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    </div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        std::stringstream ss( line );</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    </div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;        <span class="keywordflow">while</span>( ss.good() &amp;&amp; read ){</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            ss &gt;&gt; *dataItr ;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            ++dataItr;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;            read = dataItr != dataEnd ;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        };</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    }</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;   </div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    return ;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;};</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00791"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga06495d8ee2b5742fdc1145ea486fcbda">  791</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">absorbASCII</a>( std::fstream &amp;str, <a class="code" href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector&lt;data_T&gt;</a> &amp;data, <span class="keywordtype">long</span> N ){</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keywordtype">bool</span>    read(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="keywordtype">long</span>    n(0), index;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    data_T  value;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    std::string line;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="keywordflow">while</span>( str.good() &amp;&amp; read ) {</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    </div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        getline( str, line );</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a>( line );</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    </div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        std::stringstream ss( line );</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    </div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        <span class="keywordflow">while</span>( ss.good() &amp;&amp; read ){</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            ss &gt;&gt; index ;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            ss &gt;&gt; value ;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>(index,value);</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            ++n;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            read = n&lt;N ;</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        };</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    }</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    return ;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;};</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00825"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">  825</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, data_T &amp;data ){</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;    <span class="keywordtype">int</span> nbytes ;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) ;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    str.read( reinterpret_cast&lt;char*&gt;(&amp;data), nbytes ) ;</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    return ;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;};</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00842"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga2330cc018f1c9f6178cd92aeb8055302">  842</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, std::vector&lt;data_T&gt; &amp;data ){</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    <span class="keywordtype">int</span> nbytes, nr;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    nr = data.size() ;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *nr ;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    str.read( reinterpret_cast&lt;char*&gt;(&amp;data[0]), nbytes ) ;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    return ;</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;};</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00860"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga07adae750d5b020da8438ae8219a287c">  860</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, std::vector&lt; std::vector&lt;data_T&gt; &gt; &amp;data ){</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;item: data ){</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( str, item ) ;</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    };</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    return ;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;};</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00877"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#gae1afb00d7e29d3d1101f09c4b73073b0">  877</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, std::vector&lt; std::array&lt;data_T,d&gt; &gt; &amp;data ){</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordtype">int</span>  nbytes, nr;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    nr = data.size() ;</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *nr *d ;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    str.read( reinterpret_cast&lt;char*&gt;(&amp;data[0]), nbytes ) ;</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    return ;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;};</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T, <span class="keywordtype">size_t</span> d &gt;</div>
<div class="line"><a name="l00896"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga81f0379dd2558ded1346808231064bfe">  896</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, std::array&lt;data_T,d&gt; &amp;data ){</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keywordtype">int</span> nbytes;</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *d ;</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    str.read( reinterpret_cast&lt;char*&gt;(&amp;data[0]), nbytes ) ;</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    return ;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;};</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00914"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga20c4d1adfe234113aa431beaa0afb128">  914</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, data_T *data, <span class="keywordtype">int</span> nr ){</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;    <span class="keywordtype">int</span> nbytes;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    nbytes = <span class="keyword">sizeof</span>(data_T) *nr ;</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    str.read( reinterpret_cast&lt;char*&gt;(data), nbytes ) ;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    return ;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;};</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00933"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga261b65d8f965a856f50b5c9d4556bfb3">  933</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;data_T&gt;</a> &amp;data ){</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator&lt;data_T&gt;</a> dataItr, dataEnd = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>() ;</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;    <span class="keywordflow">for</span>( dataItr = data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(); dataItr != dataEnd; ++dataItr){</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>(str,*dataItr) ;</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    }</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    return ;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;};</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="keyword">template</span>&lt; <span class="keyword">class</span> data_T &gt;</div>
<div class="line"><a name="l00954"></a><span class="lineno"><a class="line" href="group__GenericIO.xhtml#ga8f152691dfc1fc2cca851d406870c1a5">  954</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>( std::fstream &amp;str, <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;data_T&gt;</a> &amp;data, <span class="keywordtype">long</span> N ){</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    <span class="keywordtype">long</span> n, index ;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    data_T value ;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">reserve</a>(N) ;</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keywordflow">for</span>( n=0; n&lt;N; ++n){</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>(str,index) ;</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">absorbBINARY</a>(str,value) ;</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        data.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>(index,value) ;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    }</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    return ;</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;};</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;}</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator</a></div><div class="ttdoc">Iterator for the class PiercedVector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00057">piercedVector.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gaaf2ab7d9c6ec4e69368ed225eaffcd73"><div class="ttname"><a href="group__GenericIO.xhtml#gaaf2ab7d9c6ec4e69368ed225eaffcd73">bitpit::genericIO::absorbASCII</a></div><div class="ttdeci">void absorbASCII(std::fstream &amp;str, data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00592">GenericIO.tpp:592</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga8c0a3a248295d848ab26d96ef239bf3c"><div class="ttname"><a href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a></div><div class="ttdeci">std::string &amp; trim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00122">utilsString.tpp:122</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a287482efeac9d9d0c9086c1746f5ec09"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">bitpit::PiercedVector::insert</a></div><div class="ttdeci">iterator insert(const id_t &amp;id, const value_t &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00362">piercedVector.tpp:362</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a47b85ed80bec772e039f90657789ac03"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03">bitpit::PiercedVector::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01043">piercedVector.tpp:1043</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gafd5fdc9c55c9dd00f4d957ac693eea98"><div class="ttname"><a href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a></div><div class="ttdeci">void flushBINARY(std::fstream &amp;str, const data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00275">GenericIO.tpp:275</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gaa07df0f5bb3a3b7101a30b94bfee1460"><div class="ttname"><a href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a></div><div class="ttdeci">void absorbBINARY(std::fstream &amp;str, data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00825">GenericIO.tpp:825</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4c84c99d0e0f36d2023b291b57d5b58a"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">bitpit::PiercedVector::begin</a></div><div class="ttdeci">iterator begin() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01473">piercedVector.tpp:1473</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_ga72023513e41ab6a1b200f2d4eff6a46a"><div class="ttname"><a href="group__GenericIO.xhtml#ga72023513e41ab6a1b200f2d4eff6a46a">bitpit::genericIO::flushASCII</a></div><div class="ttdeci">void flushASCII(std::fstream &amp;str, const uint8_t &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8cpp_source.xhtml#l00043">GenericIO.cpp:43</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a18841f81fbb288de48b90666f40d9942"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">bitpit::PiercedIterator::getId</a></div><div class="ttdeci">id_t getId(const id_t &amp;fallback=-1) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00060">piercedVector.tpp:60</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gab3225c73f216b188636e95cebf939a95"><div class="ttname"><a href="group__GenericIO.xhtml#gab3225c73f216b188636e95cebf939a95">bitpit::genericIO::lineStream</a></div><div class="ttdeci">void lineStream(std::fstream &amp;str, data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00415">GenericIO.tpp:415</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a8bd0cf39ad223e8e99f738e67c979d58"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">bitpit::PiercedVector::end</a></div><div class="ttdeci">iterator end() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01486">piercedVector.tpp:1486</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ada8a762dd07bcbad92e9192bf72892a8"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">bitpit::PiercedVector::reserve</a></div><div class="ttdeci">void reserve(std::size_t n)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00723">piercedVector.tpp:723</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga88740c05f6c499a2784fcc1a221c1c9f"><div class="ttname"><a href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a></div><div class="ttdeci">std::array&lt; T, d &gt; min(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00067">MathOperators_array.tpp:67</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

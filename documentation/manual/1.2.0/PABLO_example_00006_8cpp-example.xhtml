
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - PABLO_example_00006.cpp</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">PABLO_example_00006.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<p>Parallel 2D smoothing data using PABLO.</p>
<p>The example is the parallel version of PABLO_example_00003.</p>
<p>In order to perform the smoothing procedure in parallel, ghost elements and data communications towards them are needed. Now ghost quadrants and ghost data are not only instantiated, as in example 00003, but actually used to perform smoothing across processor borders.</p>
<p>The user data communication interfaces are based on the Couriously Recurrent Template Pattern. The user has to implement a specification of the interface by writing a derived class. In the files <a class="el" href="PABLO__userDataComm_8hpp_source.xhtml">PABLO_userDataComm.hpp</a> and <a class="el" href="PABLO__userDataComm_8tpp_source.xhtml">PABLO_userDataComm.tpp</a> an example of this specification is given in the case of user data stored in a POD container similar to the STL vector.</p>
<p>The class in <a class="el" href="PABLO__userDataComm_8hpp_source.xhtml">PABLO_userDataComm.hpp</a> is an example of user specification of the data communication interface based on the Curiously Recurrent Template Pattern. The user has to implement his interface class(es) in order to define how his data have to be written and read in the communication buffer. These classes have to be derived from the template base class <a class="el" href="classbitpit_1_1DataCommInterface.xhtml" title="Base class for data communications. ">bitpit::DataCommInterface</a> using as template argument value the derived class. Like this, </p>
<div class="fragment"><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> D&gt;</div>
<div class="line"><span class="keyword">class </span>UserDataComm : <span class="keyword">public</span> <a name="_a0"></a><a class="code" href="classbitpit_1_1DataCommInterface.xhtml">bitpit::DataCommInterface</a>&lt; UserDataComm&lt;D&gt; &gt; {</div>
</div><!-- fragment --><p>The choice of the members of the class is completely up to the user and they have to be useful to access both internal and ghost data container. In the example user data datatype is given as template parameter in order to pass any container similar to the STL vector.</p>
<p>In any case, the user must at least implement all the methods reported in this example:</p>
<ul>
<li><b><code>size_t fixedsize()</code> method:</b> this method is automatically called by the manager and it is intended to define the constant size of the data to be communicated per grid element. If all the element of the grid communicate the same size of data, this method must return a value different from zero and equal to the number of byte to be communicated for every element. Otherwise, it must return zero and the different data size for each element must be specified by the size method <div class="fragment"><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Data&gt;</div>
<div class="line"><span class="keyword">inline</span> <span class="keywordtype">size_t</span> UserDataComm&lt;Data&gt;::fixedSize()<span class="keyword"> const </span>{</div>
<div class="line"><span class="keywordflow">return</span> 0;</div>
<div class="line">};</div>
</div><!-- fragment --> <dl class="section return"><dt>Returns</dt><dd>the size in bytes of the data tobe communicated for every element</dd></dl>
</li>
<li><b><code>size_t size(const uint32_t e)</code> method:</b> this method is automatically called by the manager and it is intended to define the variable size of the data to be communicated of every grid element. In order to make the manager use this method, the fixedsize method has to return zero. Implementing this method, the user can pass the manager the specific data size to be communicated for the element e. <div class="fragment"><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Data&gt;</div>
<div class="line"><span class="keyword">inline</span> <span class="keywordtype">size_t</span> UserDataComm&lt;Data&gt;::size(<span class="keyword">const</span> uint32_t e)<span class="keyword"> const </span>{</div>
<div class="line">  <span class="keywordflow">return</span> <span class="keyword">sizeof</span>(double);</div>
<div class="line">};</div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>of the internal element to be communicated. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the size in bytes of the data tobe communicated for the element e</dd></dl>
</li>
<li><b><code>void gather(Buffer&amp; buff, const uint32_t e)</code> method: </b> this method is automatically called by the manager and it is intended to write user data to the char communication buffer. The user has to specify in its implementation the way data can be written in the char buffer. The manager provide the user with a buffer and its write method in order to simply write POD data in the buffer. The user has to define the way his data can be written in the buffer by decomposing them in POD data and by using the buffer write method to store them in the buffer. In this example we suppose that data is a container of POD data having the random access operator. <div class="fragment"><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Data&gt;</div>
<div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Buffer&gt;</div>
<div class="line"><span class="keyword">inline</span> <span class="keywordtype">void</span> UserDataComm&lt;Data&gt;::gather(Buffer&amp; buff, <span class="keyword">const</span> uint32_t e) {</div>
<div class="line">  buff.write(data[e]);</div>
<div class="line">};</div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>index of the internal element to be communicated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buff</td><td>is the char buffer used to communicate user data. The user has not to take care of the buffer, but its method write and read. These methods are intended to write/read POD data to/fromthe buffer.</td></tr>
  </table>
  </dd>
</dl>
</li>
<li><b><code>void scatter(Buffer&amp; buff, const uint32_t e)</code> method: </b> this method is automatically called by the manager and it is intended to read user data from the char communication buffer and store them in the ghost data container. The user has to specify in its implementation the way data can be read from the char buffer. The manager provide the user with a buffer and its read method in order to simply read POD data from the buffer. The user has to define the way his data can be read from the buffer by decomposing them in POD data and by using the buffer read method to take them from the buffer and to store them in the ghost data container. In this example we suppose that ghostData is a container of POD data having the random access operator. <div class="fragment"><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Data&gt;</div>
<div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> Buffer&gt;</div>
<div class="line"><span class="keyword">inline</span> <span class="keywordtype">void</span> UserDataComm&lt;Data&gt;::scatter(Buffer&amp; buff,   <span class="keyword">const</span> uint32_t e) {</div>
<div class="line">  buff.read(ghostData[e]);</div>
<div class="line">};</div>
</div><!-- fragment --> <dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">e</td><td>index of the ghost element to be communicated. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">buff</td><td>is the char buffer used to communicate user data. The user has not to take care of the buffer, but its method write and read. These methods are intended to write/read POD data to/fromthe buffer.</td></tr>
  </table>
  </dd>
</dl>
</li>
<li><b><code>UserDataComm(Data&amp; data_, Data&amp; ghostdata_)</code> the constructor method: </b> this method has to be called by the user in his application code. The user is free to implement his constructors as he wants, but he must guarantee the access to the internal and ghost data. <div class="fragment"><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> D&gt;</div>
<div class="line"><span class="keyword">inline</span> UserDataComm&lt;D&gt;::UserDataComm(Data&amp; data_, Data&amp; ghostdata_) : data(data_), ghostdata(ghostdata_){}</div>
</div><!-- fragment --></li>
</ul>
<p>In the code of this example application, pay attention to the use of the interface </p>
<div class="fragment"><div class="line">UserDataLB&lt;vector&lt;double&gt; &gt; data_lb(weight,weightGhost);</div>
<div class="line">pablo7.loadBalance(data_lb, &amp;weight);</div>
</div><!-- fragment --><p><b>To run</b>: ./PABLO_example_00006 <br/>
 <b>To see the result visit</b>: <a href="http://optimad.github.io/PABLO/">PABLO website</a> <br/>
 </p>
<div class="fragment"><div class="line"><span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> *  bitpit</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><span class="comment"> *  License</span></div>
<div class="line"><span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><span class="comment"> *  License for more details.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#include &quot;bitpit_PABLO.hpp&quot;</span></div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><span class="preprocessor"></span><span class="preprocessor">#include &quot;PABLO_userDataComm.hpp&quot;</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span></div>
<div class="line"><span class="keyword">using namespace </span>std;</div>
<div class="line"><span class="keyword">using namespace </span>bitpit;</div>
<div class="line"></div>
<div class="line"><span class="comment">// =================================================================================== //</span></div>
<div class="line"><span class="comment"></span><span class="comment">// =================================================================================== //</span></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[]) {</div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><span class="preprocessor"></span>    MPI_Init(&amp;argc, &amp;argv);</div>
<div class="line"></div>
<div class="line">    {</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span>        <span class="keywordtype">int</span> iter = 0;</div>
<div class="line">        <span class="keywordtype">int</span> dim = 2;</div>
<div class="line"></div>
<div class="line">        <span class="keywordtype">int</span> nproc;</div>
<div class="line">        <span class="keywordtype">int</span> rank;</div>
<div class="line"><span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><span class="preprocessor"></span>        MPI_Comm comm = MPI_COMM_WORLD;</div>
<div class="line">        MPI_Comm_size(comm,&amp;nproc);</div>
<div class="line">        MPI_Comm_rank(comm,&amp;rank);</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor"></span>        nproc = 1;</div>
<div class="line">        rank = 0;</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span>        log::manager().initialize(log::SEPARATE, <span class="keyword">false</span>, nproc, rank);</div>
<div class="line">        log::cout() &lt;&lt; <a class="code" href="namespacebitpit_1_1log.xhtml#acd50005e81bd303fa96065d563592348">fileVerbosity</a>(log::NORMAL);</div>
<div class="line">        log::cout() &lt;&lt; <a class="code" href="namespacebitpit_1_1log.xhtml#ad6f89bcb2adf0f51cb232969b714e83b">consoleVerbosity</a>(log::QUIET);</div>
<div class="line"></div>
<div class="line">        <a name="_a1"></a><a class="code" href="classbitpit_1_1PabloUniform.xhtml">PabloUniform</a> pablo6;</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">for</span> (iter=1; iter&lt;5; iter++){</div>
<div class="line">            pablo6.<a name="a2"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#a5eacb88f2324b915ba8dbac95c994755">adaptGlobalRefine</a>();</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><span class="preprocessor"></span></div>
<div class="line">        pablo6.<a name="a3"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#ab6a1a1ee440397820bd1d0f81d02bf18">loadBalance</a>();</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span></div>
<div class="line">        <span class="keywordtype">double</span> xc, yc;</div>
<div class="line">        xc = yc = 0.5;</div>
<div class="line">        <span class="keywordtype">double</span> radius = 0.25;</div>
<div class="line"></div>
<div class="line">        uint32_t nocts = pablo6.<a name="a4"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#aedea46c7857bffcebb567995285d40db">getNumOctants</a>();</div>
<div class="line">        uint32_t nghosts = pablo6.<a name="a5"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#a79732d79d809a863e4f8b918154da561">getNumGhosts</a>();</div>
<div class="line">        vector&lt;double&gt; oct_data(nocts, 0.0), ghost_data(nghosts, 0.0);</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;nocts; i++){</div>
<div class="line">            vector&lt;array&lt;double,3&gt; &gt; nodes = pablo6.<a name="a6"></a><a class="code" href="classbitpit_1_1PabloUniform.xhtml#a42de7a4c2923568a21d3e951a85bf1c3">getNodes</a>(i);</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;4; j++){</div>
<div class="line">                <span class="keywordtype">double</span> x = nodes[j][0];</div>
<div class="line">                <span class="keywordtype">double</span> y = nodes[j][1];</div>
<div class="line">                <span class="keywordflow">if</span> ((<a name="a7"></a><a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>((x-xc),2.0)+<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>((y-yc),2.0) &lt;= <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(radius,2.0))){</div>
<div class="line">                    oct_data[i] = 1.0;</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;nghosts; i++){</div>
<div class="line">            <a name="_a8"></a><a class="code" href="classbitpit_1_1Octant.xhtml">Octant</a> *oct = pablo6.<a name="a9"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#afb007fe22f8e4450f81e57508ddea43b">getGhostOctant</a>(i);</div>
<div class="line">            vector&lt;array&lt;double,3&gt; &gt; nodes = pablo6.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a42de7a4c2923568a21d3e951a85bf1c3">getNodes</a>(oct);</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt;4; j++){</div>
<div class="line">                <span class="keywordtype">double</span> x = nodes[j][0];</div>
<div class="line">                <span class="keywordtype">double</span> y = nodes[j][1];</div>
<div class="line">                <span class="keywordflow">if</span> ((<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>((x-xc),2.0)+<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>((y-yc),2.0) &lt;= <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(radius,2.0))){</div>
<div class="line">                    ghost_data[i] = 1.0;</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line"></div>
<div class="line">        iter = 0;</div>
<div class="line">        pablo6.<a name="a10"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#ab4aa4521f6f8b2c046ad2bcb57bf568d">updateConnectivity</a>();</div>
<div class="line">        pablo6.<a name="a11"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#a098f36e490f514449565458be20d3f4e">writeTest</a>(<span class="stringliteral">&quot;pablo00006_iter&quot;</span>+to_string(static_cast&lt;unsigned long long&gt;(iter)), oct_data);</div>
<div class="line"></div>
<div class="line">        <span class="keywordtype">int</span> start = iter + 1;</div>
<div class="line">        <span class="keywordflow">for</span> (iter=start; iter&lt;start+25; iter++){</div>
<div class="line">            vector&lt;double&gt; oct_data_smooth(nocts, 0.0);</div>
<div class="line">            vector&lt;uint32_t&gt; neigh, neigh_t;</div>
<div class="line">            vector&lt;bool&gt; isghost, isghost_t;</div>
<div class="line">            uint8_t iface, nfaces, codim;</div>
<div class="line">            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0; i&lt;nocts; i++){</div>
<div class="line">                neigh.clear();</div>
<div class="line">                isghost.clear();</div>
<div class="line"></div>
<div class="line">                <span class="keywordflow">for</span> (codim=1; codim&lt;dim+1; codim++){</div>
<div class="line">                    <span class="keywordflow">if</span> (codim == 1){</div>
<div class="line">                        nfaces = 4;</div>
<div class="line">                    }</div>
<div class="line">                    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (codim == 2){</div>
<div class="line">                        nfaces = 4;</div>
<div class="line">                    }</div>
<div class="line">                    <span class="keywordflow">for</span> (iface=0; iface&lt;nfaces; iface++){</div>
<div class="line">                        pablo6.<a name="a12"></a>findNeighbours(i,iface,codim,neigh_t,isghost_t);</div>
<div class="line">                        neigh.insert(neigh.end(), neigh_t.begin(), neigh_t.end());</div>
<div class="line">                        isghost.insert(isghost.end(), isghost_t.begin(), isghost_t.end());</div>
<div class="line">                    }</div>
<div class="line">                }</div>
<div class="line"></div>
<div class="line">                oct_data_smooth[i] = oct_data[i]/(neigh.size()+1);</div>
<div class="line">                <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j=0; j&lt;neigh.size(); j++){</div>
<div class="line">                    <span class="keywordflow">if</span> (isghost[j]){</div>
<div class="line">                        oct_data_smooth[i] += ghost_data[neigh[j]]/(neigh.size()+1);</div>
<div class="line">                    }</div>
<div class="line">                    <span class="keywordflow">else</span>{</div>
<div class="line">                        oct_data_smooth[i] += oct_data[neigh[j]]/(neigh.size()+1);</div>
<div class="line">                    }</div>
<div class="line">                }</div>
<div class="line">            }</div>
<div class="line"></div>
<div class="line">            pablo6.<a class="code" href="classbitpit_1_1ParaTree.xhtml#ab4aa4521f6f8b2c046ad2bcb57bf568d">updateConnectivity</a>();</div>
<div class="line">            pablo6.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a098f36e490f514449565458be20d3f4e">writeTest</a>(<span class="stringliteral">&quot;pablo00006_iter&quot;</span>+to_string(static_cast&lt;unsigned long long&gt;(iter)), oct_data_smooth);</div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><span class="preprocessor"></span></div>
<div class="line">            UserDataComm&lt;vector&lt;double&gt; &gt; data_comm(oct_data_smooth, ghost_data);</div>
<div class="line">            pablo6.<a name="a13"></a><a class="code" href="classbitpit_1_1ParaTree.xhtml#ababbebf9bc8f6f7e55061079b8138aa6">communicate</a>(data_comm);</div>
<div class="line"></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span>            oct_data = oct_data_smooth;</div>
<div class="line"></div>
<div class="line">        }</div>
<div class="line"><span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><span class="preprocessor"></span>    }</div>
<div class="line"></div>
<div class="line">    MPI_Finalize();</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span>}</div>
<div class="line"></div>
<div class="line"></div>
</div><!-- fragment --> </div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

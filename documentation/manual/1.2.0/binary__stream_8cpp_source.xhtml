
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/containers/binary_stream.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0b61c55142250c0cc363383afd8075a4.xhtml">containers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">binary_stream.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// INCLUDES                                                                   //</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;binary_stream.hpp&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// NAMESPACES                                                                 //</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// IMPLEMENTATIONS OF METHODS FOR CLASS IBinaryStream                         //</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">// Constructor(s) =========================================================== //</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">   58</a></span>&#160;<span class="comment"></span>IBinaryStream::IBinaryStream(</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;) {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span>IBinaryStream::IBinaryStream(</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">size_t</span>                      capacity</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;) {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    buffer.clear();</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    buffer.reserve(capacity);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    setCapacity(capacity);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span>IBinaryStream::IBinaryStream(</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>                  *buf_,</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">size_t</span>                       capacity</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    buffer.clear();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    buffer.reserve(capacity);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    buffer.assign(buf_, buf_ + capacity);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"></span>IBinaryStream::IBinaryStream(</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> std::vector&lt;char&gt;          &amp;vec</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;) {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    buffer.clear();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    buffer.reserve(vec.size());</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    buffer.assign(vec.begin(), vec.end());</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">// Destructor(s) ============================================================ //</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">// default</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">// Assignament operator(s) ================================================== //</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">// disabled</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">// Public methods =========================================================== //</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a33c40b8f511e7fb6931cc2ffd7c854dd">  131</a></span>&#160;<span class="comment"></span><span class="keywordtype">void</span> IBinaryStream::setCapacity(</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordtype">size_t</span>                       capacity</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    buffer.resize(capacity);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span><span class="keywordtype">size_t</span> IBinaryStream::capacity(</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> buffer.size();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a8c3de83cf420963d11f8cfee96f12505">  159</a></span>&#160;<span class="comment"></span><span class="keywordtype">void</span> IBinaryStream::open(</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>                  *mem,</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">size_t</span>                       capacity</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;) {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    buffer.clear();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    buffer.reserve(capacity);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    buffer.assign(mem, mem + capacity);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a8e98ce173d75b289c965c769ae339338">  176</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> IBinaryStream::eof(</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> current_pos &gt;= buffer.size();</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#af28dbe6802e8a0cf890fdf11508e6ed3">  190</a></span>&#160;<span class="comment"></span>ifstream::pos_type IBinaryStream::tellg(</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> current_pos;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a474de5cb946d0e063b6653bf5d3bcbf6">  205</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> IBinaryStream::seekg (</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">size_t</span>                       pos</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;) {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">if</span>(pos&lt;buffer.size())</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        current_pos = pos;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a5dab985e2f06438f272df5577852c2ff">  226</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> IBinaryStream::seekg (</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    std::streamoff               offset,</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    std::ios_base::seekdir       way</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordflow">if</span> ( ( way == ios_base::beg ) &amp;&amp; ( offset &lt; (<span class="keywordtype">long</span>) buffer.size() ) )</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        current_pos = offset;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( ( way == ios_base::cur ) &amp;&amp; ( current_pos + offset &lt; buffer.size() ) )</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        current_pos += offset;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( ( way == ios_base::end ) &amp;&amp; ( (long) buffer.size() - offset &gt;= 0 ) )</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        current_pos = buffer.size() - offset;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">// Private method(s) ======================================================== //</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> IBinaryStream::read(</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordtype">char</span>                        *p,</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">size_t</span>                       size</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;) {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">if</span> ( eof() || (current_pos + size) &gt; buffer.size() ) {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Bad memory access!&quot;</span>);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    std::memcpy(reinterpret_cast&lt;void*&gt;( p ), &amp;buffer[current_pos], size);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    current_pos += size;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;}</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> IBinaryStream::read(</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    std::vector&lt;char&gt;           &amp;vec</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">if</span> ( eof() || ( current_pos + vec.size() ) &gt; buffer.size() ) {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Bad memory access!&quot;</span>);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    std::memcpy(reinterpret_cast&lt;void*&gt;(&amp;vec[0]), &amp;buffer[current_pos], vec.size());</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    current_pos += vec.size();</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment">// IMPLEMENTATIONS OF METHODS FOR CLASS OBinaryStream                           //</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">// Constructor(s) =========================================================== //</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"></span>OBinaryStream::OBinaryStream(</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;) {</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment"></span>OBinaryStream::OBinaryStream(</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordtype">size_t</span>                       capacity</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;) {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    current_pos = 0;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    open(capacity);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">// Destructor(s) ============================================================ //</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">// default</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">// Assignament operator(s) ================================================== //</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">// disabled</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">// Public method(s) ========================================================= //</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00342"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a5bdad31496a355a04cd6c5c4dc5a9f1f">  342</a></span>&#160;<span class="comment"></span><span class="keywordtype">void</span> OBinaryStream::setCapacity(</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordtype">size_t</span>                       capacity</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;) {</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    buffer.resize(capacity);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"></span><span class="keywordtype">size_t</span> OBinaryStream::capacity(</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> buffer.size();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a5923afe13ec16163dd3675ceacfc38ed">  368</a></span>&#160;<span class="comment"></span><span class="keywordtype">void</span> OBinaryStream::open(</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordtype">size_t</span>                       capacity</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;) {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    buffer.reserve(capacity);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    buffer.resize(capacity);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a097285b542a0c2f9550750a37a894def">  382</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> OBinaryStream::eof(</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;)<span class="keyword"> const</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keywordflow">return</span> current_pos &gt;= buffer.size();</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;}</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a690d7faaba893077304bbb745c6ed971">  396</a></span>&#160;<span class="comment"></span>ifstream::pos_type OBinaryStream::tellg(</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> current_pos;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;}</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a16a09a8581a76cff7fc8a373c4a03084">  411</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> OBinaryStream::seekg (</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordtype">size_t</span>                       pos</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;) {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keywordflow">if</span>(pos &lt; buffer.size())</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        current_pos = pos;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a6e00b0df1cefac1f83d18e37177ee9ad">  432</a></span>&#160;<span class="comment"></span><span class="keywordtype">bool</span> OBinaryStream::seekg (</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    std::streamoff               offset,</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    std::ios_base::seekdir       way</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;) {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">if</span> ( ( way == ios_base::beg ) &amp;&amp; ( offset &lt; (<span class="keywordtype">long</span>) buffer.size() ) )</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        current_pos = offset;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( ( way == ios_base::cur ) &amp;&amp; ( current_pos + offset &lt; buffer.size() ) )</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        current_pos += offset;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( ( way == ios_base::end ) &amp;&amp; ( (long) buffer.size() - offset &gt;= 0 ) )</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        current_pos = buffer.size() - offset;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;}</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00454"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#af8e4c415a404956e3042b3429546f485">  454</a></span>&#160;<span class="comment"></span><span class="keywordtype">void</span> OBinaryStream::squeeze (</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordtype">void</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;) {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    setCapacity(current_pos);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;}</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> OBinaryStream::write(</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>                  *p,</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordtype">size_t</span>                       size</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;) {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">if</span> ( buffer.size() - current_pos &lt; size ) {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        buffer.resize( size + current_pos );</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; size; ++i) {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        buffer[current_pos] = p[i];</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        ++current_pos;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    } <span class="comment">// next i</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> OBinaryStream::write(</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keyword">const</span> vector&lt;char&gt;          &amp;vec</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;) {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">if</span> ( buffer.size() - current_pos &lt; vec.size() ) {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        buffer.resize( vec.size() + current_pos );</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i = 0; i &lt; vec.size(); ++i) {</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        buffer[current_pos] = vec[i];</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        ++current_pos;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    } <span class="comment">//next i</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;}</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;}</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">// OPERATORS</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment"></span><span class="keyword">template</span>&lt;&gt;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a>(</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>             &amp;istm,</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        std::string                  &amp;val)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;{</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keywordtype">int</span>                 size = 0;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    istm.read(size);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">if</span>(size&lt;=0)         <span class="keywordflow">return</span> istm;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    std::vector&lt;char&gt; vec((<span class="keywordtype">size_t</span>)size);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    istm.read(vec);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    val.assign(&amp;vec[0], (<span class="keywordtype">size_t</span>)size);</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    <span class="keywordflow">return</span> istm;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;}</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="comment"></span><span class="keyword">template</span>&lt;&gt;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator &lt;&lt; </a>(</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>                 &amp; ostm,</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">const</span> std::string                &amp; val</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;) {</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keywordtype">int</span> size = val.size();</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    ostm.write(size);</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="keywordflow">if</span>(val.size()&lt;=0)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">return</span> ostm;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    ostm.write(val.c_str(), val.size());</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordflow">return</span> ostm;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="comment">// -------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment"></span><a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a>(</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>                 &amp;ostm,</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>                  *val</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;) {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keywordtype">int</span> size = strlen(val);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    ostm.write(size);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordflow">if</span>(size&lt;=0)</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordflow">return</span> ostm;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    ostm.write(val, size);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="keywordflow">return</span> ostm;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;}</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div>
<div class="ttc" id="group__Operators_xhtml_gae6ad1dc96cc1000aded39aecb5d66493"><div class="ttname"><a href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;out, const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01320">Operators_array.tpp:1320</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a></div><div class="ttdoc">creates output binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00169">binary_stream.hpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a></div><div class="ttdoc">creates input binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00087">binary_stream.hpp:87</a></div></div>
<div class="ttc" id="group__Operators_xhtml_ga91ecc3462d869a3132ba96d017ae549b"><div class="ttname"><a href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator&gt;&gt;(std::istream &amp;in, std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01398">Operators_array.tpp:1398</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/containers/binary_stream.hpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0b61c55142250c0cc363383afd8075a4.xhtml">containers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">binary_stream.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef __BITPIT_BINARY_STREAM_HPP__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __BITPIT_BINARY_STREAM_HPP__</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// INCLUDES                                                                   //</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// Standard Template Library</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;stdexcept&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// Bitpit</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">// Others</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">// TYPES DEFINITIONS                                                          //</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">// Forward declarations ------------------------------------------------- //</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">class </span>IBinaryStream;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">class </span>OBinaryStream;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">// Function prototypes -------------------------------------------------- //</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a>(                                                  <span class="comment">// Stream operator for class IBinaryStream</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>                     &amp;istm,                                <span class="comment">// (input) input stream</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    T                               &amp;val                                  <span class="comment">// (input) value to be streamed</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">template</span>&lt;&gt;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a>(                                                  <span class="comment">// Explicit specialization of input stream operator for std::string</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>                     &amp;istm,                                <span class="comment">// (input) input stream</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    std::string                     &amp;val                                  <span class="comment">// (input) string to be streamed</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a>(                                                  <span class="comment">// Stream operator for class OBinaryStream</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>                     &amp;ostm,                                <span class="comment">// (input) output stream</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">const</span> T                         &amp;val                                  <span class="comment">// (input) value to be streamed</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="keyword">template</span>&lt;&gt;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a>(                                                  <span class="comment">// Explicit specialization of input stream operator for std::string</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>                     &amp;ostm,                                <span class="comment">// (input) output stream</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> std::string               &amp;val                                  <span class="comment">// (input) string to be streamed</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a>(                                                  <span class="comment">// Stream operator for class OBinaryStream</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>                     &amp;ostm,                                <span class="comment">// (input) output stream</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>                      *val                                  <span class="comment">// (input) char array to be streamed</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">// Class IBinaryStream ---------------------------------------------------- //</span></div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml">   87</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1IBinaryStream.xhtml">IBinaryStream</a> {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Member(s) ======================================================== //</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    std::vector&lt;char&gt;               buffer;                               <span class="comment">// stream buffer</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">size_t</span>                          current_pos;                          <span class="comment">// Cursor position</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Constructor(s) =================================================== //</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>(                                                          <span class="comment">// Default constructor (empty stream)</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    );</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>(                                                          <span class="comment">// Custom constructor #1 (empty stream with known capacity);</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordtype">size_t</span>                       <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a6c2137d4bb4b1682b56741d7352a97d2">capacity</a>                               <span class="comment">// (input) buffer capacity</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    );</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>(                                                          <span class="comment">// Custom constructor #2 (stream pointing to memory location)</span></div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classbitpit_1_1IBinaryStream.xhtml#a6c2137d4bb4b1682b56741d7352a97d2">  105</a></span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>*                  buf_,                                <span class="comment">// (input) pointer to memory location</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordtype">size_t</span>                       capacity                             <span class="comment">// (input) buffer capacity</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    );</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>(                                                          <span class="comment">// Custom constructor #3 (stream initialized from std::vector&lt;char&gt;)</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">const</span> std::vector&lt;char&gt;          &amp;vec                                  <span class="comment">// (input) vector used for initialization</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    );</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="comment">// Destructor(s) ==================================================== //</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// default</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// Public method(s) ================================================= //</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a33c40b8f511e7fb6931cc2ffd7c854dd">setCapacity</a>(                                                     <span class="comment">// Set the capacity of the stream</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordtype">size_t</span>                       capacity                             <span class="comment">// (input) new capacity (in bytes) of stream</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    );</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a6c2137d4bb4b1682b56741d7352a97d2">capacity</a>(                                                  <span class="comment">// Capacity of the stream</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordtype">void</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a8c3de83cf420963d11f8cfee96f12505">open</a>(                                                            <span class="comment">// Open input stream from memory location</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>                  *mem,                                 <span class="comment">// (input) pointer to memory location</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordtype">size_t</span>                       capacity                             <span class="comment">// (input) capacity (in bytes) of memory chunk</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    );</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a8e98ce173d75b289c965c769ae339338">eof</a>(                                                             <span class="comment">// Flag for eof</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::ifstream::pos_type <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#af28dbe6802e8a0cf890fdf11508e6ed3">tellg</a>(                                             <span class="comment">// Returns current position of cursor in the buffer</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a474de5cb946d0e063b6653bf5d3bcbf6">seekg</a> (                                                          <span class="comment">// Set cursor position in the current buffer</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordtype">size_t</span>                       pos                                  <span class="comment">// (input) position</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    );</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a474de5cb946d0e063b6653bf5d3bcbf6">seekg</a> (                                                          <span class="comment">// Set cursor position in the current buffer</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        std::streamoff               offset,                              <span class="comment">// (input) offset with respect to the specified direction</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        std::ios_base::seekdir       way                                  <span class="comment">// (input) offset direction</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    );</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> std::vector&lt;char&gt;&amp; data(                                 <span class="comment">// Returns reference to buffer</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    ) { <span class="keywordflow">return</span>(buffer); }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">char</span>* rawData(                                                     <span class="comment">// Returns pointer to buffer</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    ) { <span class="keywordflow">return</span>( buffer.data() ); }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="comment">// Private methods(s) =============================================== //</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordtype">void</span> read(                                                            <span class="comment">// Read data from memory location pointed by t and store into stream buffer</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        T                           &amp;t                                    <span class="comment">// (input) data to be imported in the stream buffer</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    );</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordtype">void</span> read(                                                            <span class="comment">// Explicit template specialization of IBinaryStream::read for vector&lt;char&gt;</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::vector&lt;char&gt;           &amp;vec                                  <span class="comment">// (input) source vector</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    );</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">void</span> read(                                                                <span class="comment">// Read data from memory location pointed by p and store into stream buffer</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordtype">char</span>                        *p,                                   <span class="comment">// (input) pointer to memory location</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordtype">size_t</span>                       size                                 <span class="comment">// (input) size (in bytes) of data to be read</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    );</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Friendships ====================================================== //</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">friend</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>&amp; (::operator &gt;&gt;) (<a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>&amp;, T&amp; );</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">friend</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>&amp; (::operator &gt;&gt; &lt;&gt;) (<a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">IBinaryStream</a>&amp;, std::string&amp; );</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;};</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">// Class OBinaryStream ---------------------------------------------------- //</span></div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml">  169</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1OBinaryStream.xhtml">OBinaryStream</a> {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// Member(s) ======================================================== //</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">size_t</span>                           current_pos;                         <span class="comment">// Cursor current position</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    std::vector&lt;char&gt;                buffer;                              <span class="comment">// Buffer</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// Constructor(s) =================================================== //</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">OBinaryStream</a>(                                                          <span class="comment">// Default constructor (create empty object)</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    );</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">OBinaryStream</a>(                                                          <span class="comment">// Custom constructor #1 (create an empty object with buffer of specified capacity)</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordtype">size_t</span>                       <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a5069ae7246af2361cde3f32f291f1a1b">capacity</a>                               <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classbitpit_1_1OBinaryStream.xhtml#a5069ae7246af2361cde3f32f291f1a1b">  185</a></span>&#160;    );</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// Destructor(s) ==================================================== //</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="comment">// none</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Public method(s) ================================================= //</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a5bdad31496a355a04cd6c5c4dc5a9f1f">setCapacity</a>(                                                     <span class="comment">// Set the capacity of the stream</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordtype">size_t</span>                       capacity                             <span class="comment">// (input) new capacity (in bytes) of stream</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    );</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a5069ae7246af2361cde3f32f291f1a1b">capacity</a>(                                                      <span class="comment">// Capacity of the stream</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordtype">void</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a5923afe13ec16163dd3675ceacfc38ed">open</a>(                                                            <span class="comment">// Open output stream</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordtype">size_t</span>                       capacity                             <span class="comment">// (input) stream capacity</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    );</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a097285b542a0c2f9550750a37a894def">eof</a>(                                                             <span class="comment">// Flag for eof</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::ifstream::pos_type <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a690d7faaba893077304bbb745c6ed971">tellg</a>(                                             <span class="comment">// Returns current position of cursor in the buffer</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    ) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a16a09a8581a76cff7fc8a373c4a03084">seekg</a> (                                                          <span class="comment">// Set cursor position in the current buffer</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordtype">size_t</span>                       pos                                  <span class="comment">// (input) position</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    );</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a16a09a8581a76cff7fc8a373c4a03084">seekg</a> (                                                          <span class="comment">// Set cursor position in the current buffer</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        std::streamoff               offset,                              <span class="comment">// (input) offset with respect to the specified direction</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        std::ios_base::seekdir       way                                  <span class="comment">// (input) offset direction</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    );</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml#af8e4c415a404956e3042b3429546f485">squeeze</a>(                                                         <span class="comment">// Squeeze the stream to fit the data</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    );</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">const</span> std::vector&lt;char&gt;&amp; data(                                        <span class="comment">// Returns reference to buffer</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    ) { <span class="keywordflow">return</span>(buffer); }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">char</span>* rawData(                                                     <span class="comment">// Returns pointer to buffer</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordtype">void</span>                                                              <span class="comment">// (input) none</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    ) { <span class="keywordflow">return</span>( buffer.data() ); }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// Private method(s) ================================================ //</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">void</span> write(                                                           <span class="comment">// Write data to internal buffer</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keyword">const</span> T                     &amp;t                                    <span class="comment">// (input) data to be written in the internal buffer</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    );</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keywordtype">void</span> write(                                                           <span class="comment">// Write char array to internal buffer</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>                  *p,                                   <span class="comment">// (input) pointer to char array</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordtype">size_t</span>                       size                                 <span class="comment">// (input) size of data chunk to be written in the internal buffer</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    );</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordtype">void</span> write(                                                           <span class="comment">// Write vector of char to internal buffer</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keyword">const</span> std::vector&lt;char&gt;     &amp;vec                                  <span class="comment">// (input) vector of char to be written in the internal buffer</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    );</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="comment">// Friendship(s) ==================================================== //</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">friend</span> OBinaryStream&amp; (::operator&lt;&lt;) ( OBinaryStream&amp;, <span class="keyword">const</span> T&amp; );</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">friend</span> OBinaryStream&amp; (::operator&lt;&lt; &lt;&gt;) ( OBinaryStream&amp;, <span class="keyword">const</span> std::string&amp; );</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">friend</span> OBinaryStream&amp; (::operator&lt;&lt;) ( OBinaryStream&amp;, <span class="keyword">const</span> <span class="keywordtype">char</span>* );</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;};</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">// TEMPLATES                                                                  //</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor"># include &quot;binary_stream.tpp&quot;</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a474de5cb946d0e063b6653bf5d3bcbf6"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a474de5cb946d0e063b6653bf5d3bcbf6">bitpit::IBinaryStream::seekg</a></div><div class="ttdeci">bool seekg(size_t pos)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00205">binary_stream.cpp:205</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a8e98ce173d75b289c965c769ae339338"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a8e98ce173d75b289c965c769ae339338">bitpit::IBinaryStream::eof</a></div><div class="ttdeci">bool eof(void) const </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00176">binary_stream.cpp:176</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_af28dbe6802e8a0cf890fdf11508e6ed3"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#af28dbe6802e8a0cf890fdf11508e6ed3">bitpit::IBinaryStream::tellg</a></div><div class="ttdeci">std::ifstream::pos_type tellg(void) const </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00190">binary_stream.cpp:190</a></div></div>
<div class="ttc" id="group__Operators_xhtml_gae6ad1dc96cc1000aded39aecb5d66493"><div class="ttname"><a href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;out, const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01320">Operators_array.tpp:1320</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a5069ae7246af2361cde3f32f291f1a1b"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a5069ae7246af2361cde3f32f291f1a1b">bitpit::OBinaryStream::capacity</a></div><div class="ttdeci">size_t capacity</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00185">binary_stream.hpp:185</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a690d7faaba893077304bbb745c6ed971"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a690d7faaba893077304bbb745c6ed971">bitpit::OBinaryStream::tellg</a></div><div class="ttdeci">std::ifstream::pos_type tellg(void) const </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00396">binary_stream.cpp:396</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a></div><div class="ttdoc">creates output binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00169">binary_stream.hpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a6c2137d4bb4b1682b56741d7352a97d2"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a6c2137d4bb4b1682b56741d7352a97d2">bitpit::IBinaryStream::capacity</a></div><div class="ttdeci">const char size_t capacity</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00105">binary_stream.hpp:105</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a33c40b8f511e7fb6931cc2ffd7c854dd"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a33c40b8f511e7fb6931cc2ffd7c854dd">bitpit::IBinaryStream::setCapacity</a></div><div class="ttdeci">void setCapacity(size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00131">binary_stream.cpp:131</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a8c3de83cf420963d11f8cfee96f12505"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a8c3de83cf420963d11f8cfee96f12505">bitpit::IBinaryStream::open</a></div><div class="ttdeci">void open(const char *mem, size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00159">binary_stream.cpp:159</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a></div><div class="ttdoc">creates input binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00087">binary_stream.hpp:87</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a5bdad31496a355a04cd6c5c4dc5a9f1f"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a5bdad31496a355a04cd6c5c4dc5a9f1f">bitpit::OBinaryStream::setCapacity</a></div><div class="ttdeci">void setCapacity(size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00342">binary_stream.cpp:342</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a5923afe13ec16163dd3675ceacfc38ed"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a5923afe13ec16163dd3675ceacfc38ed">bitpit::OBinaryStream::open</a></div><div class="ttdeci">void open(size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00368">binary_stream.cpp:368</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a16a09a8581a76cff7fc8a373c4a03084"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a16a09a8581a76cff7fc8a373c4a03084">bitpit::OBinaryStream::seekg</a></div><div class="ttdeci">bool seekg(size_t pos)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00411">binary_stream.cpp:411</a></div></div>
<div class="ttc" id="group__Operators_xhtml_ga91ecc3462d869a3132ba96d017ae549b"><div class="ttname"><a href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator&gt;&gt;(std::istream &amp;in, std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01398">Operators_array.tpp:1398</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a097285b542a0c2f9550750a37a894def"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a097285b542a0c2f9550750a37a894def">bitpit::OBinaryStream::eof</a></div><div class="ttdeci">bool eof(void) const </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00382">binary_stream.cpp:382</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a5d17709b7e7b7e4a8513a7893581375a"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a5d17709b7e7b7e4a8513a7893581375a">bitpit::IBinaryStream::IBinaryStream</a></div><div class="ttdeci">IBinaryStream(size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00058">binary_stream.cpp:58</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_af8e4c415a404956e3042b3429546f485"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#af8e4c415a404956e3042b3429546f485">bitpit::OBinaryStream::squeeze</a></div><div class="ttdeci">void squeeze(void)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00454">binary_stream.cpp:454</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

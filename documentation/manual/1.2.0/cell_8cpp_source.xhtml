
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/patchkernel/cell.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_9dc7aa6b5c138a40bfa86c6dff2965ac.xhtml">patchkernel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">cell.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include&lt;iostream&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;bitpit_common.hpp&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;vertex.hpp&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;cell.hpp&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a>(<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a> &amp;buffer, <a class="code" href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a> &amp;cell)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Write connectivity data ---------------------------------------------- //</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classbitpit_1_1Element.xhtml">bitpit::Element</a> &amp;element(cell);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    buffer &gt;&gt; element;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">// Write interface data ------------------------------------------------- //</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    buffer &gt;&gt; cell.m_interfaces;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// Write adjacencies data ----------------------------------------------- //</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    buffer &gt;&gt; cell.m_adjacencies;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a>(<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>  &amp;buffer, <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a> &amp;cell)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="comment">// Write connectivity data ---------------------------------------------- //</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Element.xhtml">bitpit::Element</a> &amp;element(cell);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    buffer &lt;&lt; element;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Write interface data ------------------------------------------------- //</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    buffer &lt;&lt; cell.m_interfaces;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="comment">// Write adjacencies data ----------------------------------------------- //</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    buffer &lt;&lt; cell.m_adjacencies;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;}</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a9452849fe49171e02184bf1555e16494">   96</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml#a9452849fe49171e02184bf1555e16494">Cell::Cell</a>()</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    : <a class="code" href="classbitpit_1_1Element.xhtml">Element</a>(), m_interior(true), m_pid(0)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a9edce200e05225abbd1093b595e754c2">  105</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml#a9452849fe49171e02184bf1555e16494">Cell::Cell</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">bool</span> interior, <span class="keywordtype">bool</span> storeNeighbourhood)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    : <a class="code" href="classbitpit_1_1Element.xhtml">Element</a>(id, type), m_pid(0)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    _initialize(interior, storeNeighbourhood);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a530fb5a13f90e8b49f58162dc9b06926">  114</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml#a9452849fe49171e02184bf1555e16494">Cell::Cell</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;other)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    : <a class="code" href="classbitpit_1_1Element.xhtml">Element</a>(other)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    *<span class="keyword">this</span> = other;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a2012817de3f1f1ffb0540ad9e739d848">  123</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1Cell.xhtml#a2012817de3f1f1ffb0540ad9e739d848">Cell::operator=</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a>&amp; other)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <a class="code" href="classbitpit_1_1Element.xhtml#a0583576dae78b3bfef8b83c0e7ce9904">Element::operator=</a>(other);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    m_interior    = other.m_interior;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    m_pid         = other.m_pid;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    m_interfaces  = other.m_interfaces;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    m_adjacencies = other.m_adjacencies;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#acdce9c67696da61a59d7fdf2a469ba01">  142</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#acdce9c67696da61a59d7fdf2a469ba01">Cell::initialize</a>(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">bool</span> interior, <span class="keywordtype">bool</span> storeNeighbourhood)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;{</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classbitpit_1_1Element.xhtml#acf15fb27c03597b6d1708343e92b4a28">Element::initialize</a>(type);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    _initialize(interior, storeNeighbourhood);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;}</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keywordtype">void</span> Cell::_initialize(<span class="keywordtype">bool</span> interior, <span class="keywordtype">bool</span> storeNeighbourhood)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml#a34d99949ba9ea37374082bec49ff6934">setInterior</a>(interior);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml#a71e5b6426857ddee54a7ebf61f5b3b92">resetInterfaces</a>(storeNeighbourhood);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml#a8861022c6b169ba9aad2b6ed340c0254">resetAdjacencies</a>(storeNeighbourhood);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a34d99949ba9ea37374082bec49ff6934">  165</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a34d99949ba9ea37374082bec49ff6934">Cell::setInterior</a>(<span class="keywordtype">bool</span> interior)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    m_interior = interior;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">  176</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">Cell::isInterior</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> m_interior;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a302ab8ea3ca4344314d563d273f0b320">  186</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a302ab8ea3ca4344314d563d273f0b320">Cell::setPID</a>(<span class="keywordtype">int</span> pid)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    m_pid = pid;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#abb72de49bdeaf2147973e2ae3720bf8e">  196</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#abb72de49bdeaf2147973e2ae3720bf8e">Cell::getPID</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> m_pid;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a71e5b6426857ddee54a7ebf61f5b3b92">  217</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a71e5b6426857ddee54a7ebf61f5b3b92">Cell::resetInterfaces</a>(<span class="keywordtype">bool</span> storeInterfaces)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;{</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span> (!storeInterfaces || <a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() == <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>) {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a92ed72dc41c1fbc4b8c53da7402d9d6e">clear</a>();</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>(), 1, NULL_ID);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a30edd43a587c9a0029165fb27e3dac77">  231</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a30edd43a587c9a0029165fb27e3dac77">Cell::setInterfaces</a>(std::vector&lt;std::vector&lt;long&gt;&gt; &amp;interfaces)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;{</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(interfaces);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">// The interface vector must have as many elements as faces</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() != <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>) {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordtype">int</span> delta = m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() - <a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">if</span> (delta &gt; 0) {</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; delta; ++i) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ab51a660a58b0633e422102a2bd9b67cc">pop_back</a>();</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (delta &lt; 0) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; delta; ++i) {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">push_back</a>(1, NULL_ID);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Check that there is at least one interfaces for each face</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>(); ++i) {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">if</span> (m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(i) == 0) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">push_back_in_sub_array</a>(i, NULL_ID);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#ac7b560774d2cf4d858d851ef77f6366a">  264</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#ac7b560774d2cf4d858d851ef77f6366a">Cell::setInterface</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;index, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;interface)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(face, index, interface);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">  275</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">Cell::pushInterface</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;interface)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="comment">// Do not push an existing interface</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#ac8344404d7845487c69fb50a6e9c46ab">findInterface</a>(face, interface) &gt;= 0) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="comment">// If there is only one interface stored for the specified face and</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// that interface is negative, we need to overwrite the value and</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="comment">// not add another interface.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">if</span> (m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(face) == 1) {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">if</span> (m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(face, 0) &lt; 0) {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(face, 0, interface);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// There are multiple adjacency, we need to add the interface.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">push_back_in_sub_array</a>(face, interface);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">  303</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">Cell::deleteInterface</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;{</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// If there is only one interface stored for the specified face, we</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="comment">// need to overwrite the value and not delete the interface.</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">if</span> (m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(face) == 1) {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(face, 0, NULL_ID);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">// There are multiple interfaces, we need to delete the interface.</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a1e782ac5988fb0826860a38cce468523">erase</a>(face, i);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">  324</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">Cell::getInterfaceCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">return</span> m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a766b406204bad2f3b0ac704bfe960f7a">sub_arrays_total_size</a>();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#ac5bc8a2a8a13be8c3b965549c0151ccd">  338</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">Cell::getInterfaceCount</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face)<span class="keyword"> const</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span> m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(face);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;}</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">  350</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">Cell::getInterface</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;index)<span class="keyword"> const</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">return</span> m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(face, index);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">  360</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">long</span> * <a class="code" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">Cell::getInterfaces</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">return</span> m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(0);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;}</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div>
<div class="line"><a name="l00371"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#afab27ca10dcf3679c6197d6bed3c9b82">  371</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">long</span> * <a class="code" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">Cell::getInterfaces</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face)<span class="keyword"> const</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">return</span> m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(face);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#ac8344404d7845487c69fb50a6e9c46ab">  387</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#ac8344404d7845487c69fb50a6e9c46ab">Cell::findInterface</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;interface)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;{</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordtype">int</span> nFaceInterfaces = <a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>(face);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nFaceInterfaces; i++) {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(face, i) == interface) {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        }</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#af6ac67510dc6bfdac4fa54a74574c935">  409</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#ac8344404d7845487c69fb50a6e9c46ab">Cell::findInterface</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;interface)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordtype">int</span> nCellInterfaces = <a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>();</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span> *interfaces = <a class="code" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">getInterfaces</a>();</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellInterfaces; i++) {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        <span class="keywordflow">if</span> (interfaces[i] == interface) {</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;}</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a8861022c6b169ba9aad2b6ed340c0254">  438</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a8861022c6b169ba9aad2b6ed340c0254">Cell::resetAdjacencies</a>(<span class="keywordtype">bool</span> storeAdjacencies)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;{</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">if</span> (!storeAdjacencies || <a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() == <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>) {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a92ed72dc41c1fbc4b8c53da7402d9d6e">clear</a>();</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>(), 1, NULL_ID);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;}</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#aa04b4ce52f7e4f30c9ea5b261e23be37">  452</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#aa04b4ce52f7e4f30c9ea5b261e23be37">Cell::setAdjacencies</a>(std::vector&lt;std::vector&lt;long&gt;&gt; &amp;adjacencies)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;{</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(adjacencies);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// The adjacency vector must have as many elements as faces</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() != <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>) {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordtype">int</span> delta = m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() - <a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">if</span> (delta &gt; 0) {</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; delta; ++i) {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ab51a660a58b0633e422102a2bd9b67cc">pop_back</a>();</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (delta &lt; 0) {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; delta; ++i) {</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">push_back</a>(1, NULL_ID);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="comment">// Check that there is at least one adjacency for each face</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>(); ++i) {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">if</span> (m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(i) == 0) {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">push_back_in_sub_array</a>(i, NULL_ID);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        }</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;}</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00485"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">  485</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">Cell::setAdjacency</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;index, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;adjacency)</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;{</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(face, index, adjacency);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">  496</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">Cell::pushAdjacency</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;adjacency)</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// Do not push an existing adjacency</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">findAdjacency</a>(face, adjacency) &gt;= 0) {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="comment">// If there is only one adjacency stored for the specified face and</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// that adjacency is negative, we need to overwrite the value and</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="comment">// not add another adjacency.</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">if</span> (m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(face) == 1) {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="keywordflow">if</span> (m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(face, 0) &lt; 0) {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(face, 0, adjacency);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    }</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="comment">// There are multiple adjacency, we need to add the adjacency.</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">push_back_in_sub_array</a>(face, adjacency);</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;}</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a8b3bf978bde8640c4da2f25bd5d537e4">  524</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a8b3bf978bde8640c4da2f25bd5d537e4">Cell::deleteAdjacency</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;{</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// If there is only one adjacency stored for the specified face, we</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="comment">// need to overwrite that value and not delete the adjacency.</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordflow">if</span> (m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(face) == 1) {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(face, 0, NULL_ID);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="comment">// There are multiple adjacencies, we need to delete the adjacency.</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a1e782ac5988fb0826860a38cce468523">erase</a>(face, i);</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;}</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">  545</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">Cell::getAdjacencyCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">return</span> m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a766b406204bad2f3b0ac704bfe960f7a">sub_arrays_total_size</a>();</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;}</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a7da2a1823e64035caf534d9839ac23d3">  559</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">Cell::getAdjacencyCount</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face)<span class="keyword"> const</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keywordflow">return</span> m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(face);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;}</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">  571</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">Cell::getAdjacency</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;index)<span class="keyword"> const</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="keywordflow">return</span> m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(face, index);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;}</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div>
<div class="line"><a name="l00581"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">  581</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">long</span> * <a class="code" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">Cell::getAdjacencies</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">return</span> m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(0);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a7d2eb23cc2a48fffbd41b38185bf29da">  592</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">long</span> * <a class="code" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">Cell::getAdjacencies</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face)<span class="keyword"> const</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keywordflow">return</span> m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">get</a>(face);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">  608</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">Cell::findAdjacency</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;adjacency)</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;{</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordtype">int</span> nFaceAdjacencies = <a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(face);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nFaceAdjacencies; i++) {</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(face, i) == adjacency) {</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a9fc5d6c572da5484da4a307694178520">  628</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a9fc5d6c572da5484da4a307694178520">Cell::findVertex</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;vertex)</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;{</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordtype">int</span>         loc_id;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordtype">int</span>         n_vert = <a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>();</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keywordtype">long</span>*       c_ = <a class="code" href="classbitpit_1_1Element.xhtml#ad03999c3d3b66840cb72ea6f65901722">getConnect</a>();</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    loc_id = std::find(c_, c_ + n_vert, vertex) - c_;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordflow">if</span> (loc_id &gt;= n_vert) <span class="keywordflow">return</span>(Vertex::NULL_ID);</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">return</span> (loc_id);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;}</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a92ca181ee47c36a43f06d30cff160f30">  649</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">Cell::findAdjacency</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;adjacency)</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;{</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordtype">int</span> nCellAdjacencies = <a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>();</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span> *adjacencies = <a class="code" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">getAdjacencies</a>();</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellAdjacencies; i++) {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <span class="keywordflow">if</span> (adjacencies[i] == adjacency) {</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    }</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;}</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a026d03c1f28550f8540cc5e103d822fc">  667</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a026d03c1f28550f8540cc5e103d822fc">Cell::isFaceBorder</a>(<span class="keywordtype">int</span> face)<span class="keyword"> const</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    assert(m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() &gt; 0);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordflow">if</span> (m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() == 0) {</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(face, 0) &lt; 0);</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;}</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#ab8ff7feeee1f8c4449a10603827ec037">  685</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Cell.xhtml#ab8ff7feeee1f8c4449a10603827ec037">Cell::display</a>(std::ostream &amp;out, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> indent)<span class="keyword"> const</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// Local variables</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    std::string                 t_s(indent, <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordtype">int</span>                         i, j;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordtype">int</span>                         nn;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="comment">// DISPLAY INFOS                                                          //</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() == <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>) {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;cell type:    (unknown)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    }</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="comment">// Scope variables -------------------------------------------------- //</span></div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    <span class="keywordtype">int</span>                         nv = <a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>();</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordtype">int</span>                         nf = <a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="comment">// General info ----------------------------------------------------- //</span></div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;cell type:    &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;ID:           &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;is ghost:     &quot;</span>;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordflow">if</span> (m_interior)     { out &lt;&lt; <span class="stringliteral">&quot;(false)&quot;</span>; }</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordflow">else</span>                { out &lt;&lt; <span class="stringliteral">&quot;(true)&quot;</span>; }</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="comment">// Connectivity infos --------------------------------------------------- //</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;connectivity: [ &quot;</span>;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; nv-1; ++i) {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(i) == Vertex::NULL_ID)   out &lt;&lt; <span class="stringliteral">&quot;n.a. &quot;</span>;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            <span class="keywordflow">else</span>                                   out &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(i) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    } <span class="comment">//next i</span></div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(nv-1) == Vertex::NULL_ID)    out &lt;&lt; <span class="stringliteral">&quot;n.a. &quot;</span>;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">else</span>                                       out &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(nv-1) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="comment">// neighbors infos ------------------------------------------------------ //</span></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        <span class="keywordflow">if</span> (m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() &gt; 0) {</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;neighbors:    [ &quot;</span>;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keywordflow">for</span> (i = 0; i &lt; nf-1; ++i) {</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                nn = <a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(i);</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                out &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span>;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                <span class="keywordflow">for</span> (j = 0; j &lt; nn-1; ++j) {</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(i,j) == Element::NULL_ID)  out &lt;&lt; <span class="stringliteral">&quot;n.a. &quot;</span>;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                    <span class="keywordflow">else</span>                                        out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(i, j) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                } <span class="comment">//next j</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(i, nn-1) == Element::NULL_ID)  out &lt;&lt; <span class="stringliteral">&quot;n.a. ], &quot;</span>;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                <span class="keywordflow">else</span>                                            out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(i, nn-1) &lt;&lt; <span class="stringliteral">&quot; ], &quot;</span>;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            } <span class="comment">//next i</span></div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;            nn = <a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(nf-1);</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span>;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;            <span class="keywordflow">for</span> (j = 0; j &lt; nn-1; ++j) {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(nf-1, j) == Element::NULL_ID)  out &lt;&lt; <span class="stringliteral">&quot;n.a. &quot;</span>;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                <span class="keywordflow">else</span>                                            out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(nf-1, j) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;            } <span class="comment">//next j</span></div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(nf-1, nn-1) == Element::NULL_ID)   out &lt;&lt; <span class="stringliteral">&quot;n.a. ]&quot;</span>;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;            <span class="keywordflow">else</span>                                                out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(nf-1, nn-1) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span>;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;        }</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="comment">// interface infos ------------------------------------------------------ //</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">if</span> (m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() &gt; 0) {</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;interfaces:   [ &quot;</span>;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;            <span class="keywordflow">for</span> (i = 0; i &lt; nf-1; ++i) {</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                nn = <a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>(i);</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                out &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span>;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                <span class="keywordflow">for</span> (j = 0; j &lt; nn-1; ++j) {</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(i,j) == Element::NULL_ID)  out &lt;&lt; <span class="stringliteral">&quot;n.a. &quot;</span>;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                    <span class="keywordflow">else</span>                                        out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(i, j) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                } <span class="comment">//next j</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(i, nn-1) == Element::NULL_ID)  out &lt;&lt; <span class="stringliteral">&quot;n.a. ], &quot;</span>;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                <span class="keywordflow">else</span>                                            out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(i, nn-1) &lt;&lt; <span class="stringliteral">&quot; ], &quot;</span>;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            } <span class="comment">//next i</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;            nn = <a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>(nf-1);</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[ &quot;</span>;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keywordflow">for</span> (j = 0; j &lt; nn-1; ++j) {</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(nf-1, j) == Element::NULL_ID)  out &lt;&lt; <span class="stringliteral">&quot;n.a. &quot;</span>;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                <span class="keywordflow">else</span>                                            out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(nf-1, j) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            } <span class="comment">//next j</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(nf-1, nn-1) == Element::NULL_ID)   out &lt;&lt; <span class="stringliteral">&quot;n.a. ]&quot;</span>;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            <span class="keywordflow">else</span>                                                out &lt;&lt; <a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(nf-1, nn-1) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span>;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        }</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;}</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div>
<div class="line"><a name="l00782"></a><span class="lineno"><a class="line" href="classbitpit_1_1Cell.xhtml#a3efeca8fc3ef399e0b5606a3da53f2b5">  782</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Cell.xhtml#a3efeca8fc3ef399e0b5606a3da53f2b5">Cell::getBinarySize</a>()</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;{</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="classbitpit_1_1Element.xhtml#ab9bce5ecea5d8bdb693fefaee848199e">Element::getBinarySize</a>() + m_interfaces.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a87615a05e27ef82b96b9bbb569146c61">get_binary_size</a>() + m_adjacencies.<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a87615a05e27ef82b96b9bbb569146c61">get_binary_size</a>());</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;}</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="comment">// Explicit instantiation of the Cell containers</span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Cell&gt;</a>;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_abd32e42c6c9fc4ec8c07aef1d52864b9"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">bitpit::CollapsedVector2D::get</a></div><div class="ttdeci">T &amp; get(const int &amp;i, const int &amp;j)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00584">collapsedVector2D.tpp:584</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a8861022c6b169ba9aad2b6ed340c0254"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a8861022c6b169ba9aad2b6ed340c0254">bitpit::Cell::resetAdjacencies</a></div><div class="ttdeci">void resetAdjacencies(bool storeAdjacencies=true)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00438">cell.cpp:438</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ab51a660a58b0633e422102a2bd9b67cc"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ab51a660a58b0633e422102a2bd9b67cc">bitpit::CollapsedVector2D::pop_back</a></div><div class="ttdeci">void pop_back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00480">collapsedVector2D.tpp:480</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_abb72de49bdeaf2147973e2ae3720bf8e"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#abb72de49bdeaf2147973e2ae3720bf8e">bitpit::Cell::getPID</a></div><div class="ttdeci">int getPID() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00196">cell.cpp:196</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a1e782ac5988fb0826860a38cce468523"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a1e782ac5988fb0826860a38cce468523">bitpit::CollapsedVector2D::erase</a></div><div class="ttdeci">void erase(const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00538">collapsedVector2D.tpp:538</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a8e451a8f6f5a1f323bedb040231ad49f"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">bitpit::Cell::getAdjacency</a></div><div class="ttdeci">long getAdjacency(const int &amp;face, const int &amp;index=0) const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00571">cell.cpp:571</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a6552acbe400a950c45fb5be92d1ddb8c"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">bitpit::CollapsedVector2D::push_back_in_sub_array</a></div><div class="ttdeci">void push_back_in_sub_array(const T &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00445">collapsedVector2D.tpp:445</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a30edd43a587c9a0029165fb27e3dac77"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a30edd43a587c9a0029165fb27e3dac77">bitpit::Cell::setInterfaces</a></div><div class="ttdeci">void setInterfaces(std::vector&lt; std::vector&lt; long &gt;&gt; &amp;interfaces)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00231">cell.cpp:231</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a3efeca8fc3ef399e0b5606a3da53f2b5"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a3efeca8fc3ef399e0b5606a3da53f2b5">bitpit::Cell::getBinarySize</a></div><div class="ttdeci">unsigned int getBinarySize()</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00782">cell.cpp:782</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml"><div class="ttname"><a href="classbitpit_1_1Element.xhtml">bitpit::Element</a></div><div class="ttdoc">The Element class provides an interface for defining elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00107">element.hpp:107</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a1d1d296b0cec58f89ef47f51ce09b20b"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">bitpit::Cell::getInterfaces</a></div><div class="ttdeci">const long * getInterfaces() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00360">cell.cpp:360</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a026d03c1f28550f8540cc5e103d822fc"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a026d03c1f28550f8540cc5e103d822fc">bitpit::Cell::isFaceBorder</a></div><div class="ttdeci">bool isFaceBorder(int face) const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00667">cell.cpp:667</a></div></div>
<div class="ttc" id="group__Operators_xhtml_gae6ad1dc96cc1000aded39aecb5d66493"><div class="ttname"><a href="group__Operators.xhtml#gae6ad1dc96cc1000aded39aecb5d66493">operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;out, const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01320">Operators_array.tpp:1320</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_af95f90cb1619d65d3613603079bafe44"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">bitpit::Cell::getInterfaceCount</a></div><div class="ttdeci">int getInterfaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00324">cell.cpp:324</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">bitpit::ElementInfo::UNDEFINED</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00047">element.hpp:47</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ad590d2251996ef44aad5c79fea68277f"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">bitpit::Cell::setAdjacency</a></div><div class="ttdeci">void setAdjacency(const int &amp;face, const int &amp;index, const long &amp;adjacencies)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00485">cell.cpp:485</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ab12abc7226f80ad99f9a7dd27129bd67"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">bitpit::Cell::getInterface</a></div><div class="ttdeci">long getInterface(const int &amp;face, const int &amp;index=0) const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00350">cell.cpp:350</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a></div><div class="ttdoc">creates output binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00169">binary_stream.hpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a2012817de3f1f1ffb0540ad9e739d848"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a2012817de3f1f1ffb0540ad9e739d848">bitpit::Cell::operator=</a></div><div class="ttdeci">Cell &amp; operator=(const Cell &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00123">cell.cpp:123</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a92ed72dc41c1fbc4b8c53da7402d9d6e"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a92ed72dc41c1fbc4b8c53da7402d9d6e">bitpit::CollapsedVector2D::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00337">collapsedVector2D.tpp:337</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5a99fcf991a72b8dc061d7175e6e855b"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">bitpit::Cell::deleteInterface</a></div><div class="ttdeci">void deleteInterface(const int &amp;face, const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00303">cell.cpp:303</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_acdce9c67696da61a59d7fdf2a469ba01"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#acdce9c67696da61a59d7fdf2a469ba01">bitpit::Cell::initialize</a></div><div class="ttdeci">void initialize(ElementInfo::Type type, bool interior, bool storeNeighbourhood=true)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00142">cell.cpp:142</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_aa3582949c911b29f260cce92216b817b"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">bitpit::Cell::pushInterface</a></div><div class="ttdeci">void pushInterface(const int &amp;face, const long &amp;interface)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00275">cell.cpp:275</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a0583576dae78b3bfef8b83c0e7ce9904"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a0583576dae78b3bfef8b83c0e7ce9904">bitpit::Element::operator=</a></div><div class="ttdeci">Element &amp; operator=(const Element &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00962">element.cpp:962</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_ab9bce5ecea5d8bdb693fefaee848199e"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#ab9bce5ecea5d8bdb693fefaee848199e">bitpit::Element::getBinarySize</a></div><div class="ttdeci">unsigned int getBinarySize()</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01282">element.cpp:1282</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a302ab8ea3ca4344314d563d273f0b320"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a302ab8ea3ca4344314d563d273f0b320">bitpit::Cell::setPID</a></div><div class="ttdeci">void setPID(int pid)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00186">cell.cpp:186</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a34d99949ba9ea37374082bec49ff6934"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a34d99949ba9ea37374082bec49ff6934">bitpit::Cell::setInterior</a></div><div class="ttdeci">void setInterior(bool interior)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00165">cell.cpp:165</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a9452849fe49171e02184bf1555e16494"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a9452849fe49171e02184bf1555e16494">bitpit::Cell::Cell</a></div><div class="ttdeci">Cell()</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00096">cell.cpp:96</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_aab1fa3c2c1599062fb2740aa99f541a0"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">bitpit::CollapsedVector2D::initialize</a></div><div class="ttdeci">void initialize(const std::vector&lt; int &gt; &amp;subArraySizes, const T &amp;value=T())</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00219">collapsedVector2D.tpp:219</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a></div><div class="ttdoc">creates input binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00087">binary_stream.hpp:87</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a></div><div class="ttdoc">The Cell class defines the cells. </div><div class="ttdef"><b>Definition:</b> <a href="cell_8hpp_source.xhtml#l00044">cell.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5415789a8af4586940fa0fbc3e7d7f48"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">bitpit::Cell::isInterior</a></div><div class="ttdeci">bool isInterior() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00176">cell.cpp:176</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_ad03999c3d3b66840cb72ea6f65901722"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#ad03999c3d3b66840cb72ea6f65901722">bitpit::Element::getConnect</a></div><div class="ttdeci">const long * getConnect() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01076">element.cpp:1076</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a05a9d2b7f35b108a690d96242cdfe5e0"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">bitpit::Element::getType</a></div><div class="ttdeci">ElementInfo::Type getType() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01048">element.cpp:1048</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a29e096326583f270a879e4b8681ee2c9"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">bitpit::CollapsedVector2D::push_back</a></div><div class="ttdeci">void push_back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00387">collapsedVector2D.tpp:387</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a703f2ce12319b53c6804c5d0b54a0ca1"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">bitpit::Cell::pushAdjacency</a></div><div class="ttdeci">void pushAdjacency(const int &amp;face, const long &amp;adjacency)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00496">cell.cpp:496</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a9539c1b89c7eb44395715e33d99a5034"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">bitpit::CollapsedVector2D::sub_array_size</a></div><div class="ttdeci">int sub_array_size(int i) const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00662">collapsedVector2D.tpp:662</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ac7b560774d2cf4d858d851ef77f6366a"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ac7b560774d2cf4d858d851ef77f6366a">bitpit::Cell::setInterface</a></div><div class="ttdeci">void setInterface(const int &amp;face, const int &amp;index, const long &amp;interface)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00264">cell.cpp:264</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a87615a05e27ef82b96b9bbb569146c61"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a87615a05e27ef82b96b9bbb569146c61">bitpit::CollapsedVector2D::get_binary_size</a></div><div class="ttdeci">size_t get_binary_size()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00696">collapsedVector2D.tpp:696</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a8b3bf978bde8640c4da2f25bd5d537e4"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a8b3bf978bde8640c4da2f25bd5d537e4">bitpit::Cell::deleteAdjacency</a></div><div class="ttdeci">void deleteAdjacency(const int &amp;face, const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00524">cell.cpp:524</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a2b518a2c297a50b7a9bc6df8908b18d5"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">bitpit::Cell::findAdjacency</a></div><div class="ttdeci">int findAdjacency(const int &amp;face, const int &amp;adjacency)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00608">cell.cpp:608</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_acf15fb27c03597b6d1708343e92b4a28"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#acf15fb27c03597b6d1708343e92b4a28">bitpit::Element::initialize</a></div><div class="ttdeci">void initialize(ElementInfo::Type type)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00981">element.cpp:981</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a7339c6c05059c0c1658d30f3167c1d81"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">bitpit::CollapsedVector2D::set</a></div><div class="ttdeci">void set(const int &amp;i, const int &amp;j, T value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00571">collapsedVector2D.tpp:571</a></div></div>
<div class="ttc" id="group__Operators_xhtml_ga91ecc3462d869a3132ba96d017ae549b"><div class="ttname"><a href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator&gt;&gt;(std::istream &amp;in, std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01398">Operators_array.tpp:1398</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a79eb2e7b6342c00c93b2b0f36214b1f1"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">bitpit::Element::getId</a></div><div class="ttdeci">long getId() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01018">element.cpp:1018</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a71e5b6426857ddee54a7ebf61f5b3b92"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a71e5b6426857ddee54a7ebf61f5b3b92">bitpit::Cell::resetInterfaces</a></div><div class="ttdeci">void resetInterfaces(bool storeInterfaces=true)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00217">cell.cpp:217</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5caa1482ad646991f7cc73e4c09ef48e"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">bitpit::Cell::getAdjacencies</a></div><div class="ttdeci">const long * getAdjacencies() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00581">cell.cpp:581</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a69eac8f6d4c5fe4fa4f70cb4be57ee9d"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">bitpit::Element::getVertexCount</a></div><div class="ttdeci">int getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01239">element.cpp:1239</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">bitpit::ElementInfo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00046">element.hpp:46</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ac8344404d7845487c69fb50a6e9c46ab"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ac8344404d7845487c69fb50a6e9c46ab">bitpit::Cell::findInterface</a></div><div class="ttdeci">int findInterface(const int &amp;face, const int &amp;interface)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00387">cell.cpp:387</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_aa61245982eeb160544d260289840a04f"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">bitpit::Cell::getAdjacencyCount</a></div><div class="ttdeci">int getAdjacencyCount() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00545">cell.cpp:545</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ab8ff7feeee1f8c4449a10603827ec037"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ab8ff7feeee1f8c4449a10603827ec037">bitpit::Cell::display</a></div><div class="ttdeci">void display(std::ostream &amp;out, unsigned short int indent) const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00685">cell.cpp:685</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a9fc5d6c572da5484da4a307694178520"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a9fc5d6c572da5484da4a307694178520">bitpit::Cell::findVertex</a></div><div class="ttdeci">int findVertex(const long &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00628">cell.cpp:628</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a766b406204bad2f3b0ac704bfe960f7a"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a766b406204bad2f3b0ac704bfe960f7a">bitpit::CollapsedVector2D::sub_arrays_total_size</a></div><div class="ttdeci">int sub_arrays_total_size() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00651">collapsedVector2D.tpp:651</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a72f8b69e21b8b7f72adaccd7278a5430"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">bitpit::CollapsedVector2D::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00641">collapsedVector2D.tpp:641</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_af79866635c18fe3384764869f6a450b4"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">bitpit::Element::getFaceCount</a></div><div class="ttdeci">int getFaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01096">element.cpp:1096</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_aa04b4ce52f7e4f30c9ea5b261e23be37"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#aa04b4ce52f7e4f30c9ea5b261e23be37">bitpit::Cell::setAdjacencies</a></div><div class="ttdeci">void setAdjacencies(std::vector&lt; std::vector&lt; long &gt;&gt; &amp;adjacencies)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00452">cell.cpp:452</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a611e1742519f6391eb9a80433dabb83a"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">bitpit::Element::getVertex</a></div><div class="ttdeci">long getVertex(const int &amp;vertex) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01272">element.cpp:1272</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - bitpit::Cell Class Reference</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>bitpit</b></li><li class="navelem"><a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classbitpit_1_1Cell-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">bitpit::Cell Class Reference<div class="ingroups"><a class="el" href="group__patchkernel.xhtml">Patch kernel</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="classbitpit_1_1Cell.xhtml" title="The Cell class defines the cells. ">Cell</a> class defines the cells.  
 <a href="classbitpit_1_1Cell.xhtml#details">More...</a></p>
<div class="dynheader">
Inheritance diagram for bitpit::Cell:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classbitpit_1_1Cell__inherit__graph.svg" width="118" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div class="dynheader">
Collaboration diagram for bitpit::Cell:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classbitpit_1_1Cell__coll__graph.svg" width="118" height="112"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1512ded65f9f7f6d1447e73d094b8a72"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1512ded65f9f7f6d1447e73d094b8a72"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>Cell</b> (<a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a1512ded65f9f7f6d1447e73d094b8a72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14d48127251ee4fe77dfa39df5c7e072"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a14d48127251ee4fe77dfa39df5c7e072"></a>
<a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a14d48127251ee4fe77dfa39df5c7e072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classbitpit_1_1Element"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classbitpit_1_1Element')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classbitpit_1_1Element.xhtml">bitpit::Element</a></td></tr>
<tr class="memitem:af181cd8915bb1c621fb2937c649cb40a inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af181cd8915bb1c621fb2937c649cb40a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>Element</b> (<a class="el" href="classbitpit_1_1Element.xhtml">Element</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:af181cd8915bb1c621fb2937c649cb40a inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f146fcb88d9eaebfaf59cd843618e81 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7f146fcb88d9eaebfaf59cd843618e81"></a>
<a class="el" href="classbitpit_1_1Element.xhtml">Element</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="classbitpit_1_1Element.xhtml">Element</a> &amp;&amp;other)=default</td></tr>
<tr class="separator:a7f146fcb88d9eaebfaf59cd843618e81 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5ed1f969411cb1b97a81b207fb1a262 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#af5ed1f969411cb1b97a81b207fb1a262">Element</a> ()</td></tr>
<tr class="separator:af5ed1f969411cb1b97a81b207fb1a262 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bf1437712afbe7d4eacbe6fa0d00173 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a9bf1437712afbe7d4eacbe6fa0d00173">Element</a> (const long &amp;id, <a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type=<a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>)</td></tr>
<tr class="separator:a9bf1437712afbe7d4eacbe6fa0d00173 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46aa8d562a1f4c20b9ac979f307db8b3 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a46aa8d562a1f4c20b9ac979f307db8b3">Element</a> (const <a class="el" href="classbitpit_1_1Element.xhtml">Element</a> &amp;other)</td></tr>
<tr class="separator:a46aa8d562a1f4c20b9ac979f307db8b3 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0583576dae78b3bfef8b83c0e7ce9904 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbitpit_1_1Element.xhtml">Element</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a0583576dae78b3bfef8b83c0e7ce9904">operator=</a> (const <a class="el" href="classbitpit_1_1Element.xhtml">Element</a> &amp;other)</td></tr>
<tr class="separator:a0583576dae78b3bfef8b83c0e7ce9904 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf15fb27c03597b6d1708343e92b4a28 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#acf15fb27c03597b6d1708343e92b4a28">initialize</a> (<a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type)</td></tr>
<tr class="separator:acf15fb27c03597b6d1708343e92b4a28 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd875d8ac29b6d292b99d1779041176f inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classbitpit_1_1ElementInfo.xhtml">ElementInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#acd875d8ac29b6d292b99d1779041176f">getInfo</a> () const </td></tr>
<tr class="separator:acd875d8ac29b6d292b99d1779041176f inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c9f47001976ae86bc79707fe15fd7ce inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a2c9f47001976ae86bc79707fe15fd7ce">setId</a> (const long &amp;id)</td></tr>
<tr class="separator:a2c9f47001976ae86bc79707fe15fd7ce inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79eb2e7b6342c00c93b2b0f36214b1f1 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a> () const </td></tr>
<tr class="separator:a79eb2e7b6342c00c93b2b0f36214b1f1 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6a25bd397ed3a55b83ac17e0939f97e inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#ab6a25bd397ed3a55b83ac17e0939f97e">setType</a> (<a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type)</td></tr>
<tr class="separator:ab6a25bd397ed3a55b83ac17e0939f97e inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05a9d2b7f35b108a690d96242cdfe5e0 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a> () const </td></tr>
<tr class="separator:a05a9d2b7f35b108a690d96242cdfe5e0 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a964d87372e162abe437a0ef18e20eea0 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a964d87372e162abe437a0ef18e20eea0">getDimension</a> () const </td></tr>
<tr class="separator:a964d87372e162abe437a0ef18e20eea0 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd9622af6e9216ae13509e9835d110f1 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#acd9622af6e9216ae13509e9835d110f1">isThreeDimensional</a> () const </td></tr>
<tr class="separator:acd9622af6e9216ae13509e9835d110f1 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adef671037ca88ed95c297e74d911f4c4 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#adef671037ca88ed95c297e74d911f4c4">setConnect</a> (std::unique_ptr&lt; long[]&gt; &amp;&amp;connect)</td></tr>
<tr class="separator:adef671037ca88ed95c297e74d911f4c4 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad069c168d614f85444a5d08d0d4cdad8 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#ad069c168d614f85444a5d08d0d4cdad8">unsetConnect</a> ()</td></tr>
<tr class="separator:ad069c168d614f85444a5d08d0d4cdad8 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad03999c3d3b66840cb72ea6f65901722 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">const long *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#ad03999c3d3b66840cb72ea6f65901722">getConnect</a> () const </td></tr>
<tr class="separator:ad03999c3d3b66840cb72ea6f65901722 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b10dfa960eb1c4d286a34502e41304d inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">long *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a5b10dfa960eb1c4d286a34502e41304d">getConnect</a> ()</td></tr>
<tr class="separator:a5b10dfa960eb1c4d286a34502e41304d inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af79866635c18fe3384764869f6a450b4 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a> () const </td></tr>
<tr class="separator:af79866635c18fe3384764869f6a450b4 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8ed2f8193fced9e84cd379e8b0934de inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#ae8ed2f8193fced9e84cd379e8b0934de">getFaceType</a> (const int &amp;face) const </td></tr>
<tr class="separator:ae8ed2f8193fced9e84cd379e8b0934de inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73d45283655d18a2a0ca10545883b2e2 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a73d45283655d18a2a0ca10545883b2e2">getFaceLocalConnect</a> (const int &amp;face) const </td></tr>
<tr class="separator:a73d45283655d18a2a0ca10545883b2e2 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d1f37fa9f5ef449e1a52c2e94ccb38e inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a6d1f37fa9f5ef449e1a52c2e94ccb38e">getEdgeCount</a> () const </td></tr>
<tr class="separator:a6d1f37fa9f5ef449e1a52c2e94ccb38e inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4780b9dbd457df6ff0ec35d26a63cd54 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a4780b9dbd457df6ff0ec35d26a63cd54">getEdgeLocalConnect</a> (const int &amp;edge) const </td></tr>
<tr class="separator:a4780b9dbd457df6ff0ec35d26a63cd54 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6fa1001174a82ebab7b0d0003af4c77 inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#af6fa1001174a82ebab7b0d0003af4c77">setVertex</a> (const int &amp;index, const long &amp;vertex)</td></tr>
<tr class="separator:af6fa1001174a82ebab7b0d0003af4c77 inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69eac8f6d4c5fe4fa4f70cb4be57ee9d inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a> () const </td></tr>
<tr class="separator:a69eac8f6d4c5fe4fa4f70cb4be57ee9d inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a611e1742519f6391eb9a80433dabb83a inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a> (const int &amp;vertex) const </td></tr>
<tr class="separator:a611e1742519f6391eb9a80433dabb83a inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9bce5ecea5d8bdb693fefaee848199e inherit pub_methods_classbitpit_1_1Element"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Element.xhtml#ab9bce5ecea5d8bdb693fefaee848199e">getBinarySize</a> ()</td></tr>
<tr class="separator:ab9bce5ecea5d8bdb693fefaee848199e inherit pub_methods_classbitpit_1_1Element"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aff47fdc0e23b57deeace77008ec46457"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aff47fdc0e23b57deeace77008ec46457"></a>
<a class="el" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;&lt;)</b> (<a class="el" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a> &amp;buf, const <a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell)</td></tr>
<tr class="separator:aff47fdc0e23b57deeace77008ec46457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a4819501e191387e4856e708734f700"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7a4819501e191387e4856e708734f700"></a>
<a class="el" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;&gt;)</b> (<a class="el" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a> &amp;buf, <a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell)</td></tr>
<tr class="separator:a7a4819501e191387e4856e708734f700"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad35362c924b25f141366730c14e66bb9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad35362c924b25f141366730c14e66bb9"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>PatchKernel</b></td></tr>
<tr class="separator:ad35362c924b25f141366730c14e66bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9452849fe49171e02184bf1555e16494"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a9452849fe49171e02184bf1555e16494">Cell</a> ()</td></tr>
<tr class="separator:a9452849fe49171e02184bf1555e16494"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9edce200e05225abbd1093b595e754c2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a9edce200e05225abbd1093b595e754c2">Cell</a> (const long &amp;id, <a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type=<a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>, bool interior=true, bool storeNeighbourhood=true)</td></tr>
<tr class="separator:a9edce200e05225abbd1093b595e754c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a530fb5a13f90e8b49f58162dc9b06926"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a530fb5a13f90e8b49f58162dc9b06926">Cell</a> (const <a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;other)</td></tr>
<tr class="separator:a530fb5a13f90e8b49f58162dc9b06926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2012817de3f1f1ffb0540ad9e739d848"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a2012817de3f1f1ffb0540ad9e739d848">operator=</a> (const <a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;other)</td></tr>
<tr class="separator:a2012817de3f1f1ffb0540ad9e739d848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdce9c67696da61a59d7fdf2a469ba01"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#acdce9c67696da61a59d7fdf2a469ba01">initialize</a> (<a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, bool interior, bool storeNeighbourhood=true)</td></tr>
<tr class="separator:acdce9c67696da61a59d7fdf2a469ba01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5415789a8af4586940fa0fbc3e7d7f48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">isInterior</a> () const </td></tr>
<tr class="separator:a5415789a8af4586940fa0fbc3e7d7f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a302ab8ea3ca4344314d563d273f0b320"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a302ab8ea3ca4344314d563d273f0b320">setPID</a> (int pid)</td></tr>
<tr class="separator:a302ab8ea3ca4344314d563d273f0b320"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb72de49bdeaf2147973e2ae3720bf8e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#abb72de49bdeaf2147973e2ae3720bf8e">getPID</a> () const </td></tr>
<tr class="separator:abb72de49bdeaf2147973e2ae3720bf8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71e5b6426857ddee54a7ebf61f5b3b92"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a71e5b6426857ddee54a7ebf61f5b3b92">resetInterfaces</a> (bool storeInterfaces=true)</td></tr>
<tr class="separator:a71e5b6426857ddee54a7ebf61f5b3b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30edd43a587c9a0029165fb27e3dac77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a30edd43a587c9a0029165fb27e3dac77">setInterfaces</a> (std::vector&lt; std::vector&lt; long &gt;&gt; &amp;interfaces)</td></tr>
<tr class="separator:a30edd43a587c9a0029165fb27e3dac77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7b560774d2cf4d858d851ef77f6366a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#ac7b560774d2cf4d858d851ef77f6366a">setInterface</a> (const int &amp;face, const int &amp;index, const long &amp;interface)</td></tr>
<tr class="separator:ac7b560774d2cf4d858d851ef77f6366a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3582949c911b29f260cce92216b817b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">pushInterface</a> (const int &amp;face, const long &amp;interface)</td></tr>
<tr class="separator:aa3582949c911b29f260cce92216b817b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a99fcf991a72b8dc061d7175e6e855b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">deleteInterface</a> (const int &amp;face, const int &amp;i)</td></tr>
<tr class="separator:a5a99fcf991a72b8dc061d7175e6e855b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af95f90cb1619d65d3613603079bafe44"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a> () const </td></tr>
<tr class="separator:af95f90cb1619d65d3613603079bafe44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5bc8a2a8a13be8c3b965549c0151ccd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#ac5bc8a2a8a13be8c3b965549c0151ccd">getInterfaceCount</a> (const int &amp;face) const </td></tr>
<tr class="separator:ac5bc8a2a8a13be8c3b965549c0151ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab12abc7226f80ad99f9a7dd27129bd67"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a> (const int &amp;face, const int &amp;index=0) const </td></tr>
<tr class="separator:ab12abc7226f80ad99f9a7dd27129bd67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d1d296b0cec58f89ef47f51ce09b20b"><td class="memItemLeft" align="right" valign="top">const long *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">getInterfaces</a> () const </td></tr>
<tr class="separator:a1d1d296b0cec58f89ef47f51ce09b20b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afab27ca10dcf3679c6197d6bed3c9b82"><td class="memItemLeft" align="right" valign="top">const long *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#afab27ca10dcf3679c6197d6bed3c9b82">getInterfaces</a> (const int &amp;face) const </td></tr>
<tr class="separator:afab27ca10dcf3679c6197d6bed3c9b82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8344404d7845487c69fb50a6e9c46ab"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#ac8344404d7845487c69fb50a6e9c46ab">findInterface</a> (const int &amp;face, const int &amp;interface)</td></tr>
<tr class="separator:ac8344404d7845487c69fb50a6e9c46ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6ac67510dc6bfdac4fa54a74574c935"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#af6ac67510dc6bfdac4fa54a74574c935">findInterface</a> (const int &amp;interface)</td></tr>
<tr class="separator:af6ac67510dc6bfdac4fa54a74574c935"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8861022c6b169ba9aad2b6ed340c0254"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a8861022c6b169ba9aad2b6ed340c0254">resetAdjacencies</a> (bool storeAdjacencies=true)</td></tr>
<tr class="separator:a8861022c6b169ba9aad2b6ed340c0254"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa04b4ce52f7e4f30c9ea5b261e23be37"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#aa04b4ce52f7e4f30c9ea5b261e23be37">setAdjacencies</a> (std::vector&lt; std::vector&lt; long &gt;&gt; &amp;adjacencies)</td></tr>
<tr class="separator:aa04b4ce52f7e4f30c9ea5b261e23be37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad590d2251996ef44aad5c79fea68277f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">setAdjacency</a> (const int &amp;face, const int &amp;index, const long &amp;adjacencies)</td></tr>
<tr class="separator:ad590d2251996ef44aad5c79fea68277f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a703f2ce12319b53c6804c5d0b54a0ca1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">pushAdjacency</a> (const int &amp;face, const long &amp;adjacency)</td></tr>
<tr class="separator:a703f2ce12319b53c6804c5d0b54a0ca1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b3bf978bde8640c4da2f25bd5d537e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a8b3bf978bde8640c4da2f25bd5d537e4">deleteAdjacency</a> (const int &amp;face, const int &amp;i)</td></tr>
<tr class="separator:a8b3bf978bde8640c4da2f25bd5d537e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa61245982eeb160544d260289840a04f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a> () const </td></tr>
<tr class="separator:aa61245982eeb160544d260289840a04f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7da2a1823e64035caf534d9839ac23d3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a7da2a1823e64035caf534d9839ac23d3">getAdjacencyCount</a> (const int &amp;face) const </td></tr>
<tr class="separator:a7da2a1823e64035caf534d9839ac23d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e451a8f6f5a1f323bedb040231ad49f"><td class="memItemLeft" align="right" valign="top">long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a> (const int &amp;face, const int &amp;index=0) const </td></tr>
<tr class="separator:a8e451a8f6f5a1f323bedb040231ad49f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5caa1482ad646991f7cc73e4c09ef48e"><td class="memItemLeft" align="right" valign="top">const long *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">getAdjacencies</a> () const </td></tr>
<tr class="separator:a5caa1482ad646991f7cc73e4c09ef48e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d2eb23cc2a48fffbd41b38185bf29da"><td class="memItemLeft" align="right" valign="top">const long *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a7d2eb23cc2a48fffbd41b38185bf29da">getAdjacencies</a> (const int &amp;face) const </td></tr>
<tr class="separator:a7d2eb23cc2a48fffbd41b38185bf29da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b518a2c297a50b7a9bc6df8908b18d5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">findAdjacency</a> (const int &amp;face, const int &amp;adjacency)</td></tr>
<tr class="separator:a2b518a2c297a50b7a9bc6df8908b18d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92ca181ee47c36a43f06d30cff160f30"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a92ca181ee47c36a43f06d30cff160f30">findAdjacency</a> (const int &amp;adjacency)</td></tr>
<tr class="separator:a92ca181ee47c36a43f06d30cff160f30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fc5d6c572da5484da4a307694178520"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a9fc5d6c572da5484da4a307694178520">findVertex</a> (const long &amp;vertex)</td></tr>
<tr class="separator:a9fc5d6c572da5484da4a307694178520"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a026d03c1f28550f8540cc5e103d822fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a026d03c1f28550f8540cc5e103d822fc">isFaceBorder</a> (int face) const </td></tr>
<tr class="separator:a026d03c1f28550f8540cc5e103d822fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8ff7feeee1f8c4449a10603827ec037"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#ab8ff7feeee1f8c4449a10603827ec037">display</a> (std::ostream &amp;out, unsigned short int indent) const </td></tr>
<tr class="separator:ab8ff7feeee1f8c4449a10603827ec037"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3efeca8fc3ef399e0b5606a3da53f2b5"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a3efeca8fc3ef399e0b5606a3da53f2b5">getBinarySize</a> ()</td></tr>
<tr class="separator:a3efeca8fc3ef399e0b5606a3da53f2b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34d99949ba9ea37374082bec49ff6934"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1Cell.xhtml#a34d99949ba9ea37374082bec49ff6934">setInterior</a> (bool interior)</td></tr>
<tr class="separator:a34d99949ba9ea37374082bec49ff6934"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The <a class="el" href="classbitpit_1_1Cell.xhtml" title="The Cell class defines the cells. ">Cell</a> class defines the cells. </p>
<p><a class="el" href="classbitpit_1_1Cell.xhtml" title="The Cell class defines the cells. ">Cell</a> is class that defines the cells. </p>

<p>Definition at line <a class="el" href="cell_8hpp_source.xhtml#l00044">44</a> of file <a class="el" href="cell_8hpp_source.xhtml">cell.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9452849fe49171e02184bf1555e16494"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::Cell::Cell </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Default constructor. </p>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9edce200e05225abbd1093b595e754c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::Cell::Cell </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a>&#160;</td>
          <td class="paramname"><em>type</em> = <code><a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>interior</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>storeNeighbourhood</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a new cell. </p>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a530fb5a13f90e8b49f58162dc9b06926"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::Cell::Cell </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy-constructor </p>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00114">114</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a8b3bf978bde8640c4da2f25bd5d537e4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::deleteAdjacency </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes the specified adjacency from the adjacencies associate to the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
    <tr><td class="paramname">i</td><td>is the index of the adjacency to delete </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00524">524</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5a99fcf991a72b8dc061d7175e6e855b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::deleteInterface </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes the specified interface from the interfaces associate to the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
    <tr><td class="paramname">i</td><td>is the index of the interface to delete </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00303">303</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ab8ff7feeee1f8c4449a10603827ec037"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::display </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short int&#160;</td>
          <td class="paramname"><em>indent</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Displays the cell information to an output stream</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">out</td><td>is the output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">indent</td><td>is the number of trailing spaces to prepend when writing the information </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00685">685</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a2b518a2c297a50b7a9bc6df8908b18d5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::findAdjacency </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>adjacency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the specified adjacency among the adjacencies of the given face.</p>
<p>The function returns the position in the adjacency face list of the specified adjacency. If the face doesn't contain the specified adjacency the function returns a dummy position equal to -1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>is the face of the cell </td></tr>
    <tr><td class="paramname">adjacency</td><td>is the adjacency to look for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The position in the adjacency face list of the specfied adjacency. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00608">608</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a92ca181ee47c36a43f06d30cff160f30"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::findAdjacency </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>adjacency</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the specified adjacency among all the adjacencies of the cell.</p>
<p>The function returns the first position in the adjacency cell list of the specified adjacency. If the cell doesn't contain the specified adjacency the function returns a dummy position equal to -1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">adjacency</td><td>is the adjacency to look for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The position in the adjacency cell list of the specfied adjacency. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00649">649</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac8344404d7845487c69fb50a6e9c46ab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::findInterface </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>interface</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the specified interface among the interfaces of the given face.</p>
<p>The function returns the position in the interface face list of the specified interface. If the face doesn't contain the specified interface the function returns a dummy position equal to -1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>is the face of the cell </td></tr>
    <tr><td class="paramname">interface</td><td>is the interface to look for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The position in the interface face list of the specfied interface. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00387">387</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="af6ac67510dc6bfdac4fa54a74574c935"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::findInterface </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>interface</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the specified interface among all the interfaces of the cell.</p>
<p>The function returns the first position in the interface cell list of the specified interface. If the cell doesn't contain the specified interface the function returns a dummy position equal to -1.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">interface</td><td>is the interface to look for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The position in the interface cell list of the specfied interface. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00409">409</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9fc5d6c572da5484da4a307694178520"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::findVertex </td>
          <td>(</td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>vertex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given the global index of a vertex, returns the local index of that vertex within the cell (if exists). If the specified vertex does not exist in the cell connectivity list, returns Vertex::NULL_ID</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">vertex</td><td>vertex global ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>local index of the vertex with specified ID within the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00628">628</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5caa1482ad646991f7cc73e4c09ef48e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const long * bitpit::Cell::getAdjacencies </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets all the adjacencies of the cell.</p>
<dl class="section return"><dt>Returns</dt><dd>The adjacencies of the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00581">581</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7d2eb23cc2a48fffbd41b38185bf29da"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const long * bitpit::Cell::getAdjacencies </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the adjacencies of the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The requested adjacencies </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00592">592</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a8e451a8f6f5a1f323bedb040231ad49f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long bitpit::Cell::getAdjacency </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>index</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the i-th adjacency of the specified face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
    <tr><td class="paramname">index</td><td>the index of the adjacency to retreive </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The requested adjacency. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00571">571</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa61245982eeb160544d260289840a04f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::getAdjacencyCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the total number of adjacencies of the cell.</p>
<p>The placeholder neighbour ids of the faces not acutally linked to a real neighbour will be counted as well.</p>
<dl class="section return"><dt>Returns</dt><dd>The total number of adjacencies of the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00545">545</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7da2a1823e64035caf534d9839ac23d3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::getAdjacencyCount </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the number of adjacencies of the specified face of the cell.</p>
<p>The placeholder neighbour ids of the faces not acutally linked to a real neighbours will be counted as well.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of adjacencies of the specified face of the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00559">559</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a3efeca8fc3ef399e0b5606a3da53f2b5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int bitpit::Cell::getBinarySize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the size of the buffer required to communicate cell.</p>
<dl class="section return"><dt>Returns</dt><dd>Returns the buffer size (in bytes). </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00782">782</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ab12abc7226f80ad99f9a7dd27129bd67"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long bitpit::Cell::getInterface </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>index</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the i-th interface of the specified face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
    <tr><td class="paramname">index</td><td>the index of the interface to retreive </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The requested interface. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="af95f90cb1619d65d3613603079bafe44"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::getInterfaceCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the total number of interfaces of the cell.</p>
<p>The placeholder interface ids of the faces not acutally linked to a real interfaces will be counted as well.</p>
<dl class="section return"><dt>Returns</dt><dd>The total number of interfaces of the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00324">324</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac5bc8a2a8a13be8c3b965549c0151ccd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::getInterfaceCount </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the number of interfaces of the specified face of the cell.</p>
<p>The placeholder interface ids of the faces not acutally linked to a real interfaces will be counted as well.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The number of interfaces of the specified face of the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00338">338</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1d1d296b0cec58f89ef47f51ce09b20b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const long * bitpit::Cell::getInterfaces </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets all the interfaces of the cell.</p>
<dl class="section return"><dt>Returns</dt><dd>The interfaces of the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00360">360</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="afab27ca10dcf3679c6197d6bed3c9b82"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const long * bitpit::Cell::getInterfaces </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the interfaces of the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The requested interfaces </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00371">371</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="abb72de49bdeaf2147973e2ae3720bf8e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::Cell::getPID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the PID associated to the cell.</p>
<dl class="section return"><dt>Returns</dt><dd>The PID associated to the cell. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00196">196</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="acdce9c67696da61a59d7fdf2a469ba01"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::initialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>interior</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>storeNeighbourhood</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Initializes the data structures of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">type</td><td>is the type of the element </td></tr>
    <tr><td class="paramname">interior</td><td>if true the cell is flagged as interior </td></tr>
    <tr><td class="paramname">storeNeighbourhood</td><td>if true the structures to store adjacencies and interfaces will be initialized </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00142">142</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a026d03c1f28550f8540cc5e103d822fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::Cell::isFaceBorder </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>face</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Checks if the specified face is a border.</p>
<dl class="section return"><dt>Returns</dt><dd>True if the face is a border, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00667">667</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5415789a8af4586940fa0fbc3e7d7f48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::Cell::isInterior </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets if the cells belongs to the the interior domain.</p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the cells belongs to the the interior domain, otherwise it returns false. </dd></dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00176">176</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a2012817de3f1f1ffb0540ad9e739d848"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; bitpit::Cell::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy assignament operator </p>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00123">123</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a703f2ce12319b53c6804c5d0b54a0ca1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::pushAdjacency </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>adjacency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add an adjacency to the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>is the face of the cell </td></tr>
    <tr><td class="paramname">adjacency</td><td>is the index of the adjacency that will be added </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00496">496</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa3582949c911b29f260cce92216b817b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::pushInterface </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>interface</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add an interface to the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>is the face of the cell </td></tr>
    <tr><td class="paramname">interface</td><td>is the index of the interface that will be added </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00275">275</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a8861022c6b169ba9aad2b6ed340c0254"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::resetAdjacencies </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>storeAdjacencies</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resets the adjacencies of the cell.</p>
<p>If the adjacencies are stored, there will always be at least one adjacency entry for each face. If a face is not linked with a neighbour, its entry needs to be set to the placeholder value NULL_ID. When multiple neighbours are linked to a face, all entries must point to valid cells.</p>
<p>The adjacency data structure can be prepared to store the neighbours only if the cell type is known.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">storeAdjacencies</td><td>if true the adjacency data structure will prepared to store the neighbours, otherwise the data structure will be cleared and it will not be possible to store neighbours. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00438">438</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a71e5b6426857ddee54a7ebf61f5b3b92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::resetInterfaces </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>storeInterfaces</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Resets the interfaces of the cell.</p>
<p>If the interfaces are stored, there will always be at least one interface entry for each face. If a face is not linked with an interface, its entry needs to be set to the placeholder value NULL_ID. When multiple interfaces are linked to a face, all entries must point to valid interfaces.</p>
<p>The interface data structure can be prepared to store the interfaces only if the cell type is known.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">storeInterfaces</td><td>if true the interface data structure will prepared to store the interfaces, otherwise the data structure will be cleared and it will not be possible to store interfaces. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00217">217</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa04b4ce52f7e4f30c9ea5b261e23be37"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::setAdjacencies </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; long &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>adjacencies</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets all the adjacencies of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">adjacencies</td><td>the list of all adjacencies associated to the cell </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00452">452</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad590d2251996ef44aad5c79fea68277f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::setAdjacency </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>adjacency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the i-th adjacency associated the the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
    <tr><td class="paramname">index</td><td>the index of the adjacency </td></tr>
    <tr><td class="paramname">adjacency</td><td>is the index of the adjacency </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00485">485</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac7b560774d2cf4d858d851ef77f6366a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::setInterface </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>face</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const long &amp;&#160;</td>
          <td class="paramname"><em>interface</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the i-th interface associated the the given face of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">face</td><td>the face of the cell </td></tr>
    <tr><td class="paramname">index</td><td>the index of the interface </td></tr>
    <tr><td class="paramname">interface</td><td>is the index of the interface </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00264">264</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a30edd43a587c9a0029165fb27e3dac77"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::setInterfaces </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; long &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>interfaces</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets all the interfaces of the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">interfaces</td><td>the list of all interfaces associated to the cell </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00231">231</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a34d99949ba9ea37374082bec49ff6934"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::setInterior </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>interior</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Sets if the cells belongs to the the interior domain.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">interior</td><td>defines if the cells belongs to the the interior domain </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00165">165</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a302ab8ea3ca4344314d563d273f0b320"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::Cell::setPID </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the PID associated to the cell.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pid</td><td>is the PID associated to the cell. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="cell_8cpp_source.xhtml#l00186">186</a> of file <a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/patchkernel/<a class="el" href="cell_8hpp_source.xhtml">cell.hpp</a></li>
<li>src/patchkernel/<a class="el" href="cell_8cpp_source.xhtml">cell.cpp</a></li>
</ul>
</div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

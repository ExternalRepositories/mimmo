
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - bitpit::RBF Class Reference</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>bitpit</b></li><li class="navelem"><a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classbitpit_1_1RBF-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">bitpit::RBF Class Reference<div class="ingroups"><a class="el" href="group__RBF.xhtml">RadialBasisFunctions</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>Handling of Radial Basis Function with a large set of nodes.  
 <a href="classbitpit_1_1RBF.xhtml#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a92f4053416fd5cd398d4b062b12ea34f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">m_maxFields</a></td></tr>
<tr class="separator:a92f4053416fd5cd398d4b062b12ea34f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b592c701b4d3557769d50e274e5d006"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::array<br class="typebreak"/>
&lt; double, 3 &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a></td></tr>
<tr class="separator:a9b592c701b4d3557769d50e274e5d006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c9ce5329079c33c583fd33121265e90"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector<br class="typebreak"/>
&lt; double &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a></td></tr>
<tr class="separator:a3c9ce5329079c33c583fd33121265e90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fd231f352c790186d3c2f3db6cadf43"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector<br class="typebreak"/>
&lt; double &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a></td></tr>
<tr class="separator:a1fd231f352c790186d3c2f3db6cadf43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05beb080163a1f663564cde967677fe5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a05beb080163a1f663564cde967677fe5">~RBF</a> ()</td></tr>
<tr class="separator:a05beb080163a1f663564cde967677fe5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7a389a44bafb0c9e8537a1f48cb5fc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a9f7a389a44bafb0c9e8537a1f48cb5fc">RBF</a> (<a class="el" href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">RBFBasisFunction</a>=RBFBasisFunction::WENDLANDC2)</td></tr>
<tr class="separator:a9f7a389a44bafb0c9e8537a1f48cb5fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23ba0cc51177833c151325189658d14b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a23ba0cc51177833c151325189658d14b">RBF</a> (const <a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp;other)</td></tr>
<tr class="separator:a23ba0cc51177833c151325189658d14b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb9258ab96749ee16c6e063a667401a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#abb9258ab96749ee16c6e063a667401a6">operator=</a> (const <a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp;other)</td></tr>
<tr class="separator:abb9258ab96749ee16c6e063a667401a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ff66321fc95da012630f3ca67168206"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">setFunction</a> (const <a class="el" href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">RBFBasisFunction</a> &amp;)</td></tr>
<tr class="separator:a7ff66321fc95da012630f3ca67168206"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af94579c5644c1ab566bc5abc5d5f5499"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#af94579c5644c1ab566bc5abc5d5f5499">setFunction</a> (double(&amp;funct)(const double &amp;))</td></tr>
<tr class="separator:af94579c5644c1ab566bc5abc5d5f5499"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28dc12bd016a3f4790e012cbf7662561"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a28dc12bd016a3f4790e012cbf7662561">getDataCount</a> ()</td></tr>
<tr class="separator:a28dc12bd016a3f4790e012cbf7662561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d6005e661015145e860d7736492e50d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">getActiveCount</a> ()</td></tr>
<tr class="separator:a6d6005e661015145e860d7736492e50d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52d14a26c8b0d5a12db9626ccdad5934"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a52d14a26c8b0d5a12db9626ccdad5934">getTotalNodesCount</a> ()</td></tr>
<tr class="separator:a52d14a26c8b0d5a12db9626ccdad5934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f123a42b009f821b65c40b118af0d92"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">getActiveSet</a> ()</td></tr>
<tr class="separator:a8f123a42b009f821b65c40b118af0d92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa317965660ba137ddcc47b9250b3defb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#aa317965660ba137ddcc47b9250b3defb">isActive</a> (const int &amp;)</td></tr>
<tr class="separator:aa317965660ba137ddcc47b9250b3defb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a350d405a94d582a07b7a267b654df121"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a350d405a94d582a07b7a267b654df121">activateNode</a> (const int &amp;)</td></tr>
<tr class="separator:a350d405a94d582a07b7a267b654df121"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bed4b37ef9d26295d9a62ebd829f518"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a2bed4b37ef9d26295d9a62ebd829f518">activateNode</a> (const std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:a2bed4b37ef9d26295d9a62ebd829f518"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8198e0b6535e512ef6736c01b903ac7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#ab8198e0b6535e512ef6736c01b903ac7">activateAllNodes</a> ()</td></tr>
<tr class="separator:ab8198e0b6535e512ef6736c01b903ac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3f1b0d74fd1f7a76a47d3d03af378f4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#aa3f1b0d74fd1f7a76a47d3d03af378f4">deactivateNode</a> (const int &amp;)</td></tr>
<tr class="separator:aa3f1b0d74fd1f7a76a47d3d03af378f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0916a44b160a107139347bdf620d877b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a0916a44b160a107139347bdf620d877b">deactivateNode</a> (const std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:a0916a44b160a107139347bdf620d877b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af392e15db5d7f51949d37a4ce7d755cb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#af392e15db5d7f51949d37a4ce7d755cb">deactivateAllNodes</a> ()</td></tr>
<tr class="separator:af392e15db5d7f51949d37a4ce7d755cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54452d4b63fc9d8c42a4fe5a6105d95b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a54452d4b63fc9d8c42a4fe5a6105d95b">setSupportRadius</a> (const double &amp;)</td></tr>
<tr class="separator:a54452d4b63fc9d8c42a4fe5a6105d95b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26fb7f094cf330b5327d0e3f1b8ba0a8"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a26fb7f094cf330b5327d0e3f1b8ba0a8">getSupportRadius</a> ()</td></tr>
<tr class="separator:a26fb7f094cf330b5327d0e3f1b8ba0a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a040b1750152006d3f786e0db8fa46d09"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a040b1750152006d3f786e0db8fa46d09">setMode</a> (<a class="el" href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">RBFMode</a> mode)</td></tr>
<tr class="separator:a040b1750152006d3f786e0db8fa46d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a568deeec3559afec4357e83bca414eae"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">RBFMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a568deeec3559afec4357e83bca414eae">getMode</a> ()</td></tr>
<tr class="separator:a568deeec3559afec4357e83bca414eae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bc0ee7870120b0d6ba0214c3871cd7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a4bc0ee7870120b0d6ba0214c3871cd7e">setDataToNode</a> (const int &amp;, const std::vector&lt; double &gt; &amp;)</td></tr>
<tr class="separator:a4bc0ee7870120b0d6ba0214c3871cd7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88dd64f51816cf1fa545a1de9ca65fda"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a88dd64f51816cf1fa545a1de9ca65fda">setDataToAllNodes</a> (const int &amp;, const std::vector&lt; double &gt; &amp;)</td></tr>
<tr class="separator:a88dd64f51816cf1fa545a1de9ca65fda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70fb2d737695522784160be5c7291c4c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a70fb2d737695522784160be5c7291c4c">addNode</a> (const std::array&lt; double, 3 &gt; &amp;)</td></tr>
<tr class="separator:a70fb2d737695522784160be5c7291c4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa15f0a605e2ef7596b1665b3f173c0ff"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#aa15f0a605e2ef7596b1665b3f173c0ff">addNode</a> (const std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;)</td></tr>
<tr class="separator:aa15f0a605e2ef7596b1665b3f173c0ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14c9d9cee0674fbf01c33c744bb53526"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a14c9d9cee0674fbf01c33c744bb53526">removeNode</a> (int)</td></tr>
<tr class="separator:a14c9d9cee0674fbf01c33c744bb53526"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c3d8a32ee7671eeff5a0b505c5e08b9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a5c3d8a32ee7671eeff5a0b505c5e08b9">removeNode</a> (std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:a5c3d8a32ee7671eeff5a0b505c5e08b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a540eb84fe8ae1f76714caf2c0346793a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a540eb84fe8ae1f76714caf2c0346793a">removeAllNodes</a> ()</td></tr>
<tr class="separator:a540eb84fe8ae1f76714caf2c0346793a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f4558c02c58f1065a21329f6b11faf4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a2f4558c02c58f1065a21329f6b11faf4">addData</a> ()</td></tr>
<tr class="separator:a2f4558c02c58f1065a21329f6b11faf4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4ad660390c877d979ded20f9410459f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#ab4ad660390c877d979ded20f9410459f">addData</a> (const std::vector&lt; double &gt; &amp;)</td></tr>
<tr class="separator:ab4ad660390c877d979ded20f9410459f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07f7102bb895acff926fbb2190b93811"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a07f7102bb895acff926fbb2190b93811">removeData</a> (int)</td></tr>
<tr class="separator:a07f7102bb895acff926fbb2190b93811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa34d2627256eb0aba1d410dce86efffc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#aa34d2627256eb0aba1d410dce86efffc">removeData</a> (std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:aa34d2627256eb0aba1d410dce86efffc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada4a0c22e73da9f5fd98b2276788ba93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#ada4a0c22e73da9f5fd98b2276788ba93">removeAllData</a> ()</td></tr>
<tr class="separator:ada4a0c22e73da9f5fd98b2276788ba93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a081331639259f567399c803452cc51e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">fitDataToNodes</a> ()</td></tr>
<tr class="separator:a081331639259f567399c803452cc51e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa9071da675cb021a380916b43b21fff"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#aaa9071da675cb021a380916b43b21fff">fitDataToNodes</a> (int)</td></tr>
<tr class="separator:aaa9071da675cb021a380916b43b21fff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aade7b6d4d986c42647b61f905aa17b99"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#aade7b6d4d986c42647b61f905aa17b99">evalRBF</a> (const std::array&lt; double, 3 &gt; &amp;)</td></tr>
<tr class="separator:aade7b6d4d986c42647b61f905aa17b99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a901ba117bec44b2f76749d8594e3f141"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">evalBasis</a> (const double &amp;)</td></tr>
<tr class="separator:a901ba117bec44b2f76749d8594e3f141"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0be260a62cbfff2a3d3dfee7f46e6684"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a0be260a62cbfff2a3d3dfee7f46e6684">solve</a> ()</td></tr>
<tr class="separator:a0be260a62cbfff2a3d3dfee7f46e6684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55f883989fe460bb597c47037d356a52"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a55f883989fe460bb597c47037d356a52">greedy</a> (const double &amp;)</td></tr>
<tr class="separator:a55f883989fe460bb597c47037d356a52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3d4feea16d2d9e0e2063c6a7c699268"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#ae3d4feea16d2d9e0e2063c6a7c699268">evalError</a> ()</td></tr>
<tr class="separator:ae3d4feea16d2d9e0e2063c6a7c699268"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70fffda108af8e0f3ac1e0226aea6384"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a70fffda108af8e0f3ac1e0226aea6384">addGreedyPoint</a> ()</td></tr>
<tr class="separator:a70fffda108af8e0f3ac1e0226aea6384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46c645b54820c91087a1ec3b69d2ade3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1RBF.xhtml#a46c645b54820c91087a1ec3b69d2ade3">solveLSQ</a> ()</td></tr>
<tr class="separator:a46c645b54820c91087a1ec3b69d2ade3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Handling of Radial Basis Function with a large set of nodes. </p>
<p>The class can be used in two different ways:</p>
<ul>
<li>as interpolator, given a set of external fields</li>
<li>as parameterizator, directly modifying the weights of rbf kernels.</li>
</ul>
<p>The User can switch between modes, according to its needs. Some internal methods of the class can change their behaviour according to the class mode selected. Please check documentation of each single method to appreciate the differences. Default mode of the class is the "INTERP" RBFMode </p>

<p>Definition at line <a class="el" href="rbf_8hpp_source.xhtml#l00059">59</a> of file <a class="el" href="rbf_8hpp_source.xhtml">rbf.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a05beb080163a1f663564cde967677fe5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::RBF::~RBF </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Destructor </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9f7a389a44bafb0c9e8537a1f48cb5fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::RBF::RBF </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">RBFBasisFunction</a>&#160;</td>
          <td class="paramname"><em>bfunc</em> = <code>RBFBasisFunction::WENDLANDC2</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Default constructor. Requires optionally statements of type of RBFBasisFunction which must be used. RBFMode is INTERP, by default. Use RBFMode::setMode for changing it. </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a23ba0cc51177833c151325189658d14b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::RBF::RBF </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy Constructor </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00084">84</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ab8198e0b6535e512ef6736c01b903ac7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::activateAllNodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Activate all nodes actually available in your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list. Supported in both modes. </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00237">237</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a350d405a94d582a07b7a267b654df121"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::activateNode </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Activate a node in your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>index of node to be activated </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if node is activated successfully, false if not </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00211">211</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a2bed4b37ef9d26295d9a62ebd829f518"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::activateNode </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Activate a node ensamble in your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">list</td><td>list of node indices to be activated </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if all nodes are activated successfully, false if at least one of them is not </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00225">225</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a2f4558c02c58f1065a21329f6b11faf4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::addData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Increment container size for <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> control data.The <a class="el" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">RBF::fitDataToNodes()</a> method is implicitly called, to ensure dimension consistency between data dimension and number of <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes. Use <a class="el" href="classbitpit_1_1RBF.xhtml#a88dd64f51816cf1fa545a1de9ca65fda">RBF::setDataToAllNodes</a> to fill them. In INTERP mode, increments and fits fields container, in PARAM mode, the weights one. </p>
<dl class="section return"><dt>Returns</dt><dd>id of virtual data within the class </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00466">466</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ab4ad660390c877d979ded20f9410459f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::addData </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds data attached to <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes to current set, a field to be interpolated in INTERP mode, a <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weight component in PARAM mode. Note: data vector is added even if its size is different from actual number of <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes. To ensure consistency use <a class="el" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">fitDataToNodes()</a> method.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>values of weight/fields for each <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>id of data within the class </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00486">486</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a70fffda108af8e0f3ac1e0226aea6384"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::addGreedyPoint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Determines which node has to be added to active set. Supported only in INTERP mode. </p>
<dl class="section return"><dt>Returns</dt><dd>index with max error; if no index available, or dummy call -1 is returned </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00758">758</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a70fb2d737695522784160be5c7291c4c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::addNode </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds a <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node and sets it to active. Does not manage duplicated nodes. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>coordinates of node to be added </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>id of node within class </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00378">378</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa15f0a605e2ef7596b1665b3f173c0ff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int &gt; bitpit::RBF::addNode </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds a list of <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes and sets them to active. Does not manage duplicated nodes. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">node</td><td>coordinates of nodes to be added </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>id of node within class </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00391">391</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="af392e15db5d7f51949d37a4ce7d755cb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::deactivateAllNodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deactivate all nodes actually available in your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list. Supported in both modes. </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00273">273</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa3f1b0d74fd1f7a76a47d3d03af378f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::deactivateNode </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deactivate a node in your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>index of node to be dactivated </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if node is activated successfully, false if not </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00248">248</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a0916a44b160a107139347bdf620d877b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::deactivateNode </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deactivate a node ensamble in your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">list</td><td>list of node indices to be deactivated </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if all nodes are deactivated successfully, false if at least one of them is not </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00262">262</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a901ba117bec44b2f76749d8594e3f141"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::RBF::evalBasis </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>dist</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Evaluates the basis function. Supported in both modes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">dist</td><td>distance </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>value of basis function </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00749">749</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae3d4feea16d2d9e0e2063c6a7c699268"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::RBF::evalError </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Calculates the relative error between rbf interpolation and exact values at nodes. Supported only in INTERP mode. </p>
<dl class="section return"><dt>Returns</dt><dd>max error, if lesser then 0, dummy call triggered. </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00800">800</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aade7b6d4d986c42647b61f905aa17b99"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; double &gt; bitpit::RBF::evalRBF </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>point</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Evaluates the <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a>. Supported in both modes. Its size matches the number of fields/weights attached to <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">point</td><td>point where to evaluate the basis </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>vector containing interpolated/parameterized values. </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00559">559</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a081331639259f567399c803452cc51e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::fitDataToNodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check dimensions of already available data and resize them to current <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list dimension. The method resizes all data structures to current <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list dimension and does not destroy any previous stored data within such dimension. Anyway, mismatches definitions could occur. Please use RBF::setDataToAllNodesto load your data again. In RBFMode::PARAM mode data are meant as <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weights In RBFMode::INTERP mode data are meant as fields to be interpolated </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00719">719</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aaa9071da675cb021a380916b43b21fff"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::fitDataToNodes </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Check dimensions id-th data and resize it to current <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list dimension. The method resizes id-th data structure to current <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> node list dimension and does not destroy any previous stored data within such dimension. Anyway, mismatches definitions could occur. Please use <a class="el" href="classbitpit_1_1RBF.xhtml#a88dd64f51816cf1fa545a1de9ca65fda">RBF::setDataToAllNodes</a> to load your data again. In RBFMode::PARAM mode data are meant as <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weights In RBFMode::INTERP mode data are meant as fields to be interpolated </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>id of data </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00736">736</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a6d6005e661015145e860d7736492e50d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::getActiveCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the number of active nodes. Supported in both nodes </p>
<dl class="section return"><dt>Returns</dt><dd>number of active nodes </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a8f123a42b009f821b65c40b118af0d92"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; int &gt; bitpit::RBF::getActiveSet </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the indices of the active nodes. Supported in both modes. </p>
<dl class="section return"><dt>Returns</dt><dd>indices of active nodes </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00181">181</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a28dc12bd016a3f4790e012cbf7662561"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::getDataCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the number of data set attached to <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes. In INTERP mode, it is the number of different field that need to be interpolated; In PARAM mode, it identifies the dimension of the weights array for each node. </p>
<dl class="section return"><dt>Returns</dt><dd>number of data </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00149">149</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a568deeec3559afec4357e83bca414eae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">RBFMode</a> bitpit::RBF::getMode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return currently usage mode of your class. </p>
<dl class="section return"><dt>Returns</dt><dd>class mode </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00301">301</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a26fb7f094cf330b5327d0e3f1b8ba0a8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::RBF::getSupportRadius </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return currently set support radius used by all <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> kernel functions. Supported in both modes. </p>
<dl class="section return"><dt>Returns</dt><dd>support radius </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00293">293</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a52d14a26c8b0d5a12db9626ccdad5934"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::getTotalNodesCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Gets the total number of nodes, active or not. Supported in both modes. </p>
<dl class="section return"><dt>Returns</dt><dd>number of available <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00173">173</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a55f883989fe460bb597c47037d356a52"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::greedy </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>tolerance</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Determines effective set of nodes to be used using greedy algorithm and calculate weights on them. Automatically choose which set of <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes is active or not, according to the given tolerance. Supported ONLY in INTERP mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tolerance</td><td>error tolerance for adding nodes </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>integer error flag . If 0-successfull computation and tolerance met, if 1-errors occurred, not enough nodes, if -1 dummy method call </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00664">664</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa317965660ba137ddcc47b9250b3defb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::isActive </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Checks if a node is active. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>index of node to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if active </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00202">202</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="abb9258ab96749ee16c6e063a667401a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp; bitpit::RBF::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy Operator </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00091">91</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ada4a0c22e73da9f5fd98b2276788ba93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::removeAllData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove all data set in <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodal list. All fields for interpolation in INTERP mode, or all <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weights for PARAM mode </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00544">544</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a540eb84fe8ae1f76714caf2c0346793a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::removeAllNodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove all nodes in <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodal list. Supported in both modes. </p>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00452">452</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a07f7102bb895acff926fbb2190b93811"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::removeData </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove pre-existent data set. Data list is resized and renumbered after extraction. Remove fields to be interpolated in INTERP mode, weights component in PARAM mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>id of node </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if successfully extracted, false otherwise </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00504">504</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa34d2627256eb0aba1d410dce86efffc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::removeData </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove pre-existent set of data. <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> Data list is resized and renumbered after extraction. In RBFType::PARAM mode data are meant as <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weights In RBFType::INTERP mode data are meant as fields to be interpolated</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">list</td><td>id list of candidates to extraction </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if all data set are successfully extracted, false if any of them are not extracted </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00521">521</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a14c9d9cee0674fbf01c33c744bb53526"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::removeNode </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove pre-existent node. <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> Node list is resized and renumbered after extraction. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>id of node </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if successfully extracted, false otherwise </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00416">416</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5c3d8a32ee7671eeff5a0b505c5e08b9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::RBF::removeNode </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove pre-existent set of nodes. <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodal list is resized and renumbered after extraction. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">list</td><td>id list of candidates to extraction </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean, true if all nodes are successfully extracted, false if any of them or none are extracted </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00431">431</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a88dd64f51816cf1fa545a1de9ca65fda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::setDataToAllNodes </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the values of a data set to all currently available nodes. In INTERP mode, set one field to all nodes In PARAM mode, set one weight array component for all nodes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>id of data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>data values </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00351">351</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a4bc0ee7870120b0d6ba0214c3871cd7e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::setDataToNode </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>id</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets all the type of available data at one node. In INTERP mode, set each field value at the target node In PARAM mode, set the weight coefficient array at node </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">id</td><td>id of node </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">value</td><td>data values to be set as <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> parameters for the given node </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00320">320</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7ff66321fc95da012630f3ca67168206"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::setFunction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">RBFBasisFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>bfunc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the rbf function to be used. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bfunc</td><td>basis function to be used </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="af94579c5644c1ab566bc5abc5d5f5499"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::setFunction </td>
          <td>(</td>
          <td class="paramtype">double(&amp;)(const double &amp;)&#160;</td>
          <td class="paramname"><em>bfunc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets the rbf function to a user specified function. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bfunc</td><td>basis function to be used </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a040b1750152006d3f786e0db8fa46d09"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::setMode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">RBFMode</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set usage mode of your class. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>class mode. Ref to RBFMode enum </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00309">309</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a54452d4b63fc9d8c42a4fe5a6105d95b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::RBF::setSupportRadius </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>radius</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the support radius of all <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> kernel functions. Supported in both modes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">radius</td><td>support radius </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00283">283</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a0be260a62cbfff2a3d3dfee7f46e6684"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::solve </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Calculates the <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weights using all currently active nodes and just given target fields. Regular LU solver for linear system A*X=B is employed (LAPACKE dgesv). Supported ONLY in INTERP mode.</p>
<dl class="section return"><dt>Returns</dt><dd>integer error flag . If 0-successfull computation, if 1-errors occurred, if -1 dummy method call </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00588">588</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a46c645b54820c91087a1ec3b69d2ade3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::solveLSQ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Calculates the <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> weights using all active nodes and just given target fields. Compute weights as solution of a linear least squares problem (LAPACKE dglsd). Supported ONLY in INTERP mode. </p>
<dl class="section return"><dt>Returns</dt><dd>integer error flag . If 0-successfull computation, if 1-errors occurred , -1 dummy call </dd></dl>

<p>Definition at line <a class="el" href="rbf_8cpp_source.xhtml#l00844">844</a> of file <a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a92f4053416fd5cd398d4b062b12ea34f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int bitpit::RBF::m_maxFields</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>fix the maximum number of fields that can be added to your class </p>

<p>Definition at line <a class="el" href="rbf_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="rbf_8hpp_source.xhtml">rbf.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9b592c701b4d3557769d50e274e5d006"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::array&lt;double,3&gt; &gt; bitpit::RBF::m_node</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>list of <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes </p>

<p>Definition at line <a class="el" href="rbf_8hpp_source.xhtml#l00077">77</a> of file <a class="el" href="rbf_8hpp_source.xhtml">rbf.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a3c9ce5329079c33c583fd33121265e90"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;double&gt; &gt; bitpit::RBF::m_value</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>displ value to be interpolated on <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> nodes </p>

<p>Definition at line <a class="el" href="rbf_8hpp_source.xhtml#l00074">74</a> of file <a class="el" href="rbf_8hpp_source.xhtml">rbf.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1fd231f352c790186d3c2f3db6cadf43"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;double&gt; &gt; bitpit::RBF::m_weight</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>weight of your <a class="el" href="classbitpit_1_1RBF.xhtml" title="Handling of Radial Basis Function with a large set of nodes. ">RBF</a> interpolation </p>

<p>Definition at line <a class="el" href="rbf_8hpp_source.xhtml#l00075">75</a> of file <a class="el" href="rbf_8hpp_source.xhtml">rbf.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/RBF/<a class="el" href="rbf_8hpp_source.xhtml">rbf.hpp</a></li>
<li>src/RBF/<a class="el" href="rbf_8cpp_source.xhtml">rbf.cpp</a></li>
</ul>
</div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - bitpit::STLObj Class Reference</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>bitpit</b></li><li class="navelem"><a class="el" href="classbitpit_1_1STLObj.xhtml">STLObj</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classbitpit_1_1STLObj-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">bitpit::STLObj Class Reference<div class="ingroups"><a class="el" href="group__STereoLithography.xhtml">STereoLithography (STL)</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classbitpit_1_1Interface.xhtml" title="The Interface class defines the interfaces among cells. ">Interface</a> to STL I/O function.  
 <a href="classbitpit_1_1STLObj.xhtml#details">More...</a></p>
<div class="dynheader">
Collaboration diagram for bitpit::STLObj:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classbitpit_1_1STLObj__coll__graph.svg" width="123" height="128"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1addab2a7a9050868f73406c21334482"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1addab2a7a9050868f73406c21334482"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>STLObj</b> (std::string, bool)</td></tr>
<tr class="separator:a1addab2a7a9050868f73406c21334482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7855eb98ea5ef7b9ad7b3cb90506ef9"><td class="memTemplParams" colspan="2"><a class="anchor" id="ae7855eb98ea5ef7b9ad7b3cb90506ef9"></a>
template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:ae7855eb98ea5ef7b9ad7b3cb90506ef9"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>append</b> (std::string, int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;, T2 &amp;...)</td></tr>
<tr class="separator:ae7855eb98ea5ef7b9ad7b3cb90506ef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f6ae5fd9e0c5921c3b60e45ff6a52a3"><td class="memTemplParams" colspan="2"><a class="anchor" id="a2f6ae5fd9e0c5921c3b60e45ff6a52a3"></a>
template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a2f6ae5fd9e0c5921c3b60e45ff6a52a3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>append</b> (std::string, int &amp;, int &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;, T2 &amp;...)</td></tr>
<tr class="separator:a2f6ae5fd9e0c5921c3b60e45ff6a52a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb30160b20ed1aa6f67c3fc557cf45cd"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:abb30160b20ed1aa6f67c3fc557cf45cd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#abb30160b20ed1aa6f67c3fc557cf45cd">append</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;V, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:abb30160b20ed1aa6f67c3fc557cf45cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb30160b20ed1aa6f67c3fc557cf45cd"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:abb30160b20ed1aa6f67c3fc557cf45cd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#abb30160b20ed1aa6f67c3fc557cf45cd">append</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;V, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:abb30160b20ed1aa6f67c3fc557cf45cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2d32a2c68745276689423c0b6c9990"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:aaa2d32a2c68745276689423c0b6c9990"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#aaa2d32a2c68745276689423c0b6c9990">append</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;V, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:aaa2d32a2c68745276689423c0b6c9990"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa2d32a2c68745276689423c0b6c9990"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:aaa2d32a2c68745276689423c0b6c9990"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#aaa2d32a2c68745276689423c0b6c9990">append</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;V, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:aaa2d32a2c68745276689423c0b6c9990"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aaff94cf0887f16e8cd578abd6b7a91"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a7aaff94cf0887f16e8cd578abd6b7a91"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a7aaff94cf0887f16e8cd578abd6b7a91">load</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;V, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:a7aaff94cf0887f16e8cd578abd6b7a91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aaff94cf0887f16e8cd578abd6b7a91"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a7aaff94cf0887f16e8cd578abd6b7a91"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a7aaff94cf0887f16e8cd578abd6b7a91">load</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;V, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:a7aaff94cf0887f16e8cd578abd6b7a91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ab0ef3991daf4977840ece96e028ebb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1ab0ef3991daf4977840ece96e028ebb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>load</b> (int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>
<tr class="separator:a1ab0ef3991daf4977840ece96e028ebb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab07ddfe1fe1c67dfd7090c35a1a8d1b0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab07ddfe1fe1c67dfd7090c35a1a8d1b0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>load</b> (int &amp;, int &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>
<tr class="separator:ab07ddfe1fe1c67dfd7090c35a1a8d1b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a928e6a32f8c07cb73d01831771c8802f"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a928e6a32f8c07cb73d01831771c8802f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a928e6a32f8c07cb73d01831771c8802f">load</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;V, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:a928e6a32f8c07cb73d01831771c8802f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a928e6a32f8c07cb73d01831771c8802f"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a928e6a32f8c07cb73d01831771c8802f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a928e6a32f8c07cb73d01831771c8802f">load</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;V, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:a928e6a32f8c07cb73d01831771c8802f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2beb783545b2bc8e830131693243b94"><td class="memTemplParams" colspan="2"><a class="anchor" id="ad2beb783545b2bc8e830131693243b94"></a>
template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:ad2beb783545b2bc8e830131693243b94"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>load</b> (std::string, int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;, T2 &amp;...)</td></tr>
<tr class="separator:ad2beb783545b2bc8e830131693243b94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a382a49b4c05452ef90b8aedac298c2f5"><td class="memTemplParams" colspan="2"><a class="anchor" id="a382a49b4c05452ef90b8aedac298c2f5"></a>
template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a382a49b4c05452ef90b8aedac298c2f5"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>load</b> (std::string, int &amp;, int &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;, T2 &amp;...)</td></tr>
<tr class="separator:a382a49b4c05452ef90b8aedac298c2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accd9c4158acaceda62015dd96c77f145"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="accd9c4158acaceda62015dd96c77f145"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>loadSolid</b> (int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>
<tr class="separator:accd9c4158acaceda62015dd96c77f145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a409c563c38a0d8bd78635c0903c2f353"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a409c563c38a0d8bd78635c0903c2f353"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>loadSolid</b> (int &amp;, int &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>
<tr class="separator:a409c563c38a0d8bd78635c0903c2f353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a672dd95fa44dd1506bf3e96280df34c4"><td class="memTemplParams" colspan="2"><a class="anchor" id="a672dd95fa44dd1506bf3e96280df34c4"></a>
template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a672dd95fa44dd1506bf3e96280df34c4"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>save</b> (std::string, int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;, T2 &amp;...)</td></tr>
<tr class="separator:a672dd95fa44dd1506bf3e96280df34c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a595b5e69af3903fe476180258fb523d6"><td class="memTemplParams" colspan="2"><a class="anchor" id="a595b5e69af3903fe476180258fb523d6"></a>
template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a595b5e69af3903fe476180258fb523d6"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>save</b> (std::string, int &amp;, int &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;, T2 &amp;...)</td></tr>
<tr class="separator:a595b5e69af3903fe476180258fb523d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd7ff03752f3cb1f81381d99183ae63"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a7dd7ff03752f3cb1f81381d99183ae63"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a7dd7ff03752f3cb1f81381d99183ae63">save</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;V, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:a7dd7ff03752f3cb1f81381d99183ae63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dd7ff03752f3cb1f81381d99183ae63"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:a7dd7ff03752f3cb1f81381d99183ae63"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a7dd7ff03752f3cb1f81381d99183ae63">save</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;V, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:a7dd7ff03752f3cb1f81381d99183ae63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afecd7b36c7f6601c8f23b287b70be396"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:afecd7b36c7f6601c8f23b287b70be396"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#afecd7b36c7f6601c8f23b287b70be396">save</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;V, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:afecd7b36c7f6601c8f23b287b70be396"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afecd7b36c7f6601c8f23b287b70be396"><td class="memTemplParams" colspan="2">template&lt;typename... T2&gt; </td></tr>
<tr class="memitem:afecd7b36c7f6601c8f23b287b70be396"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#afecd7b36c7f6601c8f23b287b70be396">save</a> (std::string sname, int &amp;nV, int &amp;nT, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;V, std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;N, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;T, T2 &amp;...others)</td></tr>
<tr class="separator:afecd7b36c7f6601c8f23b287b70be396"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ad9e2308d54a92e496f448708fd917385"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structbitpit_1_1STLData.xhtml">STLData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#ad9e2308d54a92e496f448708fd917385">data</a></td></tr>
<tr class="separator:ad9e2308d54a92e496f448708fd917385"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1621bb92f4ab3e4be1c518f19abf7ae9"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a1621bb92f4ab3e4be1c518f19abf7ae9">err</a></td></tr>
<tr class="separator:a1621bb92f4ab3e4be1c518f19abf7ae9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf1e490a596f1bdfec7fec36fcf36226"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; bool &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#abf1e490a596f1bdfec7fec36fcf36226">stl_errors</a></td></tr>
<tr class="separator:abf1e490a596f1bdfec7fec36fcf36226"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27dcc864f978ac656b5c5c921519ea5a"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a27dcc864f978ac656b5c5c921519ea5a">stl_name</a></td></tr>
<tr class="separator:a27dcc864f978ac656b5c5c921519ea5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac517b4e54e9f6f80ab42d276dd819453"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#ac517b4e54e9f6f80ab42d276dd819453">stl_type</a></td></tr>
<tr class="separator:ac517b4e54e9f6f80ab42d276dd819453"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7460a1d4050b8d0f50b8da0962284dde"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a7460a1d4050b8d0f50b8da0962284dde">STLObj</a> (void)</td></tr>
<tr class="separator:a7460a1d4050b8d0f50b8da0962284dde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfec49d789f5092ba38030b644f13649"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#adfec49d789f5092ba38030b644f13649">open</a> (std::string)</td></tr>
<tr class="separator:adfec49d789f5092ba38030b644f13649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd51f8f6353d0f9480b8fb9dcdad07d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a9fd51f8f6353d0f9480b8fb9dcdad07d">close</a> (std::string mode=&quot;&quot;)</td></tr>
<tr class="separator:a9fd51f8f6353d0f9480b8fb9dcdad07d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a535bae300d0e85a88bc8d073c8654cad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a535bae300d0e85a88bc8d073c8654cad">display</a> (std::ostream &amp;)</td></tr>
<tr class="separator:a535bae300d0e85a88bc8d073c8654cad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba9f04fc03e3802067669213ee38b077"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#aba9f04fc03e3802067669213ee38b077">clear</a> (void)</td></tr>
<tr class="separator:aba9f04fc03e3802067669213ee38b077"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5972c622046c05e55f50db6753aa73ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#a5972c622046c05e55f50db6753aa73ef">scan</a> (void)</td></tr>
<tr class="separator:a5972c622046c05e55f50db6753aa73ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acea4de6336f9c51365ab64fcf9dc124f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classbitpit_1_1STLObj.xhtml#acea4de6336f9c51365ab64fcf9dc124f">check</a> (void)</td></tr>
<tr class="separator:acea4de6336f9c51365ab64fcf9dc124f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classbitpit_1_1Interface.xhtml" title="The Interface class defines the interfaces among cells. ">Interface</a> to STL I/O function. </p>
<p>This class has been designed to allow an easy interface between end-user and STL I/O functions. </p>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00066">66</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a7460a1d4050b8d0f50b8da0962284dde"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bitpit::STLObj::STLObj </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Default constructor for class <a class="el" href="classbitpit_1_1STLObj.xhtml" title="Interface to STL I/O function. ">STLObj</a>.</p>
<p>Initialize an empty interface to stl file. </p>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00074">74</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="abb30160b20ed1aa6f67c3fc557cf45cd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::append </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append solid data at the end of an existing stl ascii file.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T2</td><td>vriadic template </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8tpp_source.xhtml#l00306">306</a> of file <a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="abb30160b20ed1aa6f67c3fc557cf45cd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::append </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append solid data at the end of an existing stl ascii file.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T2</td><td>vriadic template </td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00307">307</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="aaa2d32a2c68745276689423c0b6c9990"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::append </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append solid data at the end of an existing stl ascii file. Overloading of member function STLObj::append() for container vector&lt;array&lt;double, 3&gt; &gt;.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8tpp_source.xhtml#l00359">359</a> of file <a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="aaa2d32a2c68745276689423c0b6c9990"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::append </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Append solid data at the end of an existing stl ascii file. Overloading of member function STLObj::append() for container vector&lt;array&lt;double, 3&gt; &gt;.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00360">360</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="acea4de6336f9c51365ab64fcf9dc124f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::check </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scan and check for format errors in the stl file associated to the interface </p>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00432">432</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aba9f04fc03e3802067669213ee38b077"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Clear info and error flags gathered on the stl file associated to the interface. </p>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00272">272</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9fd51f8f6353d0f9480b8fb9dcdad07d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::close </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>mode</em> = <code>&quot;&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Close the current stream to stl file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>opening mode used to open stream ("in": input, "out": output, "app": append) </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00232">232</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a535bae300d0e85a88bc8d073c8654cad"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::display </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Display info gathered on the stl file associated to the interface.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">out</td><td>output stream </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00312">312</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7aaff94cf0887f16e8cd578abd6b7a91"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::load </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Load data for solid with specified label from stl ascii file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. If empty label is specified (i.e. sname = ""), data of the first solid encountered in the stl file is returned. If no solid is found with the specified label, no data are loaded from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>on input stores the current number of vertices hosted in V. On output stores the input values incremented by the number of vertices acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>on input stores the number of facet-&gt;vertex connectivity entries stores in T. On output stores the input value incremented by the number of facets acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. On output stores the coordinates of vertices vertices acquired from the stl file. New vertices are appended at the end of V. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. On output stores the normal unit vector to each facet acquired from the stl file. New normals are appended at the end of N. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. On output stores the facet-&gt;vertex connectivity entries for the facets acquired from the stl file. New connectivity entries are appended at the end of T. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8tpp_source.xhtml#l00075">75</a> of file <a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7aaff94cf0887f16e8cd578abd6b7a91"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::load </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Load data for solid with specified label from stl ascii file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. If empty label is specified (i.e. sname = ""), data of the first solid encountered in the stl file is returned. If no solid is found with the specified label, no data are loaded from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>on input stores the current number of vertices hosted in V. On output stores the input values incremented by the number of vertices acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>on input stores the number of facet-&gt;vertex connectivity entries stores in T. On output stores the input value incremented by the number of facets acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. On output stores the coordinates of vertices vertices acquired from the stl file. New vertices are appended at the end of V. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. On output stores the normal unit vector to each facet acquired from the stl file. New normals are appended at the end of N. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. On output stores the facet-&gt;vertex connectivity entries for the facets acquired from the stl file. New connectivity entries are appended at the end of T. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a928e6a32f8c07cb73d01831771c8802f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::load </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Load data for solid with specified label from stl ascii file. Overloading of member function STLObj::load() for container vector&lt;array&lt;double, 3&gt; &gt;</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. If empty label is specified (i.e. sname = ""), data of the first solid encountered in the stl file is returned. If no solid is found with the specified label, no data are loaded from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>on input stores the current number of vertices hosted in V. On output stores the input values incremented by the number of vertices acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>on input stores the number of facet-&gt;vertex connectivity entries stores in T. On output stores the input value incremented by the number of facets acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. On output stores the coordinates of vertices vertices acquired from the stl file. New vertices are appended at the end of V. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. On output stores the normal unit vector to each facet acquired from the stl file. New normals are appended at the end of N. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. On output stores the facet-&gt;vertex connectivity entries for the facets acquired from the stl file. New connectivity entries are appended at the end of T. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8tpp_source.xhtml#l00144">144</a> of file <a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="a928e6a32f8c07cb73d01831771c8802f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::load </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Load data for solid with specified label from stl ascii file. Overloading of member function STLObj::load() for container vector&lt;array&lt;double, 3&gt; &gt;</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. If empty label is specified (i.e. sname = ""), data of the first solid encountered in the stl file is returned. If no solid is found with the specified label, no data are loaded from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>on input stores the current number of vertices hosted in V. On output stores the input values incremented by the number of vertices acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>on input stores the number of facet-&gt;vertex connectivity entries stores in T. On output stores the input value incremented by the number of facets acquired from the stl file. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. On output stores the coordinates of vertices vertices acquired from the stl file. New vertices are appended at the end of V. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. On output stores the normal unit vector to each facet acquired from the stl file. New normals are appended at the end of N. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. On output stores the facet-&gt;vertex connectivity entries for the facets acquired from the stl file. New connectivity entries are appended at the end of T. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00145">145</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="adfec49d789f5092ba38030b644f13649"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::open </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Open the file associated to the interface.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mode</td><td>opening mode ("in": input, "out": output, "app": append mode) </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00151">151</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7dd7ff03752f3cb1f81381d99183ae63"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::save </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Save solid data to stl ascii file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8tpp_source.xhtml#l00200">200</a> of file <a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7dd7ff03752f3cb1f81381d99183ae63"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::save </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Save solid data to stl ascii file.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00201">201</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="afecd7b36c7f6601c8f23b287b70be396"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::save </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Save solid data to stl ascii file. Overloading of member function STLObj::save() for container vector&lt;array&lt;double, 3&gt; &gt;</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8tpp_source.xhtml#l00253">253</a> of file <a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="afecd7b36c7f6601c8f23b287b70be396"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename... T2&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::save </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nV</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>N</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T2 &amp;...&#160;</td>
          <td class="paramname"><em>others</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Save solid data to stl ascii file. Overloading of member function STLObj::save() for container vector&lt;array&lt;double, 3&gt; &gt;</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">sname</td><td>label associated to the solid. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nV</td><td>number of solid vertices. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">nT</td><td>number of solid facets. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">V</td><td>vertex coordinates list. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">N</td><td>facet normals. </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">T</td><td>facet-&gt;vertex connectivity. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">others</td><td>parameter packs </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00254">254</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5972c622046c05e55f50db6753aa73ef"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::STLObj::scan </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scan and gather info from the stl file associated to the interface </p>

<p>Definition at line <a class="el" href="STL_8cpp_source.xhtml#l00385">385</a> of file <a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="ad9e2308d54a92e496f448708fd917385"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structbitpit_1_1STLData.xhtml">STLData</a> bitpit::STLObj::data</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>stl data </p>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00080">80</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1621bb92f4ab3e4be1c518f19abf7ae9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int bitpit::STLObj::err</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>general error </p>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00076">76</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="abf1e490a596f1bdfec7fec36fcf36226"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;bool&gt; &gt; bitpit::STLObj::stl_errors</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>error flags for each stl solid </p>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00079">79</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a27dcc864f978ac656b5c5c921519ea5a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string bitpit::STLObj::stl_name</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>stl file name </p>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00072">72</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac517b4e54e9f6f80ab42d276dd819453"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::STLObj::stl_type</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>flag for binary/ASCII stl file </p>

<p>Definition at line <a class="el" href="STL_8hpp_source.xhtml#l00073">73</a> of file <a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/IO/<a class="el" href="STL_8hpp_source.xhtml">STL.hpp</a></li>
<li>src/IO/<a class="el" href="STL_8cpp_source.xhtml">STL.cpp</a></li>
<li>src/IO/<a class="el" href="STL_8tpp_source.xhtml">STL.tpp</a></li>
</ul>
</div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

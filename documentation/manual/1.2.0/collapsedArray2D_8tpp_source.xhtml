
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/containers/collapsedArray2D.tpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0b61c55142250c0cc363383afd8075a4.xhtml">containers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">collapsedArray2D.tpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Written by Andrea Iob &lt;andrea_iob@hotmail.com&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#ifndef __BITPIT_COLLAPSED_ARRAY_2D_HPP__</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __BITPIT_COLLAPSED_ARRAY_2D_HPP__</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include&lt;iostream&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml">   55</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml">CollapsedArray2D</a></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a9fdcdf2ace0c82b1f3e142d790c10b71">   63</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a9fdcdf2ace0c82b1f3e142d790c10b71">CollapsedArray2D</a>()</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        : m_capacity(-1)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a07c5f9ca9b4b5a1469f5379db431da0a">   71</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a07c5f9ca9b4b5a1469f5379db431da0a">~CollapsedArray2D</a>()</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#aca5c798b72c08b596fcca66b12cb88c9">clear</a>();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a75a4b9332e7ec7a5b0fb1ef74f1589fa">   84</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a75a4b9332e7ec7a5b0fb1ef74f1589fa">CollapsedArray2D</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nArrays, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dataCapacity)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a740cdbc2c501aca9227616aa6bb9e639">initialize</a>(nArrays, dataCapacity);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#ae7b4d61c66fc22faff3c36ccba1fa2f4">   97</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#ae7b4d61c66fc22faff3c36ccba1fa2f4">CollapsedArray2D</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nArrays, <span class="keyword">const</span> <span class="keywordtype">int</span> subArraySize[])</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    {</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordtype">int</span> dataCapacity = 0;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nArrays; i++) {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            dataCapacity += subArraySize[i];</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a740cdbc2c501aca9227616aa6bb9e639">initialize</a>(nArrays, dataCapacity);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nArrays; i++) {</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#af682876a7021b4c0f6ef21e74e686ac3">push_back</a>(subArraySize[i]);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a5855987cb02c21414e732b3cb8af6804">  117</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a5855987cb02c21414e732b3cb8af6804">CollapsedArray2D</a>(<span class="keyword">const</span> std::vector&lt;std::vector&lt;T&gt; &gt; &amp;buildFrom)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// Initialize the array</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordtype">int</span> nArrays = buildFrom.size();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        m_index = std::unique_ptr&lt;int[]&gt;(<span class="keyword">new</span> <span class="keywordtype">int</span>[nArrays + 1]);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordtype">int</span> dataCapacity = 0;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nArrays; i++) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            dataCapacity += buildFrom[i].size();</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a740cdbc2c501aca9227616aa6bb9e639">initialize</a>(nArrays, dataCapacity);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="comment">// Fill the array</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nArrays; i++) {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#af682876a7021b4c0f6ef21e74e686ac3">push_back</a>(buildFrom[i].<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>());</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; buildFrom[i].size(); j++) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                (*this)[i][j] = buildFrom[i][j];</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a4f7cb60adfeadbe3103661858683f51e">  145</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4f7cb60adfeadbe3103661858683f51e">CollapsedArray2D</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml">CollapsedArray2D</a> &amp;other)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        m_capacity = other.m_capacity;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">if</span> (!other.<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a302e481da9147aff62c178c52d645443">initialized</a>()) {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// Allocate new memory and copy the elements</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordtype">int</span> v_size = other.m_index[m_capacity] + 1;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        std::unique_ptr&lt;T[]&gt; new_v = std::unique_ptr&lt;T[]&gt;(<span class="keyword">new</span> T[v_size]);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        std::copy(other.m_v.get(), other.m_v.get() + v_size - 1, new_v.get());</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        std::unique_ptr&lt;int[]&gt; new_index = std::unique_ptr&lt;T[]&gt;(<span class="keyword">new</span> <span class="keywordtype">int</span>[m_capacity + 1]);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        std::copy(other.m_index.get(), other.m_index.get() + m_capacity - 1, new_index.get());</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// Assign the new memory to the object</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        m_v = new_v;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        m_index = new_index;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a234b3b528d250c25ed3f931388b019c2">  172</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml">CollapsedArray2D</a> &amp; <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a234b3b528d250c25ed3f931388b019c2">operator= </a>(<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml">CollapsedArray2D</a> other)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;other) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            other.<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a7fb08f51608679e209ff83f13094619a">swap</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a7fb08f51608679e209ff83f13094619a">  186</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a7fb08f51608679e209ff83f13094619a">swap</a>(<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml">CollapsedArray2D</a> &amp;other)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        std::swap(m_index.get(), other.m_index.get());</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        std::swap(m_v.get(), other.m_v.get());</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        std::swap(m_capacity, other.m_capacity);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a740cdbc2c501aca9227616aa6bb9e639">  201</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a740cdbc2c501aca9227616aa6bb9e639">initialize</a>(<span class="keywordtype">int</span> nArrays, <span class="keywordtype">int</span> dataCapacity)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        m_capacity = nArrays;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        m_v = std::unique_ptr&lt;T[]&gt;(<span class="keyword">new</span> T[dataCapacity]);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        m_index = std::unique_ptr&lt;int[]&gt;(<span class="keyword">new</span> <span class="keywordtype">int</span>[m_capacity + 1]);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        m_index[0] = 0;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        m_index[m_capacity] = - dataCapacity;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        std::fill_n(m_index.get() + 1, m_capacity - 1, -1);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#aafd5f759bc4f2c4398fc7ed0d2f5d875">  218</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#aafd5f759bc4f2c4398fc7ed0d2f5d875">operator==</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml">CollapsedArray2D</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> m_index == rhs.m_index &amp;&amp; m_v == rhs.m_v;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">  228</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">empty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>() == 0;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a302e481da9147aff62c178c52d645443">  238</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a302e481da9147aff62c178c52d645443">initialized</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">return</span> m_capacity &gt;= 0;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#aca5c798b72c08b596fcca66b12cb88c9">  249</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#aca5c798b72c08b596fcca66b12cb88c9">clear</a>()</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a302e481da9147aff62c178c52d645443">initialized</a>()) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        m_v.reset();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        m_index.reset();</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        m_capacity = -1;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a487ef2102c854060ab0ede11104bd2b0">  268</a></span>&#160;    T * <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a487ef2102c854060ab0ede11104bd2b0">data</a>() noexcept</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span> m_v.get();</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a45f76301414bb75d44c66941c789b1d6">  283</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a45f76301414bb75d44c66941c789b1d6">push_back</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;subArraySize, T * subArray = NULL)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        <span class="keywordtype">int</span> currentSize = <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>();</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        assert(<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a668c4a9351ee287eb8d53ee76b3e79e9">data_size</a>() + subArraySize &lt;= <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#ab15ff4f034eae3cf17f2b15e52a1fa76">data_capacity</a>());</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        m_index[currentSize + 1] = m_index[currentSize] + subArraySize;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span> (subArray != NULL) {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; subArraySize; j++) {</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a606ce06e9bbccf5794c50b3c8eaeedbd">set</a>(currentSize, j, subArray[j]);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            }</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#af682876a7021b4c0f6ef21e74e686ac3">  303</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#af682876a7021b4c0f6ef21e74e686ac3">push_back</a>()</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#af682876a7021b4c0f6ef21e74e686ac3">push_back</a>(0);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#afc4fcfcdc149ea523c27b4b7dde66da1">  315</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#afc4fcfcdc149ea523c27b4b7dde66da1">push_back_in_sub_array</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        assert(!<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">empty</a>());</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordtype">int</span> &amp;lastIndex = m_index[<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>()];</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        lastIndex++;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        m_v[lastIndex] = value;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#ac9d8cd5bd02d21f455aeb0686ef7562a">  330</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#ac9d8cd5bd02d21f455aeb0686ef7562a">pop_back_in_sub_array</a>()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        assert(!<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">empty</a>());</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        assert(subArraySize(<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>() - 1) &gt; 0);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordtype">int</span> &amp;lastIndex = m_index[<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>()];</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keyword">delete</span> m_v[lastIndex];</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        lastIndex--;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a61a3581ac39d5febfd821c7b7894dcd0">  347</a></span>&#160;    <span class="keyword">const</span> T <span class="keyword">get</span>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j) <span class="keyword">const</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[i][j];</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a16b12590cc568a0de03e0991a4c6087d">  360</a></span>&#160;    T <span class="keyword">get</span>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[i][j];</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    }</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a6e375c50f12523575737a1032e7015c2">  372</a></span>&#160;    T * <span class="keyword">get</span>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    {</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[i];</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a606ce06e9bbccf5794c50b3c8eaeedbd">  385</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a606ce06e9bbccf5794c50b3c8eaeedbd">set</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j, T value)</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        (*this)[i][j] = value;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a5db7493fcd4bd57731cc251c2150b24a">  397</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a5db7493fcd4bd57731cc251c2150b24a">set</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, T *values)</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a3c8a4dfcadc0ca9f170901851e04f938">sub_array_size</a>(i); j++) {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            (*this)[i][j] = values[j];</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a802f321eb4bf040d8e344868a6d76d8d">  410</a></span>&#160;    <span class="keyword">const</span> T &amp; <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a802f321eb4bf040d8e344868a6d76d8d">back</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        assert(!<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">empty</a>());</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">return</span> m_v[m_index[m_capacity - 1]];</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a0bb48f03c2fa244b72bd15fca121b0d4">  421</a></span>&#160;    T* <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a0bb48f03c2fa244b72bd15fca121b0d4">back</a>()</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        assert(!<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">empty</a>());</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keywordflow">return</span> &amp;m_v[m_index[m_capacity - 1]];</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">  432</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a302e481da9147aff62c178c52d645443">initialized</a>()) {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordtype">int</span> nSubArrays = 0;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; m_capacity + 1; i++) {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">if</span> (m_index[i] &lt; 0) {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            nSubArrays++;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        <span class="keywordflow">return</span> nSubArrays;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a668c4a9351ee287eb8d53ee76b3e79e9">  455</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a668c4a9351ee287eb8d53ee76b3e79e9">data_size</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordtype">int</span> currentSize = <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">size</a>();</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">return</span> m_index[currentSize];</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aad36134dbf6224b4914b7879538dea">  469</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a6aad36134dbf6224b4914b7879538dea">capacity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        <span class="keywordflow">return</span> m_capacity;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#ab15ff4f034eae3cf17f2b15e52a1fa76">  481</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#ab15ff4f034eae3cf17f2b15e52a1fa76">data_capacity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keywordflow">if</span> (m_capacity &lt; 0) {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        }</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a>(m_index[m_capacity]);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedArray2D.xhtml#a3c8a4dfcadc0ca9f170901851e04f938">  496</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a3c8a4dfcadc0ca9f170901851e04f938">sub_array_size</a>(<span class="keywordtype">int</span> i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">return</span> m_index[i + 1] - m_index[i];</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    std::unique_ptr&lt;T[]&gt; m_v;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    std::unique_ptr&lt;int[]&gt; m_index;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="keywordtype">int</span> m_capacity;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keyword">const</span> T* operator[](<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keywordtype">int</span> index = m_index[i];</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="keywordflow">return</span> &amp;m_v[index];</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    T* operator[](<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    {</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        <span class="keywordtype">int</span> index = m_index[i];</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">return</span> &amp;m_v[index];</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;    <span class="keywordtype">bool</span> indexValid(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    {</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">empty</a>()) {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (i &lt; 0 || i &gt;= m_capacity) {</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        }</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        <span class="keywordflow">return</span> m_index[i] &gt;= 0;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordtype">bool</span> indexValid(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j)</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="keywordflow">if</span> (!indexValid(i)) {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keywordflow">return</span> j &lt; (m_index[i+1] - m_index[i]);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;};</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;}</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a234b3b528d250c25ed3f931388b019c2"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a234b3b528d250c25ed3f931388b019c2">bitpit::CollapsedArray2D::operator=</a></div><div class="ttdeci">CollapsedArray2D &amp; operator=(CollapsedArray2D other)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00172">collapsedArray2D.tpp:172</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a7fb08f51608679e209ff83f13094619a"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a7fb08f51608679e209ff83f13094619a">bitpit::CollapsedArray2D::swap</a></div><div class="ttdeci">void swap(CollapsedArray2D &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00186">collapsedArray2D.tpp:186</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml">bitpit::CollapsedArray2D</a></div><div class="ttdoc">Metafunction for generation of a collapsed array of arrays. </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00055">collapsedArray2D.tpp:55</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_ae7b4d61c66fc22faff3c36ccba1fa2f4"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#ae7b4d61c66fc22faff3c36ccba1fa2f4">bitpit::CollapsedArray2D::CollapsedArray2D</a></div><div class="ttdeci">CollapsedArray2D(const int &amp;nArrays, const int subArraySize[])</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00097">collapsedArray2D.tpp:97</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_af682876a7021b4c0f6ef21e74e686ac3"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#af682876a7021b4c0f6ef21e74e686ac3">bitpit::CollapsedArray2D::push_back</a></div><div class="ttdeci">void push_back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00303">collapsedArray2D.tpp:303</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_aca5c798b72c08b596fcca66b12cb88c9"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#aca5c798b72c08b596fcca66b12cb88c9">bitpit::CollapsedArray2D::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00249">collapsedArray2D.tpp:249</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a302e481da9147aff62c178c52d645443"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a302e481da9147aff62c178c52d645443">bitpit::CollapsedArray2D::initialized</a></div><div class="ttdeci">bool initialized() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00238">collapsedArray2D.tpp:238</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a668c4a9351ee287eb8d53ee76b3e79e9"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a668c4a9351ee287eb8d53ee76b3e79e9">bitpit::CollapsedArray2D::data_size</a></div><div class="ttdeci">int data_size() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00455">collapsedArray2D.tpp:455</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_ac9d8cd5bd02d21f455aeb0686ef7562a"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#ac9d8cd5bd02d21f455aeb0686ef7562a">bitpit::CollapsedArray2D::pop_back_in_sub_array</a></div><div class="ttdeci">void pop_back_in_sub_array()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00330">collapsedArray2D.tpp:330</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_aafd5f759bc4f2c4398fc7ed0d2f5d875"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#aafd5f759bc4f2c4398fc7ed0d2f5d875">bitpit::CollapsedArray2D::operator==</a></div><div class="ttdeci">bool operator==(const CollapsedArray2D &amp;rhs) const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00218">collapsedArray2D.tpp:218</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a5855987cb02c21414e732b3cb8af6804"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a5855987cb02c21414e732b3cb8af6804">bitpit::CollapsedArray2D::CollapsedArray2D</a></div><div class="ttdeci">CollapsedArray2D(const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;buildFrom)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00117">collapsedArray2D.tpp:117</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a9fdcdf2ace0c82b1f3e142d790c10b71"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a9fdcdf2ace0c82b1f3e142d790c10b71">bitpit::CollapsedArray2D::CollapsedArray2D</a></div><div class="ttdeci">CollapsedArray2D()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00063">collapsedArray2D.tpp:63</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a75a4b9332e7ec7a5b0fb1ef74f1589fa"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a75a4b9332e7ec7a5b0fb1ef74f1589fa">bitpit::CollapsedArray2D::CollapsedArray2D</a></div><div class="ttdeci">CollapsedArray2D(const int &amp;nArrays, const int &amp;dataCapacity)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00084">collapsedArray2D.tpp:84</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a487ef2102c854060ab0ede11104bd2b0"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a487ef2102c854060ab0ede11104bd2b0">bitpit::CollapsedArray2D::data</a></div><div class="ttdeci">T * data() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00268">collapsedArray2D.tpp:268</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a740cdbc2c501aca9227616aa6bb9e639"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a740cdbc2c501aca9227616aa6bb9e639">bitpit::CollapsedArray2D::initialize</a></div><div class="ttdeci">void initialize(int nArrays, int dataCapacity)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00201">collapsedArray2D.tpp:201</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a4236fdf2a40d498816f02ce2b1d6a69b"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a4236fdf2a40d498816f02ce2b1d6a69b">bitpit::CollapsedArray2D::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00228">collapsedArray2D.tpp:228</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a5db7493fcd4bd57731cc251c2150b24a"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a5db7493fcd4bd57731cc251c2150b24a">bitpit::CollapsedArray2D::set</a></div><div class="ttdeci">void set(const int &amp;i, T *values)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00397">collapsedArray2D.tpp:397</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a07c5f9ca9b4b5a1469f5379db431da0a"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a07c5f9ca9b4b5a1469f5379db431da0a">bitpit::CollapsedArray2D::~CollapsedArray2D</a></div><div class="ttdeci">~CollapsedArray2D()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00071">collapsedArray2D.tpp:71</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_ab15ff4f034eae3cf17f2b15e52a1fa76"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#ab15ff4f034eae3cf17f2b15e52a1fa76">bitpit::CollapsedArray2D::data_capacity</a></div><div class="ttdeci">int data_capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00481">collapsedArray2D.tpp:481</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a606ce06e9bbccf5794c50b3c8eaeedbd"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a606ce06e9bbccf5794c50b3c8eaeedbd">bitpit::CollapsedArray2D::set</a></div><div class="ttdeci">void set(const int &amp;i, const int &amp;j, T value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00385">collapsedArray2D.tpp:385</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a45f76301414bb75d44c66941c789b1d6"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a45f76301414bb75d44c66941c789b1d6">bitpit::CollapsedArray2D::push_back</a></div><div class="ttdeci">void push_back(const int &amp;subArraySize, T *subArray=NULL)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00283">collapsedArray2D.tpp:283</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a802f321eb4bf040d8e344868a6d76d8d"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a802f321eb4bf040d8e344868a6d76d8d">bitpit::CollapsedArray2D::back</a></div><div class="ttdeci">const T &amp; back() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00410">collapsedArray2D.tpp:410</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a3c8a4dfcadc0ca9f170901851e04f938"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a3c8a4dfcadc0ca9f170901851e04f938">bitpit::CollapsedArray2D::sub_array_size</a></div><div class="ttdeci">int sub_array_size(int i) const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00496">collapsedArray2D.tpp:496</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a6aec505e5aa99f55e39f74ec9f60b4a7"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a6aec505e5aa99f55e39f74ec9f60b4a7">bitpit::CollapsedArray2D::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00432">collapsedArray2D.tpp:432</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a4f7cb60adfeadbe3103661858683f51e"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a4f7cb60adfeadbe3103661858683f51e">bitpit::CollapsedArray2D::CollapsedArray2D</a></div><div class="ttdeci">CollapsedArray2D(const CollapsedArray2D &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00145">collapsedArray2D.tpp:145</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a6aad36134dbf6224b4914b7879538dea"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a6aad36134dbf6224b4914b7879538dea">bitpit::CollapsedArray2D::capacity</a></div><div class="ttdeci">int capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00469">collapsedArray2D.tpp:469</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_afc4fcfcdc149ea523c27b4b7dde66da1"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#afc4fcfcdc149ea523c27b4b7dde66da1">bitpit::CollapsedArray2D::push_back_in_sub_array</a></div><div class="ttdeci">void push_back_in_sub_array(const T &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00315">collapsedArray2D.tpp:315</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedArray2D_xhtml_a0bb48f03c2fa244b72bd15fca121b0d4"><div class="ttname"><a href="classbitpit_1_1CollapsedArray2D.xhtml#a0bb48f03c2fa244b72bd15fca121b0d4">bitpit::CollapsedArray2D::back</a></div><div class="ttdeci">T * back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedArray2D_8tpp_source.xhtml#l00421">collapsedArray2D.tpp:421</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/containers/collapsedVector2D.tpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0b61c55142250c0cc363383afd8075a4.xhtml">containers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">collapsedVector2D.tpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Written by Andrea Iob &lt;andrea_iob@hotmail.com&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#ifndef __BITPIT_COLLAPSED_VECTOR_2D_HPP__</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __BITPIT_COLLAPSED_VECTOR_2D_HPP__</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;binary_stream.hpp&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml">   40</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; operator&lt;&lt;(bitpit::OBinaryStream &amp;buffer, const bitpit::CollapsedVector2D&lt;T&gt; &amp;vector)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">typename</span> std::vector&lt;T&gt;::const_iterator           it;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">typename</span> std::vector&lt;size_t&gt;::const_iterator      jt;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    buffer &lt;&lt; vector.m_index.size() &lt;&lt; vector.m_v.size();</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span> (jt = vector.m_index.begin(); jt != vector.m_index.end(); ++jt) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        buffer &lt;&lt; *(jt);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> (it = vector.m_v.begin(); it != vector.m_v.end(); ++it) {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        buffer &lt;&lt; *(it);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>&amp; <a class="code" href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a>(<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a> &amp;buffer, <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">bitpit::CollapsedVector2D&lt;T&gt;</a> &amp;vector)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">size_t</span>                      size_m_v, size_m_index;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">size_t</span>                      i;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    buffer &gt;&gt; size_m_index;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    buffer &gt;&gt; size_m_v;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    vector.m_index.resize(size_m_index, 0);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    vector.m_v.resize(size_m_v);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; size_m_index; ++i) {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        buffer &gt;&gt; vector.m_index[i];</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; size_m_v; ++i) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        buffer &gt;&gt; vector.m_v[i];</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> buffer;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">class </span>CollapsedVector2D</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">// Friendship(s)</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> U&gt;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">friend</span> <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a>&amp; (::operator&lt;&lt;) (bitpit::OBinaryStream &amp;buffer, const CollapsedVector2D&lt;U&gt; &amp;<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a87291856abcc81c2b790c154aaee6f37">vector</a>);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> U&gt;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">friend</span> <a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a>&amp; (::operator&gt;&gt;) (<a class="code" href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a> &amp;buffer, CollapsedVector2D&lt;U&gt; &amp;vector);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">// Members and methods</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a926e3fc3716b66211afe0240520a8245">  131</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a926e3fc3716b66211afe0240520a8245">CollapsedVector2D</a>()</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        : m_index(1, 0L)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a926e3fc3716b66211afe0240520a8245">CollapsedVector2D</a>(<span class="keyword">const</span> std::vector&lt;int&gt; &amp;subArraySizes, <span class="keyword">const</span> T &amp;value = T())</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(subArraySizes, value);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a926e3fc3716b66211afe0240520a8245">CollapsedVector2D</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nSubArrays, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;subArraySize, <span class="keyword">const</span> T &amp;value = T())</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(nSubArrays, subArraySize, value);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#ae639c8bf1fa1cc3a5f36ace7383789dc">  168</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ae639c8bf1fa1cc3a5f36ace7383789dc">CollapsedVector2D</a>(<span class="keyword">const</span> std::vector&lt;std::vector&lt;T&gt; &gt; &amp;vector2D)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(vector2D);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#adae3e75c18e78591232910078f1af38a">  176</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#adae3e75c18e78591232910078f1af38a">CollapsedVector2D</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> &amp;other)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// Copy the elements</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        std::vector&lt;T&gt; new_v(other.m_v);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        std::vector&lt;std::size_t&gt; new_index(other.m_index);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="comment">// Assign the new memory to the object</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        m_v.swap(new_v);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        m_index.swap(new_index);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#abf6ee68881f8f47961daa7ccb7e24c87">  193</a></span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> &amp; <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abf6ee68881f8f47961daa7ccb7e24c87">operator= </a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> &amp;other)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;other) {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> temporary(other);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            temporary.swap(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> &amp; <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#abf6ee68881f8f47961daa7ccb7e24c87">operator= </a>(<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> &amp;&amp;other) = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">  219</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">initialize</a>(<span class="keyword">const</span> std::vector&lt;int&gt; &amp;subArraySizes, <span class="keyword">const</span> T &amp;value = T())</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordtype">int</span> nSubArrays = subArraySizes.size();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="comment">// Initialize the indexes</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        std::vector&lt;size_t&gt;(nSubArrays + 1, 0L).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_index);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nSubArrays; ++i) {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            m_index[i+1] = m_index[i] + subArraySizes[i];</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="comment">// Initialize the storage</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        std::vector&lt;T&gt;(m_index[nSubArrays], value).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_v);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a744e8076e858f4aa4c1617baa33eba42">  241</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a744e8076e858f4aa4c1617baa33eba42">initialize</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nSubArrays, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;subArraySize, <span class="keyword">const</span> T &amp;value = T())</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="comment">// Initialize the indexes</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        std::vector&lt;size_t&gt;(nSubArrays + 1, 0L).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_index);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nSubArrays; ++i) {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            m_index[i+1] = m_index[i] + subArraySize;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment">// Initialize the storage</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        std::vector&lt;T&gt;(m_index[nSubArrays], value).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_v);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a457539b07293c7af239cbfc93d7d43de">  259</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a457539b07293c7af239cbfc93d7d43de">initialize</a>(<span class="keyword">const</span> std::vector&lt;std::vector&lt;T&gt; &gt; &amp;vector2D)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordtype">int</span> nSubArrays = vector2D.size();</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="comment">// Initialize the indexes</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        std::vector&lt;size_t&gt;(nSubArrays + 1, 0L).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_index);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nSubArrays; ++i) {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            m_index[i+1] = m_index[i] + vector2D[i].size();</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="comment">// Initialize the storage</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        m_v.resize(m_index[nSubArrays]);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordtype">int</span> k = 0;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nSubArrays; ++i) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordtype">int</span> subArraySize = vector2D[i].size();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; subArraySize; ++j) {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                m_v[k++] = vector2D[i][j];</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#ab2f0f4d6a19c709bc9c945aa1b905b33">  292</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ab2f0f4d6a19c709bc9c945aa1b905b33">reserve</a>(<span class="keywordtype">int</span> nSubArrays, <span class="keywordtype">int</span> nElemnts = 0)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        m_index.reserve(nSubArrays + 1);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">if</span> (nElemnts &gt; 0) {</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            m_v.reserve(nElemnts);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">  305</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a> &amp;other)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        m_index.swap(other.m_index);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        m_v.swap(other.m_v);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#aae53ce815d3fbd947d1b745f05450af2">  316</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aae53ce815d3fbd947d1b745f05450af2">operator==</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml">CollapsedVector2D</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">return</span> m_index == rhs.m_index &amp;&amp; m_v == rhs.m_v;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a2312354438db745da214780a427106d8">  326</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a2312354438db745da214780a427106d8">empty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() == 0;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a92ed72dc41c1fbc4b8c53da7402d9d6e">  337</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a92ed72dc41c1fbc4b8c53da7402d9d6e">clear</a>()</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        std::vector&lt;T&gt;(0).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_v);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        std::vector&lt;size_t&gt;(1, 0L).<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">swap</a>(m_index);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a951daaabcabbef565c3e395997714d4a">  349</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a951daaabcabbef565c3e395997714d4a">shrink_to_fit</a>()</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    {</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        m_v.shrink_to_fit();</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        m_index.shrink_to_fit();</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a037a56b687f047cf8e5fb8edb2fbbb54">  363</a></span>&#160;    T * <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a037a56b687f047cf8e5fb8edb2fbbb54">data</a>() noexcept</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">return</span> m_v.data();</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a87291856abcc81c2b790c154aaee6f37">  376</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;T&gt; &amp; <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a87291856abcc81c2b790c154aaee6f37">vector</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">return</span> m_v;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">  387</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">push_back</a>()</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">push_back</a>(0, NULL);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#af12d56f9080a0fc5a96888ab8c9d8097">  403</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#af12d56f9080a0fc5a96888ab8c9d8097">push_back</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;subArraySize, <span class="keyword">const</span> T &amp;value)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        std::size_t previousLastIndex = m_index.back();</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        m_index.emplace_back();</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        std::size_t &amp;lastIndex = m_index.back();</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        lastIndex = previousLastIndex + subArraySize;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        m_v.resize(m_v.size() + subArraySize, value);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    }</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#ab768544b2c7c6a507c6f55dc2a1154c5">  421</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ab768544b2c7c6a507c6f55dc2a1154c5">push_back</a>(<span class="keyword">const</span> std::vector&lt;T&gt; &amp;subArray)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordtype">int</span> subArraySize = subArray.size();</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        std::size_t previousLastIndex = m_index.back();</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        m_index.emplace_back();</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        std::size_t &amp;lastIndex = m_index.back();</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        lastIndex = previousLastIndex + subArraySize;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        m_v.reserve(m_v.size() + subArraySize);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; subArraySize; j++) {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            m_v.emplace_back();</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            T &amp;storedValue = m_v.back();</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            storedValue = subArray[j];</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        }</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">  445</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">push_back_in_sub_array</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        m_index.back()++;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        m_v.emplace_back();</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        T &amp;storedValue = m_v.back();</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        storedValue = value;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#aeb95068ff344228d5b9342425525101d">  462</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#aeb95068ff344228d5b9342425525101d">push_back_in_sub_array</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    {</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        m_v.insert(m_v.begin() + m_index[i+1], value);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keywordtype">int</span> nIndexes = m_index.size();</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = i + 1; k &lt; nIndexes; ++k) {</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            m_index[k]++;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#ab51a660a58b0633e422102a2bd9b67cc">  480</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ab51a660a58b0633e422102a2bd9b67cc">pop_back</a>()</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    {</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() == 0) {</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        m_index.pop_back();</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        m_v.resize(m_index.back() + 1);</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#ac3b82bb05a5564f10f62d61d3707cb1b">  496</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ac3b82bb05a5564f10f62d61d3707cb1b">pop_back_in_sub_array</a>()</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    {</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() - 1) == 0) {</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        }</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        m_index.back()--;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        m_v.resize(m_index.back() + 1);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a607ae35df22313846bb8d82fc910638f">  514</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a607ae35df22313846bb8d82fc910638f">pop_back_in_sub_array</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    {</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(i) == 0) {</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        m_v.erase(m_v.begin() + m_index[i+1] - 1);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordtype">int</span> nIndexes = m_index.size();</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = i + 1; k &lt; nIndexes; ++k) {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;            m_index[k]--;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00538"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a1e782ac5988fb0826860a38cce468523">  538</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a1e782ac5988fb0826860a38cce468523">erase</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        m_v.erase(m_v.begin() + m_index[i], m_v.begin() + m_index[i+1] - 1);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        m_index.erase(m_index.begin() + i + 1);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00552"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#ae0d60b9a87877c89a5fb151b608b68e7">  552</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#ae0d60b9a87877c89a5fb151b608b68e7">erase</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        m_v.erase(m_v.begin() + m_index[i] + j);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordtype">int</span> nIndexes = m_index.size();</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = i + 1; k &lt; nIndexes; ++k) {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            m_index[k]--;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        }</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">  571</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">set</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j, T value)</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        (*this)[i][j] = value;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00584"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#abd32e42c6c9fc4ec8c07aef1d52864b9">  584</a></span>&#160;    T &amp; <span class="keyword">get</span>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j)</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    {</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[i][j];</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#aa0448ee096ec9fb90b234375923bd41b">  597</a></span>&#160;    <span class="keyword">const</span> T &amp; <span class="keyword">get</span>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j) <span class="keyword">const</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    {</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        assert(indexValid(i, j));</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[i][j];</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    }</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a871b3e2d2ce8e31235e2d16959d738b1">  609</a></span>&#160;    <span class="keyword">const</span> T * <span class="keyword">get</span>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i) <span class="keyword">const</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        assert(!<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a2312354438db745da214780a427106d8">empty</a>());</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[i];</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    }</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00621"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a4179a3529b3816113937d66f4acea41d">  621</a></span>&#160;    T * <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a4179a3529b3816113937d66f4acea41d">back</a>()</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    {</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">get</span>(<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>() - 1);</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#adc1a2a51549c28bcf6a104fe7c289e10">  631</a></span>&#160;    T * <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#adc1a2a51549c28bcf6a104fe7c289e10">first</a>()</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    {</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">get</span>(0);</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    }</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00641"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">  641</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        <span class="keywordflow">return</span> (m_index.size() - 1);</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    }</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a766b406204bad2f3b0ac704bfe960f7a">  651</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a766b406204bad2f3b0ac704bfe960f7a">sub_arrays_total_size</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;        <span class="keywordflow">return</span> m_index[<a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>()];</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    }</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div>
<div class="line"><a name="l00662"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">  662</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">sub_array_size</a>(<span class="keywordtype">int</span> i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        <span class="keywordflow">return</span> m_index[i + 1] - m_index[i];</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    }</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00674"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a012858f21ed58903d287310ac8edc77b">  674</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a012858f21ed58903d287310ac8edc77b">capacity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">return</span> m_index.capacity();</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    }</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00686"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a331568aa5c54317b74b827eab7373a7f">  686</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a331568aa5c54317b74b827eab7373a7f">sub_array_capacity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <span class="keywordflow">return</span> m_v.capacity();</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00696"></a><span class="lineno"><a class="line" href="classbitpit_1_1CollapsedVector2D.xhtml#a87615a05e27ef82b96b9bbb569146c61">  696</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a87615a05e27ef82b96b9bbb569146c61">get_binary_size</a>()</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    {</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;         <span class="keywordflow">return</span> ((2 + m_index.size())*<span class="keyword">sizeof</span>(<span class="keywordtype">size_t</span>) + m_v.size() * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    }</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    std::vector&lt;T&gt; m_v;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    std::vector&lt;std::size_t&gt; m_index;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;    <span class="keyword">const</span> T* operator[](<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keywordtype">int</span> index = m_index[i];</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        <span class="keywordflow">return</span> &amp;m_v[index];</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    }</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    T* operator[](<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    {</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        assert(indexValid(i));</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordtype">int</span> index = m_index[i];</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;        <span class="keywordflow">return</span> &amp;m_v[index];</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    }</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keywordtype">bool</span> indexValid(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i)<span class="keyword"> const</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;        <span class="keywordflow">return</span> (i &gt;= 0 &amp;&amp; i &lt; <a class="code" href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">size</a>());</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    }</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <span class="keywordtype">bool</span> indexValid(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j)<span class="keyword"> const</span></div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        <span class="keywordflow">if</span> (!indexValid(i)) {</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        }</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="keywordflow">return</span> (j &gt;= 0 &amp;&amp; j &lt; (<span class="keywordtype">int</span>) (m_index[i+1] - m_index[i]));</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    }</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;};</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml">bitpit::CollapsedVector2D</a></div><div class="ttdoc">Metafunction for generation of a collapsed vector of arrays. </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00040">collapsedVector2D.tpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a4179a3529b3816113937d66f4acea41d"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a4179a3529b3816113937d66f4acea41d">bitpit::CollapsedVector2D::back</a></div><div class="ttdeci">T * back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00621">collapsedVector2D.tpp:621</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ab51a660a58b0633e422102a2bd9b67cc"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ab51a660a58b0633e422102a2bd9b67cc">bitpit::CollapsedVector2D::pop_back</a></div><div class="ttdeci">void pop_back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00480">collapsedVector2D.tpp:480</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a744e8076e858f4aa4c1617baa33eba42"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a744e8076e858f4aa4c1617baa33eba42">bitpit::CollapsedVector2D::initialize</a></div><div class="ttdeci">void initialize(const int &amp;nSubArrays, const int &amp;subArraySize, const T &amp;value=T())</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00241">collapsedVector2D.tpp:241</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a1e782ac5988fb0826860a38cce468523"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a1e782ac5988fb0826860a38cce468523">bitpit::CollapsedVector2D::erase</a></div><div class="ttdeci">void erase(const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00538">collapsedVector2D.tpp:538</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_af12d56f9080a0fc5a96888ab8c9d8097"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#af12d56f9080a0fc5a96888ab8c9d8097">bitpit::CollapsedVector2D::push_back</a></div><div class="ttdeci">void push_back(const int &amp;subArraySize, const T &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00403">collapsedVector2D.tpp:403</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a6552acbe400a950c45fb5be92d1ddb8c"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a6552acbe400a950c45fb5be92d1ddb8c">bitpit::CollapsedVector2D::push_back_in_sub_array</a></div><div class="ttdeci">void push_back_in_sub_array(const T &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00445">collapsedVector2D.tpp:445</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ac3b82bb05a5564f10f62d61d3707cb1b"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ac3b82bb05a5564f10f62d61d3707cb1b">bitpit::CollapsedVector2D::pop_back_in_sub_array</a></div><div class="ttdeci">void pop_back_in_sub_array()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00496">collapsedVector2D.tpp:496</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ae639c8bf1fa1cc3a5f36ace7383789dc"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ae639c8bf1fa1cc3a5f36ace7383789dc">bitpit::CollapsedVector2D::CollapsedVector2D</a></div><div class="ttdeci">CollapsedVector2D(const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;vector2D)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00168">collapsedVector2D.tpp:168</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a012858f21ed58903d287310ac8edc77b"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a012858f21ed58903d287310ac8edc77b">bitpit::CollapsedVector2D::capacity</a></div><div class="ttdeci">int capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00674">collapsedVector2D.tpp:674</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_abf6ee68881f8f47961daa7ccb7e24c87"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#abf6ee68881f8f47961daa7ccb7e24c87">bitpit::CollapsedVector2D::operator=</a></div><div class="ttdeci">CollapsedVector2D &amp; operator=(const CollapsedVector2D &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00193">collapsedVector2D.tpp:193</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a926e3fc3716b66211afe0240520a8245"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a926e3fc3716b66211afe0240520a8245">bitpit::CollapsedVector2D::CollapsedVector2D</a></div><div class="ttdeci">CollapsedVector2D()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00131">collapsedVector2D.tpp:131</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_aeb95068ff344228d5b9342425525101d"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#aeb95068ff344228d5b9342425525101d">bitpit::CollapsedVector2D::push_back_in_sub_array</a></div><div class="ttdeci">void push_back_in_sub_array(const int &amp;i, const T &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00462">collapsedVector2D.tpp:462</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a></div><div class="ttdoc">creates output binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00169">binary_stream.hpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a92ed72dc41c1fbc4b8c53da7402d9d6e"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a92ed72dc41c1fbc4b8c53da7402d9d6e">bitpit::CollapsedVector2D::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00337">collapsedVector2D.tpp:337</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a87291856abcc81c2b790c154aaee6f37"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a87291856abcc81c2b790c154aaee6f37">bitpit::CollapsedVector2D::vector</a></div><div class="ttdeci">const std::vector&lt; T &gt; &amp; vector() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00376">collapsedVector2D.tpp:376</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a457539b07293c7af239cbfc93d7d43de"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a457539b07293c7af239cbfc93d7d43de">bitpit::CollapsedVector2D::initialize</a></div><div class="ttdeci">void initialize(const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;vector2D)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00259">collapsedVector2D.tpp:259</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a331568aa5c54317b74b827eab7373a7f"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a331568aa5c54317b74b827eab7373a7f">bitpit::CollapsedVector2D::sub_array_capacity</a></div><div class="ttdeci">int sub_array_capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00686">collapsedVector2D.tpp:686</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_aae53ce815d3fbd947d1b745f05450af2"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#aae53ce815d3fbd947d1b745f05450af2">bitpit::CollapsedVector2D::operator==</a></div><div class="ttdeci">bool operator==(const CollapsedVector2D &amp;rhs) const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00316">collapsedVector2D.tpp:316</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a48c62d5c0657f3a47d25a6697250c3aa"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a48c62d5c0657f3a47d25a6697250c3aa">bitpit::CollapsedVector2D::swap</a></div><div class="ttdeci">void swap(CollapsedVector2D &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00305">collapsedVector2D.tpp:305</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_aab1fa3c2c1599062fb2740aa99f541a0"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#aab1fa3c2c1599062fb2740aa99f541a0">bitpit::CollapsedVector2D::initialize</a></div><div class="ttdeci">void initialize(const std::vector&lt; int &gt; &amp;subArraySizes, const T &amp;value=T())</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00219">collapsedVector2D.tpp:219</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ab2f0f4d6a19c709bc9c945aa1b905b33"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ab2f0f4d6a19c709bc9c945aa1b905b33">bitpit::CollapsedVector2D::reserve</a></div><div class="ttdeci">void reserve(int nSubArrays, int nElemnts=0)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00292">collapsedVector2D.tpp:292</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a></div><div class="ttdoc">creates input binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00087">binary_stream.hpp:87</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_adae3e75c18e78591232910078f1af38a"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#adae3e75c18e78591232910078f1af38a">bitpit::CollapsedVector2D::CollapsedVector2D</a></div><div class="ttdeci">CollapsedVector2D(const CollapsedVector2D &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00176">collapsedVector2D.tpp:176</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a29e096326583f270a879e4b8681ee2c9"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a29e096326583f270a879e4b8681ee2c9">bitpit::CollapsedVector2D::push_back</a></div><div class="ttdeci">void push_back()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00387">collapsedVector2D.tpp:387</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a9539c1b89c7eb44395715e33d99a5034"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a9539c1b89c7eb44395715e33d99a5034">bitpit::CollapsedVector2D::sub_array_size</a></div><div class="ttdeci">int sub_array_size(int i) const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00662">collapsedVector2D.tpp:662</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a607ae35df22313846bb8d82fc910638f"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a607ae35df22313846bb8d82fc910638f">bitpit::CollapsedVector2D::pop_back_in_sub_array</a></div><div class="ttdeci">void pop_back_in_sub_array(const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00514">collapsedVector2D.tpp:514</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a87615a05e27ef82b96b9bbb569146c61"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a87615a05e27ef82b96b9bbb569146c61">bitpit::CollapsedVector2D::get_binary_size</a></div><div class="ttdeci">size_t get_binary_size()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00696">collapsedVector2D.tpp:696</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a7339c6c05059c0c1658d30f3167c1d81"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a7339c6c05059c0c1658d30f3167c1d81">bitpit::CollapsedVector2D::set</a></div><div class="ttdeci">void set(const int &amp;i, const int &amp;j, T value)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00571">collapsedVector2D.tpp:571</a></div></div>
<div class="ttc" id="group__Operators_xhtml_ga91ecc3462d869a3132ba96d017ae549b"><div class="ttname"><a href="group__Operators.xhtml#ga91ecc3462d869a3132ba96d017ae549b">operator&gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator&gt;&gt;(std::istream &amp;in, std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="Operators__array_8tpp_source.xhtml#l01398">Operators_array.tpp:1398</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ab768544b2c7c6a507c6f55dc2a1154c5"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ab768544b2c7c6a507c6f55dc2a1154c5">bitpit::CollapsedVector2D::push_back</a></div><div class="ttdeci">void push_back(const std::vector&lt; T &gt; &amp;subArray)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00421">collapsedVector2D.tpp:421</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a766b406204bad2f3b0ac704bfe960f7a"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a766b406204bad2f3b0ac704bfe960f7a">bitpit::CollapsedVector2D::sub_arrays_total_size</a></div><div class="ttdeci">int sub_arrays_total_size() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00651">collapsedVector2D.tpp:651</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a2312354438db745da214780a427106d8"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a2312354438db745da214780a427106d8">bitpit::CollapsedVector2D::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00326">collapsedVector2D.tpp:326</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a72f8b69e21b8b7f72adaccd7278a5430"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a72f8b69e21b8b7f72adaccd7278a5430">bitpit::CollapsedVector2D::size</a></div><div class="ttdeci">int size() const </div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00641">collapsedVector2D.tpp:641</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_ae0d60b9a87877c89a5fb151b608b68e7"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#ae0d60b9a87877c89a5fb151b608b68e7">bitpit::CollapsedVector2D::erase</a></div><div class="ttdeci">void erase(const int &amp;i, const int &amp;j)</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00552">collapsedVector2D.tpp:552</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_adc1a2a51549c28bcf6a104fe7c289e10"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#adc1a2a51549c28bcf6a104fe7c289e10">bitpit::CollapsedVector2D::first</a></div><div class="ttdeci">T * first()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00631">collapsedVector2D.tpp:631</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a037a56b687f047cf8e5fb8edb2fbbb54"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a037a56b687f047cf8e5fb8edb2fbbb54">bitpit::CollapsedVector2D::data</a></div><div class="ttdeci">T * data() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00363">collapsedVector2D.tpp:363</a></div></div>
<div class="ttc" id="classbitpit_1_1CollapsedVector2D_xhtml_a951daaabcabbef565c3e395997714d4a"><div class="ttname"><a href="classbitpit_1_1CollapsedVector2D.xhtml#a951daaabcabbef565c3e395997714d4a">bitpit::CollapsedVector2D::shrink_to_fit</a></div><div class="ttdeci">void shrink_to_fit()</div><div class="ttdef"><b>Definition:</b> <a href="collapsedVector2D_8tpp_source.xhtml#l00349">collapsedVector2D.tpp:349</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

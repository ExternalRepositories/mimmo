
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/communications/communications.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_a481372c9e8d9b6cd5802f6200f853d5.xhtml">communications</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">communications.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;bitpit_IO.hpp&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;communications.hpp&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keywordtype">int</span> DataCommunicator::DEFAULT_TAG = 0;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a6e78437adddbc25b0fb9260840a4a0a8">   50</a></span>&#160;<a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a6e78437adddbc25b0fb9260840a4a0a8">DataCommunicator::DataCommunicator</a>(MPI_Comm communicator)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    : m_communicator(communicator), m_rank(-1),</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    m_tag(DEFAULT_TAG), m_recvsContinuous(false)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Get MPI information</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    MPI_Comm_rank(m_communicator, &amp;m_rank);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a7b7362405f1429422525424154daeac1">   61</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a7b7362405f1429422525424154daeac1">DataCommunicator::finalize</a>()</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// Cancels all sends</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a9e00e80b727c8e43200a637a5931c708">cancelAllSends</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Cancels all receives</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3b4f8812853e394c2f6462630f97261a">cancelAllRecvs</a>();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a1c84dc83b8141938a8f62a38247e77b5">   75</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a1c84dc83b8141938a8f62a38247e77b5">DataCommunicator::setTag</a>(<span class="keywordtype">int</span> tag)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    m_tag = tag;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#aa3f459ed3ac0fba69488d0778bef5440">   85</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#aa3f459ed3ac0fba69488d0778bef5440">DataCommunicator::getTag</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordflow">return</span> m_tag;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#ad6ad7e2ffbfab51d5de26f08a0bb9bfc">  101</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ad6ad7e2ffbfab51d5de26f08a0bb9bfc">DataCommunicator::setRecvsContinuous</a>(<span class="keywordtype">bool</span> enabled)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (m_recvsContinuous == enabled) {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3b4f8812853e394c2f6462630f97261a">cancelAllRecvs</a>();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">int</span> nRecvBuffers = m_recvBuffers.size();</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nRecvBuffers; ++k) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordtype">size_t</span> capacity = m_recvBuffers[k].capacity();</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        m_recvBuffers[k] = <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a>(capacity, enabled);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    m_recvsContinuous = enabled;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a5dcafb74d1d9b88873093b7804d29fa3">startAllRecvs</a>();</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">  126</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">DataCommunicator::areRecvsContinuous</a>()</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;{</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> m_recvsContinuous;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#aa1feff5a48e113966ffa4f31ec8691f2">  137</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#aa1feff5a48e113966ffa4f31ec8691f2">DataCommunicator::discoverRecvs</a>()</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;{</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#aa1feff5a48e113966ffa4f31ec8691f2">discoverRecvs</a>(m_tag);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a5b91b8d7db80d3971b19b77a99ffb86d">  148</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#aa1feff5a48e113966ffa4f31ec8691f2">DataCommunicator::discoverRecvs</a>(<span class="keywordtype">int</span> discoverTag)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="comment">// Cancel current receives</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a504e98d963c0f5aa9dbd956d52b82ef2">clearAllRecvs</a>();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="comment">// Send the size of the messages that will be send</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;entry : m_sendIds) {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordtype">int</span> rank = entry.first;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;buffer = <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3d532bbbccb082130d60f4b3f52017b1">getSendBuffer</a>(rank);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordtype">long</span> dataSize = buffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#a7dfff6c6c60d80fb55358df63560f9c3">capacity</a>();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        MPI_Request dataSizeRequest;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        MPI_Isend(&amp;dataSize, 1, MPI_LONG, rank, discoverTag, m_communicator, &amp;dataSizeRequest);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">// MPI_Isend initiates an asynchronous (background) data transfer.</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// The actual data transfer might not happen unless one of the</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">// MPI_Wait* or MPI_Test* calls has been made on the request.</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordtype">int</span> completeFlag;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        MPI_Test(&amp;dataSizeRequest, &amp;completeFlag, MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="comment">// Raise a barrier to make sure that all the sends starts</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    MPI_Barrier(m_communicator);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// Receive the data size of the sends</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    std::unordered_map&lt;int, long&gt; dataSizes;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">// Probe for messages</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">int</span> messageAvailable;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        MPI_Status status;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        MPI_Iprobe(MPI_ANY_SOURCE, discoverTag, m_communicator, &amp;messageAvailable, &amp;status);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">if</span> (!messageAvailable) {</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">// Receive the data size that will be received from the source</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordtype">long</span> dataSize;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        MPI_Recv(&amp;dataSize, 1, MPI_LONG, status.MPI_SOURCE, discoverTag, m_communicator, MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        dataSizes[status.MPI_SOURCE] = dataSize;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// Wait that all processors correctly receive the data to communicate.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Without the barrier some processors may start the receives while other</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// are still waiting to receive the data sizes. Since the probe for the</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">// data size will accept message for all sources, if a processor start</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// receiveing data it will intefere with the other processors still</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// receiving the data sizes.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> (discoverTag == m_tag) {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        MPI_Barrier(m_communicator);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="comment">// Set the receives</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;entry : dataSizes) {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a2cd7f83bca7d8d74ad6f7aef13356734">setRecv</a>(entry.first, entry.second);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a167a9448b24f855949d8ceb83e8d9add">  212</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a167a9448b24f855949d8ceb83e8d9add">DataCommunicator::clearSend</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">if</span> (m_sendIds.count(rank) == 0) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// Cancel waiting send</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a8ff92507e43c90f27f5c5e6bd51fa135">cancelSend</a>(rank);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="comment">// Remove the send associated to the specified rank</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds[rank];</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    m_sendIds.erase(rank);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;entry : m_sendIds) {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">if</span> (entry.second &gt; <span class="keywordtype">id</span>) {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            entry.second--;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    m_sendRanks.erase(m_sendRanks.begin() + id);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    m_sendRequests.erase(m_sendRequests.begin() + id);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    m_sendBuffers.erase(m_sendBuffers.begin() + id);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a7b61154a7ad73833f704c49d32e941fe">  240</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a7b61154a7ad73833f704c49d32e941fe">DataCommunicator::clearRecv</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;{</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span> (m_recvIds.count(rank) == 0) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Cancel waiting recv</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a6ac839089cceb9395cc9ff6217fbd46f">cancelRecv</a>(rank);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// Remove the recv associated to the specified rank</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds[rank];</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    m_recvIds.erase(rank);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;entry : m_recvIds) {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span> (entry.second &gt; <span class="keywordtype">id</span>) {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            entry.second--;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    m_recvRanks.erase(m_recvRanks.begin() + id);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    m_recvRequests.erase(m_recvRequests.begin() + id);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    m_recvBuffers.erase(m_recvBuffers.begin() + id);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a9836f4b01a2c480617da9f99bfc122ee">  266</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a9836f4b01a2c480617da9f99bfc122ee">DataCommunicator::clearAllSends</a>()</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// Cancel waiting sends</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a9e00e80b727c8e43200a637a5931c708">cancelAllSends</a>();</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="comment">// Clear the sends</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    m_sendRanks.clear();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    m_sendIds.clear();</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    m_sendRequests.clear();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    m_sendBuffers.clear();</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;}</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a504e98d963c0f5aa9dbd956d52b82ef2">  281</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a504e98d963c0f5aa9dbd956d52b82ef2">DataCommunicator::clearAllRecvs</a>()</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;{</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="comment">// Cancel waiting receives</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3b4f8812853e394c2f6462630f97261a">cancelAllRecvs</a>();</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="comment">// Clear data associated to the recevies</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    m_recvRanks.clear();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    m_recvIds.clear();</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    m_recvRequests.clear();</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    m_recvBuffers.clear();</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    m_recvBuffers.clear();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;}</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a80e3890ae05ee01549b8be035dc8b482">  300</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a80e3890ae05ee01549b8be035dc8b482">DataCommunicator::setSend</a>(<span class="keywordtype">int</span> rank, <span class="keywordtype">long</span> length)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;{</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// Clear the send associated to the rank</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a167a9448b24f855949d8ceb83e8d9add">clearSend</a>(rank);</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// Set send info</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds.size();</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    m_sendIds[rank] = id;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    m_sendRanks.push_back(rank);</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    m_sendRequests.push_back(MPI_REQUEST_NULL);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    m_sendBuffers.emplace_back(length);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a2cd7f83bca7d8d74ad6f7aef13356734">  320</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a2cd7f83bca7d8d74ad6f7aef13356734">DataCommunicator::setRecv</a>(<span class="keywordtype">int</span> rank, <span class="keywordtype">long</span> length)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// Clear the recv associated to the rank</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a7b61154a7ad73833f704c49d32e941fe">clearRecv</a>(rank);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="comment">// Set recv info</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds.size();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    m_recvIds[rank] = id;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    m_recvRanks.push_back(rank);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    m_recvRequests.push_back(MPI_REQUEST_NULL);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    m_recvBuffers.emplace_back(length);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="comment">// If the receives are continous start the receive</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">areRecvsContinuous</a>()) {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">startRecv</a>(rank);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a5a46e9f0744551e563ae1980674040a9">  345</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a5a46e9f0744551e563ae1980674040a9">DataCommunicator::resizeSend</a>(<span class="keywordtype">int</span> rank, <span class="keywordtype">long</span> size)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// If there is no send associate to the specified rank we have to set</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">// a new send from scratch</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordflow">if</span> (m_sendIds.count(rank) == 0) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a80e3890ae05ee01549b8be035dc8b482">setSend</a>(rank, size);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="comment">// Cancel the send associated to the processor</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a8ff92507e43c90f27f5c5e6bd51fa135">cancelSend</a>(rank);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">// Resize the buffer</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds[rank];</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    m_sendBuffers[id].setCapacity(size);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;}</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a71a8f466b19e6b593cd2c8fa49e3f76c">  368</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a71a8f466b19e6b593cd2c8fa49e3f76c">DataCommunicator::resizeRecv</a>(<span class="keywordtype">int</span> rank, <span class="keywordtype">long</span> size)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// If there is no receive associate to the specified rank we have to set</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="comment">// a new receive from scratch</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">if</span> (m_recvIds.count(rank) == 0) {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a2cd7f83bca7d8d74ad6f7aef13356734">setRecv</a>(rank, size);</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// Cancel the receive associated to the processor</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a6ac839089cceb9395cc9ff6217fbd46f">cancelRecv</a>(rank);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// Resize the buffer</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds[rank];</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    m_recvBuffers[id].setCapacity(size);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a49ff8e97aef73a9d134e79f6973a1a04">  390</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a49ff8e97aef73a9d134e79f6973a1a04">DataCommunicator::getSendCount</a>()</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;{</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">return</span> m_sendBuffers.size();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a54be77298edd20e0dbf35611e713d796">  400</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a54be77298edd20e0dbf35611e713d796">DataCommunicator::getRecvCount</a>()</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;{</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">return</span> m_recvBuffers.size();</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;}</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a3d532bbbccb082130d60f4b3f52017b1">  411</a></span>&#160;<a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp; <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3d532bbbccb082130d60f4b3f52017b1">DataCommunicator::getSendBuffer</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;{</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds.at(rank);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> m_sendBuffers[id];</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#ade962eb4308933d6340b822c99f5880d">  424</a></span>&#160;<a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp; <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ade962eb4308933d6340b822c99f5880d">DataCommunicator::getRecvBuffer</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;{</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds.at(rank);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> m_recvBuffers[id];</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div>
<div class="line"><a name="l00436"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#afda6d1ae96db64a5a343267100ecc975">  436</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#afda6d1ae96db64a5a343267100ecc975">DataCommunicator::startSend</a>(<span class="keywordtype">int</span> dstRank)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;{</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// Wait for the previous send to finish</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#aef7dcbf4c1c4f2e2d4258becddcc1221">waitSend</a>(dstRank);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="comment">// Id of the buffer</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds.at(dstRank);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="comment">// If the buffer is a double buffer, swap it</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;sendBuffer = m_sendBuffers[id];</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">if</span> (sendBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#affc715571f3daad0b7509534e43c64a7">isDouble</a>()) {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        sendBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#acb13ddae38f524073b52d90c7a0c8b0b">swap</a>();</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="comment">// Start the send</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="classbitpit_1_1OBinaryStream.xhtml">OBinaryStream</a> &amp;buffer = sendBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#ab7cbf3119331d14beaecfd4e4c0f557b">getBack</a>();</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    MPI_Isend(buffer.rawData(), buffer.<a class="code" href="classbitpit_1_1OBinaryStream.xhtml#a5069ae7246af2361cde3f32f291f1a1b">capacity</a>(), MPI_CHAR, dstRank, m_tag,</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            m_communicator, &amp;m_sendRequests[id]);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;}</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a5d9d06ab774f1864ea42e2033b040ea3">  460</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a5d9d06ab774f1864ea42e2033b040ea3">DataCommunicator::startAllSends</a>()</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;{</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> rank : m_sendRanks) {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#afda6d1ae96db64a5a343267100ecc975">startSend</a>(rank);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">  472</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">DataCommunicator::startRecv</a>(<span class="keywordtype">int</span> srcRank)</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="comment">// Wait for the previous receive to finish</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#abba7cef9b0899e9d0f15ab97ba2ff7b1">waitRecv</a>(srcRank);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="comment">// Reset the position of the buffer</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds.at(srcRank);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <a class="code" href="classbitpit_1_1IBinaryStream.xhtml">IBinaryStream</a> &amp;buffer = m_recvBuffers[id].getBack();</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    buffer.<a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a474de5cb946d0e063b6653bf5d3bcbf6">seekg</a>(0);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="comment">// Start the receive</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    MPI_Irecv(buffer.rawData(), buffer.<a class="code" href="classbitpit_1_1IBinaryStream.xhtml#a6c2137d4bb4b1682b56741d7352a97d2">capacity</a>(), MPI_CHAR, srcRank, m_tag,</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            m_communicator, &amp;m_recvRequests[id]);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;}</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a5dcafb74d1d9b88873093b7804d29fa3">  490</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a5dcafb74d1d9b88873093b7804d29fa3">DataCommunicator::startAllRecvs</a>()</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;{</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> rank : m_recvRanks) {</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">startRecv</a>(rank);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#affb1607224249232af6acd0ea7e50edb">  505</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#affb1607224249232af6acd0ea7e50edb">DataCommunicator::waitAnySend</a>()</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;{</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="comment">// Wait for a send to complete</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">int</span> id;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    MPI_Waitany(m_sendRequests.size(), m_sendRequests.data(), &amp;id, MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> == MPI_UNDEFINED) {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">return</span> MPI_UNDEFINED;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="comment">// Reset the position of the buffer</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    m_sendBuffers[id].seekg(0);</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="comment">// Return the rank associated to the completed send</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">return</span> m_sendRanks[id];</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;}</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00526"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#aef7dcbf4c1c4f2e2d4258becddcc1221">  526</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#aef7dcbf4c1c4f2e2d4258becddcc1221">DataCommunicator::waitSend</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="comment">// Wait for the send to complete</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds.at(rank);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">auto</span> request = m_sendRequests[id];</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    <span class="keywordflow">if</span> (request == MPI_REQUEST_NULL) {</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    MPI_Wait(&amp;m_sendRequests[<span class="keywordtype">id</span>], MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="comment">// Reset the position of the buffer</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    m_sendBuffers[id].seekg(0);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a3239d3f8a4c4177d938b677741514272">  544</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3239d3f8a4c4177d938b677741514272">DataCommunicator::waitAllSends</a>()</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;{</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="comment">// Wait for all sends to complete</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    MPI_Waitall(m_sendRequests.size(), m_sendRequests.data(), MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="comment">// Reset the position of the buffers</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;buffer : m_sendBuffers) {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        buffer.seekg(0);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    }</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;}</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a0ca766c936d23473e9a559f35cc76c06">  564</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a0ca766c936d23473e9a559f35cc76c06">DataCommunicator::waitAnyRecv</a>()</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;{</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="comment">// Wait for a receive to complete</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordtype">int</span> id;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    MPI_Waitany(m_recvRequests.size(), m_recvRequests.data(), &amp;id, MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> == MPI_UNDEFINED) {</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">return</span> MPI_UNDEFINED;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    }</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="comment">// If the buffer is a double buffer, swap it</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp;recvBuffer = m_recvBuffers[id];</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keywordflow">if</span> (recvBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#affc715571f3daad0b7509534e43c64a7">isDouble</a>()) {</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        recvBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#acb13ddae38f524073b52d90c7a0c8b0b">swap</a>();</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// Rank of the request</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordtype">int</span> rank = m_recvRanks[id];</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// Restart the recevie</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">areRecvsContinuous</a>()) {</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">startRecv</a>(rank);</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="comment">// Return the rank associated to the completed receive</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    <span class="keywordflow">return</span> rank;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#abba7cef9b0899e9d0f15ab97ba2ff7b1">  597</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#abba7cef9b0899e9d0f15ab97ba2ff7b1">DataCommunicator::waitRecv</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;{</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="comment">// Wait for the receive to complete</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds.at(rank);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keyword">auto</span> request = m_recvRequests[id];</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keywordflow">if</span> (request == MPI_REQUEST_NULL) {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    MPI_Wait(&amp;m_recvRequests[<span class="keywordtype">id</span>], MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="comment">// If the buffer is a double buffer, swap it</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp;recvBuffer = m_recvBuffers[id];</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="keywordflow">if</span> (recvBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#affc715571f3daad0b7509534e43c64a7">isDouble</a>()) {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        recvBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#acb13ddae38f524073b52d90c7a0c8b0b">swap</a>();</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Restart the recevie</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">areRecvsContinuous</a>()) {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">startRecv</a>(rank);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a59e719e111a80d51a46c008f41686698">  623</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a59e719e111a80d51a46c008f41686698">DataCommunicator::waitAllRecvs</a>()</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;{</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <span class="comment">// Wait for all the receives to complete</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    MPI_Waitall(m_recvRequests.size(), m_recvRequests.data(), MPI_STATUS_IGNORE);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="comment">// Swap double buffers</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordflow">for</span> (<a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp;buffer : m_recvBuffers) {</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordflow">if</span> (buffer.isDouble()) {</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            buffer.swap();</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        }</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    }</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="comment">// Restart all the receives</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">areRecvsContinuous</a>()) {</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a5dcafb74d1d9b88873093b7804d29fa3">startAllRecvs</a>();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    }</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;}</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div>
<div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a8ff92507e43c90f27f5c5e6bd51fa135">  646</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a8ff92507e43c90f27f5c5e6bd51fa135">DataCommunicator::cancelSend</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;{</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">if</span> (m_sendIds.count(rank) == 0) {</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    }</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_sendIds[rank];</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">if</span> (m_sendRequests[<span class="keywordtype">id</span>] == MPI_REQUEST_NULL) {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    }</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    MPI_Cancel(&amp;m_sendRequests[<span class="keywordtype">id</span>]);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    MPI_Request_free(&amp;m_sendRequests[<span class="keywordtype">id</span>]);</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;}</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div>
<div class="line"><a name="l00666"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a6ac839089cceb9395cc9ff6217fbd46f">  666</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a6ac839089cceb9395cc9ff6217fbd46f">DataCommunicator::cancelRecv</a>(<span class="keywordtype">int</span> rank)</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;{</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">if</span> (m_recvIds.count(rank) == 0) {</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    }</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordtype">int</span> <span class="keywordtype">id</span> = m_recvIds[rank];</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="keywordflow">if</span> (m_recvRequests[<span class="keywordtype">id</span>] == MPI_REQUEST_NULL) {</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    MPI_Cancel(&amp;m_recvRequests[<span class="keywordtype">id</span>]);</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    MPI_Request_free(&amp;m_recvRequests[<span class="keywordtype">id</span>]);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;}</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a9e00e80b727c8e43200a637a5931c708">  684</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a9e00e80b727c8e43200a637a5931c708">DataCommunicator::cancelAllSends</a>()</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;{</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> rank : m_sendRanks) {</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a8ff92507e43c90f27f5c5e6bd51fa135">cancelSend</a>(rank);</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;}</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno"><a class="line" href="classbitpit_1_1DataCommunicator.xhtml#a3b4f8812853e394c2f6462630f97261a">  694</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a3b4f8812853e394c2f6462630f97261a">DataCommunicator::cancelAllRecvs</a>()</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;{</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> rank : m_recvRanks) {</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <a class="code" href="classbitpit_1_1DataCommunicator.xhtml#a6ac839089cceb9395cc9ff6217fbd46f">cancelRecv</a>(rank);</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    }</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;}</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;}</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a6ac839089cceb9395cc9ff6217fbd46f"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a6ac839089cceb9395cc9ff6217fbd46f">bitpit::DataCommunicator::cancelRecv</a></div><div class="ttdeci">void cancelRecv(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00666">communications.cpp:666</a></div></div>
<div class="ttc" id="classbitpit_1_1RecvBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1RecvBuffer.xhtml">bitpit::RecvBuffer</a></div><div class="ttdoc">Buffer to be used for receive communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00104">communications_buffers.hpp:104</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_afda6d1ae96db64a5a343267100ecc975"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#afda6d1ae96db64a5a343267100ecc975">bitpit::DataCommunicator::startSend</a></div><div class="ttdeci">void startSend(int dstRank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00436">communications.cpp:436</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a474de5cb946d0e063b6653bf5d3bcbf6"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a474de5cb946d0e063b6653bf5d3bcbf6">bitpit::IBinaryStream::seekg</a></div><div class="ttdeci">bool seekg(size_t pos)</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8cpp_source.xhtml#l00205">binary_stream.cpp:205</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a7b7362405f1429422525424154daeac1"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a7b7362405f1429422525424154daeac1">bitpit::DataCommunicator::finalize</a></div><div class="ttdeci">void finalize()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00061">communications.cpp:61</a></div></div>
<div class="ttc" id="classbitpit_1_1CommunicationBuffer_xhtml_ab7cbf3119331d14beaecfd4e4c0f557b"><div class="ttname"><a href="classbitpit_1_1CommunicationBuffer.xhtml#ab7cbf3119331d14beaecfd4e4c0f557b">bitpit::CommunicationBuffer::getBack</a></div><div class="ttdeci">RawBufferType &amp; getBack()</div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8tpp_source.xhtml#l00122">communications_buffers.tpp:122</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a5dcafb74d1d9b88873093b7804d29fa3"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a5dcafb74d1d9b88873093b7804d29fa3">bitpit::DataCommunicator::startAllRecvs</a></div><div class="ttdeci">void startAllRecvs()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00490">communications.cpp:490</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a49ff8e97aef73a9d134e79f6973a1a04"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a49ff8e97aef73a9d134e79f6973a1a04">bitpit::DataCommunicator::getSendCount</a></div><div class="ttdeci">int getSendCount()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00390">communications.cpp:390</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_aa1feff5a48e113966ffa4f31ec8691f2"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#aa1feff5a48e113966ffa4f31ec8691f2">bitpit::DataCommunicator::discoverRecvs</a></div><div class="ttdeci">void discoverRecvs()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00137">communications.cpp:137</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a3b4f8812853e394c2f6462630f97261a"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a3b4f8812853e394c2f6462630f97261a">bitpit::DataCommunicator::cancelAllRecvs</a></div><div class="ttdeci">void cancelAllRecvs()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00694">communications.cpp:694</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a2cd7f83bca7d8d74ad6f7aef13356734"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a2cd7f83bca7d8d74ad6f7aef13356734">bitpit::DataCommunicator::setRecv</a></div><div class="ttdeci">void setRecv(int rank, long length=0)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00320">communications.cpp:320</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml_a5069ae7246af2361cde3f32f291f1a1b"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml#a5069ae7246af2361cde3f32f291f1a1b">bitpit::OBinaryStream::capacity</a></div><div class="ttdeci">size_t capacity</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00185">binary_stream.hpp:185</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a167a9448b24f855949d8ceb83e8d9add"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a167a9448b24f855949d8ceb83e8d9add">bitpit::DataCommunicator::clearSend</a></div><div class="ttdeci">void clearSend(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00212">communications.cpp:212</a></div></div>
<div class="ttc" id="classbitpit_1_1OBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1OBinaryStream.xhtml">bitpit::OBinaryStream</a></div><div class="ttdoc">creates output binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00169">binary_stream.hpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml_a6c2137d4bb4b1682b56741d7352a97d2"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml#a6c2137d4bb4b1682b56741d7352a97d2">bitpit::IBinaryStream::capacity</a></div><div class="ttdeci">const char size_t capacity</div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00105">binary_stream.hpp:105</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a5d9d06ab774f1864ea42e2033b040ea3"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a5d9d06ab774f1864ea42e2033b040ea3">bitpit::DataCommunicator::startAllSends</a></div><div class="ttdeci">void startAllSends()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00460">communications.cpp:460</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a5a46e9f0744551e563ae1980674040a9"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a5a46e9f0744551e563ae1980674040a9">bitpit::DataCommunicator::resizeSend</a></div><div class="ttdeci">void resizeSend(int rank, long resize)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00345">communications.cpp:345</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_ad6ad7e2ffbfab51d5de26f08a0bb9bfc"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#ad6ad7e2ffbfab51d5de26f08a0bb9bfc">bitpit::DataCommunicator::setRecvsContinuous</a></div><div class="ttdeci">void setRecvsContinuous(bool enabled)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00101">communications.cpp:101</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a8ff92507e43c90f27f5c5e6bd51fa135"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a8ff92507e43c90f27f5c5e6bd51fa135">bitpit::DataCommunicator::cancelSend</a></div><div class="ttdeci">void cancelSend(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00646">communications.cpp:646</a></div></div>
<div class="ttc" id="classbitpit_1_1CommunicationBuffer_xhtml_a7dfff6c6c60d80fb55358df63560f9c3"><div class="ttname"><a href="classbitpit_1_1CommunicationBuffer.xhtml#a7dfff6c6c60d80fb55358df63560f9c3">bitpit::CommunicationBuffer::capacity</a></div><div class="ttdeci">size_t capacity() const </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8tpp_source.xhtml#l00066">communications_buffers.tpp:66</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a7b61154a7ad73833f704c49d32e941fe"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a7b61154a7ad73833f704c49d32e941fe">bitpit::DataCommunicator::clearRecv</a></div><div class="ttdeci">void clearRecv(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00240">communications.cpp:240</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a54be77298edd20e0dbf35611e713d796"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a54be77298edd20e0dbf35611e713d796">bitpit::DataCommunicator::getRecvCount</a></div><div class="ttdeci">int getRecvCount()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00400">communications.cpp:400</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a0ca766c936d23473e9a559f35cc76c06"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a0ca766c936d23473e9a559f35cc76c06">bitpit::DataCommunicator::waitAnyRecv</a></div><div class="ttdeci">int waitAnyRecv()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00564">communications.cpp:564</a></div></div>
<div class="ttc" id="classbitpit_1_1IBinaryStream_xhtml"><div class="ttname"><a href="classbitpit_1_1IBinaryStream.xhtml">bitpit::IBinaryStream</a></div><div class="ttdoc">creates input binary stream </div><div class="ttdef"><b>Definition:</b> <a href="binary__stream_8hpp_source.xhtml#l00087">binary_stream.hpp:87</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a3239d3f8a4c4177d938b677741514272"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a3239d3f8a4c4177d938b677741514272">bitpit::DataCommunicator::waitAllSends</a></div><div class="ttdeci">void waitAllSends()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00544">communications.cpp:544</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a3d532bbbccb082130d60f4b3f52017b1"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a3d532bbbccb082130d60f4b3f52017b1">bitpit::DataCommunicator::getSendBuffer</a></div><div class="ttdeci">SendBuffer &amp; getSendBuffer(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00411">communications.cpp:411</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_abba7cef9b0899e9d0f15ab97ba2ff7b1"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#abba7cef9b0899e9d0f15ab97ba2ff7b1">bitpit::DataCommunicator::waitRecv</a></div><div class="ttdeci">void waitRecv(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00597">communications.cpp:597</a></div></div>
<div class="ttc" id="classbitpit_1_1CommunicationBuffer_xhtml_affc715571f3daad0b7509534e43c64a7"><div class="ttname"><a href="classbitpit_1_1CommunicationBuffer.xhtml#affc715571f3daad0b7509534e43c64a7">bitpit::CommunicationBuffer::isDouble</a></div><div class="ttdeci">bool isDouble() const </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8tpp_source.xhtml#l00100">communications_buffers.tpp:100</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a59e719e111a80d51a46c008f41686698"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a59e719e111a80d51a46c008f41686698">bitpit::DataCommunicator::waitAllRecvs</a></div><div class="ttdeci">void waitAllRecvs()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00623">communications.cpp:623</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_ab1cdfcaafae754fa7c0ffddfa9ba3ade"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#ab1cdfcaafae754fa7c0ffddfa9ba3ade">bitpit::DataCommunicator::areRecvsContinuous</a></div><div class="ttdeci">bool areRecvsContinuous()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00126">communications.cpp:126</a></div></div>
<div class="ttc" id="classbitpit_1_1SendBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1SendBuffer.xhtml">bitpit::SendBuffer</a></div><div class="ttdoc">Buffer to be used for send communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00090">communications_buffers.hpp:90</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a9e00e80b727c8e43200a637a5931c708"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a9e00e80b727c8e43200a637a5931c708">bitpit::DataCommunicator::cancelAllSends</a></div><div class="ttdeci">void cancelAllSends()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00684">communications.cpp:684</a></div></div>
<div class="ttc" id="classbitpit_1_1CommunicationBuffer_xhtml_acb13ddae38f524073b52d90c7a0c8b0b"><div class="ttname"><a href="classbitpit_1_1CommunicationBuffer.xhtml#acb13ddae38f524073b52d90c7a0c8b0b">bitpit::CommunicationBuffer::swap</a></div><div class="ttdeci">void swap()</div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8tpp_source.xhtml#l00131">communications_buffers.tpp:131</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a80e3890ae05ee01549b8be035dc8b482"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a80e3890ae05ee01549b8be035dc8b482">bitpit::DataCommunicator::setSend</a></div><div class="ttdeci">void setSend(int rank, long length=0)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00300">communications.cpp:300</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_affb1607224249232af6acd0ea7e50edb"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#affb1607224249232af6acd0ea7e50edb">bitpit::DataCommunicator::waitAnySend</a></div><div class="ttdeci">int waitAnySend()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00505">communications.cpp:505</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_aef7dcbf4c1c4f2e2d4258becddcc1221"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#aef7dcbf4c1c4f2e2d4258becddcc1221">bitpit::DataCommunicator::waitSend</a></div><div class="ttdeci">void waitSend(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00526">communications.cpp:526</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a3bb8f93f42f15ca898e73ae000b07700"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a3bb8f93f42f15ca898e73ae000b07700">bitpit::DataCommunicator::startRecv</a></div><div class="ttdeci">void startRecv(int srcRank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00472">communications.cpp:472</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a71a8f466b19e6b593cd2c8fa49e3f76c"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a71a8f466b19e6b593cd2c8fa49e3f76c">bitpit::DataCommunicator::resizeRecv</a></div><div class="ttdeci">void resizeRecv(int rank, long resize)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00368">communications.cpp:368</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a9836f4b01a2c480617da9f99bfc122ee"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a9836f4b01a2c480617da9f99bfc122ee">bitpit::DataCommunicator::clearAllSends</a></div><div class="ttdeci">void clearAllSends()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00266">communications.cpp:266</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a6e78437adddbc25b0fb9260840a4a0a8"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a6e78437adddbc25b0fb9260840a4a0a8">bitpit::DataCommunicator::DataCommunicator</a></div><div class="ttdeci">DataCommunicator(MPI_Comm communicator)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00050">communications.cpp:50</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_aa3f459ed3ac0fba69488d0778bef5440"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#aa3f459ed3ac0fba69488d0778bef5440">bitpit::DataCommunicator::getTag</a></div><div class="ttdeci">int getTag() const </div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00085">communications.cpp:85</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a1c84dc83b8141938a8f62a38247e77b5"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a1c84dc83b8141938a8f62a38247e77b5">bitpit::DataCommunicator::setTag</a></div><div class="ttdeci">void setTag(int tag)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00075">communications.cpp:75</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_a504e98d963c0f5aa9dbd956d52b82ef2"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#a504e98d963c0f5aa9dbd956d52b82ef2">bitpit::DataCommunicator::clearAllRecvs</a></div><div class="ttdeci">void clearAllRecvs()</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00281">communications.cpp:281</a></div></div>
<div class="ttc" id="classbitpit_1_1DataCommunicator_xhtml_ade962eb4308933d6340b822c99f5880d"><div class="ttname"><a href="classbitpit_1_1DataCommunicator.xhtml#ade962eb4308933d6340b822c99f5880d">bitpit::DataCommunicator::getRecvBuffer</a></div><div class="ttdeci">RecvBuffer &amp; getRecvBuffer(int rank)</div><div class="ttdef"><b>Definition:</b> <a href="communications_8cpp_source.xhtml#l00424">communications.cpp:424</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

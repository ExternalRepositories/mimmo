
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - Computational Geometry (CG)</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Computational Geometry (CG)</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="memitem:gabe5667f03774a24bcac049d94d0446ae"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gabe5667f03774a24bcac049d94d0446ae"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>bitpit::CGAlgorithms::grad1DUpdate</b> (int, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; std::vector&lt; std::vector&lt; int &gt;&gt;&gt; &amp;, std::vector&lt; double &gt; &amp;, int, int, double, std::vector&lt; bool &gt; &amp;)</td></tr>
<tr class="separator:gabe5667f03774a24bcac049d94d0446ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3616d4ebbcb09cf6585de19029291066"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga3616d4ebbcb09cf6585de19029291066"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>bitpit::CGAlgorithms::gradLimiting1D</b> (int, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; std::vector&lt; std::vector&lt; int &gt;&gt;&gt; &amp;, std::vector&lt; double &gt; &amp;, double)</td></tr>
<tr class="separator:ga3616d4ebbcb09cf6585de19029291066"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad956153e93dbd38549e323858bd523dd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gad956153e93dbd38549e323858bd523dd"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>bitpit::CGAlgorithms::grad2DUpdate</b> (int, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; std::vector&lt; std::vector&lt; int &gt;&gt;&gt; &amp;, std::vector&lt; double &gt; &amp;, int, int, double, std::vector&lt; bool &gt; &amp;)</td></tr>
<tr class="separator:gad956153e93dbd38549e323858bd523dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gacbcd30ca39b3ea5c9022f9c432776d53"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacbcd30ca39b3ea5c9022f9c432776d53"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>bitpit::CGAlgorithms::gradLimiting2D</b> (int, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; double &gt; &amp;, double)</td></tr>
<tr class="separator:gacbcd30ca39b3ea5c9022f9c432776d53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gada1caadffd7c7b869f779c5601bf8b21"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gada1caadffd7c7b869f779c5601bf8b21"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>bitpit::CGAlgorithms::grad2DUpdate</b> (int, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; double &gt; &amp;, int, double, std::vector&lt; bool &gt; &amp;)</td></tr>
<tr class="separator:gada1caadffd7c7b869f779c5601bf8b21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga328fc7793f049d4d91d7a99429151a4a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga328fc7793f049d4d91d7a99429151a4a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>bitpit::CGAlgorithms::gradLimiting2D</b> (int, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; std::vector&lt; int &gt;&gt; &amp;, std::vector&lt; double &gt; &amp;, double)</td></tr>
<tr class="separator:ga328fc7793f049d4d91d7a99429151a4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0b186f528f3dfbbba58c597e5b8ca129"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga0b186f528f3dfbbba58c597e5b8ca129">bitpit::CGElem::distancePointLine</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga0b186f528f3dfbbba58c597e5b8ca129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga28976f06b57e03754967b18ff086d82e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga28976f06b57e03754967b18ff086d82e">bitpit::CGElem::distancePointPlane</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga28976f06b57e03754967b18ff086d82e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae545eae55c3c1de0e5d5ddd1e61faebf"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gae545eae55c3c1de0e5d5ddd1e61faebf">bitpit::CGElem::distancePointSegment</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, int &amp;)</td></tr>
<tr class="separator:gae545eae55c3c1de0e5d5ddd1e61faebf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga04767cedc120a800142d7bd97615ac8b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga04767cedc120a800142d7bd97615ac8b">bitpit::CGElem::distancePointSegment</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, std::array&lt; double, 2 &gt; &amp;)</td></tr>
<tr class="separator:ga04767cedc120a800142d7bd97615ac8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4e5d22fcba141d307e6fe304aa923697"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga4e5d22fcba141d307e6fe304aa923697">bitpit::CGElem::distancePointTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, int &amp;)</td></tr>
<tr class="separator:ga4e5d22fcba141d307e6fe304aa923697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga210b30976b370777304e0b3f6f091e2e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga210b30976b370777304e0b3f6f091e2e">bitpit::CGElem::distancePointTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga210b30976b370777304e0b3f6f091e2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga117c4d6c26f342961f9d08539f349c0e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga117c4d6c26f342961f9d08539f349c0e">bitpit::CGElem::distancePointSimplex</a> (array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;, int &amp;)</td></tr>
<tr class="separator:ga117c4d6c26f342961f9d08539f349c0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadaa89cadf1673e949561d5a4f76dac37"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gadaa89cadf1673e949561d5a4f76dac37">bitpit::CGElem::distanceCloudTriangle</a> (std::vector&lt; array3D &gt; const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; &amp;, std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:gadaa89cadf1673e949561d5a4f76dac37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga458674818b75b1483c3230aed5e79489"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga458674818b75b1483c3230aed5e79489">bitpit::CGElem::distanceCloudSimplex</a> (std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; &amp;, std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:ga458674818b75b1483c3230aed5e79489"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga452da0b1ef8c1f8e1800e15fa6274905"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga452da0b1ef8c1f8e1800e15fa6274905">bitpit::CGElem::intersectPointSegment</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;)</td></tr>
<tr class="separator:ga452da0b1ef8c1f8e1800e15fa6274905"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa7ef8fb3466f1a2f5b3649adc4877220"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gaa7ef8fb3466f1a2f5b3649adc4877220">bitpit::CGElem::intersectPointTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;)</td></tr>
<tr class="separator:gaa7ef8fb3466f1a2f5b3649adc4877220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga5cfa556dd5a2e5b1aad6d3f3f5de1abd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga5cfa556dd5a2e5b1aad6d3f3f5de1abd">bitpit::CGElem::intersectPointBox</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</td></tr>
<tr class="separator:ga5cfa556dd5a2e5b1aad6d3f3f5de1abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga93d2af41505f0a9b9cf872a4e58b0d85"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga93d2af41505f0a9b9cf872a4e58b0d85">bitpit::CGElem::intersectLineLine</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga93d2af41505f0a9b9cf872a4e58b0d85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8a9146b741131d214b9de49f34da78e6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga8a9146b741131d214b9de49f34da78e6">bitpit::CGElem::intersectLinePlane</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga8a9146b741131d214b9de49f34da78e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaee0b9e12077a84bab81f9723fe105e93"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gaee0b9e12077a84bab81f9723fe105e93">bitpit::CGElem::intersectLineTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:gaee0b9e12077a84bab81f9723fe105e93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga253f1da11618741ba6a3d28e359f2f35"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga253f1da11618741ba6a3d28e359f2f35">bitpit::CGElem::intersectLineSimplex</a> (array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga253f1da11618741ba6a3d28e359f2f35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ba48b236af6deafacc652dcb6230b1a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga4ba48b236af6deafacc652dcb6230b1a">bitpit::CGElem::intersectSegmentSegment</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga4ba48b236af6deafacc652dcb6230b1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga539176e3d1968d2c259768ffc05fbee3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga539176e3d1968d2c259768ffc05fbee3">bitpit::CGElem::intersectSegmentPlane</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga539176e3d1968d2c259768ffc05fbee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga64c4dd9ddee021e20938b9ab939242d6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga64c4dd9ddee021e20938b9ab939242d6">bitpit::CGElem::intersectSegmentTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga64c4dd9ddee021e20938b9ab939242d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga77795ed4e8b89797b0d9e53c461c42ba"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga77795ed4e8b89797b0d9e53c461c42ba">bitpit::CGElem::intersectSegmentSimplex</a> (array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga77795ed4e8b89797b0d9e53c461c42ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaed8ea1a85150953485b336dd2c6d528"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gaaed8ea1a85150953485b336dd2c6d528">bitpit::CGElem::intersectSegmentBox</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</td></tr>
<tr class="separator:gaaed8ea1a85150953485b336dd2c6d528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6819d9e5a4ca43e28507038cf0a3cac4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga6819d9e5a4ca43e28507038cf0a3cac4">bitpit::CGElem::intersectSegmentBox</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; &amp;, int dim=3)</td></tr>
<tr class="separator:ga6819d9e5a4ca43e28507038cf0a3cac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3df671f58183f772cd7e5c3af5a27272"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga3df671f58183f772cd7e5c3af5a27272">bitpit::CGElem::intersectPlanePlane</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga3df671f58183f772cd7e5c3af5a27272"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga28d8df159d89502ca11a1621114bef2d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga28d8df159d89502ca11a1621114bef2d">bitpit::CGElem::intersectBoxBox</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</td></tr>
<tr class="separator:ga28d8df159d89502ca11a1621114bef2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabbc62c093e486335b5b742c945566d1b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gabbc62c093e486335b5b742c945566d1b">bitpit::CGElem::intersectBoxBox</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;, int dim=3)</td></tr>
<tr class="separator:gabbc62c093e486335b5b742c945566d1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3b8e0df06710d21b83057b3707f3017f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga3b8e0df06710d21b83057b3707f3017f">bitpit::CGElem::intersectBoxTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;)</td></tr>
<tr class="separator:ga3b8e0df06710d21b83057b3707f3017f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a339fdf76c3be3669a39651f5a4eb07"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga6a339fdf76c3be3669a39651f5a4eb07">bitpit::CGElem::intersectBoxTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; &amp;)</td></tr>
<tr class="separator:ga6a339fdf76c3be3669a39651f5a4eb07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafcc27b894cfe337cd6d3623a41bb2819"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gafcc27b894cfe337cd6d3623a41bb2819">bitpit::CGElem::intersectBoxSimplex</a> (array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, int dim=3)</td></tr>
<tr class="separator:gafcc27b894cfe337cd6d3623a41bb2819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga91e4ba973c42e42c8f89becf97495ca2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga91e4ba973c42e42c8f89becf97495ca2">bitpit::CGElem::intersectBoxSimplex</a> (array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; &amp;, int dim=3)</td></tr>
<tr class="separator:ga91e4ba973c42e42c8f89becf97495ca2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaed22a95c25a4188b2aed1e195b40df68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gaed22a95c25a4188b2aed1e195b40df68">bitpit::CGElem::computeAABBSegment</a> (array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:gaed22a95c25a4188b2aed1e195b40df68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga361eb9679beb9717525ad56d57fca646"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga361eb9679beb9717525ad56d57fca646">bitpit::CGElem::computeAABBTriangle</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga361eb9679beb9717525ad56d57fca646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac750c9b80eaff130f9dab6838471805e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gac750c9b80eaff130f9dab6838471805e">bitpit::CGElem::computeAABBSimplex</a> (std::vector&lt; array3D &gt; const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:gac750c9b80eaff130f9dab6838471805e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e3859b64c3d6419c2ce47c0558526b6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga1e3859b64c3d6419c2ce47c0558526b6">bitpit::CGElem::unionAABB</a> (array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:ga1e3859b64c3d6419c2ce47c0558526b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad23af3deb6aa65acd24280f4e18197a1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gad23af3deb6aa65acd24280f4e18197a1">bitpit::CGElem::unionAABB</a> (std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; const &amp;, array3D &amp;, array3D &amp;)</td></tr>
<tr class="separator:gad23af3deb6aa65acd24280f4e18197a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaffff56c0556b6b8b785a26294623c32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gaaffff56c0556b6b8b785a26294623c32">bitpit::CGElem::rotateVector</a> (std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; const &amp;, double)</td></tr>
<tr class="separator:gaaffff56c0556b6b8b785a26294623c32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3a50c3550715d1622f5643c5d436e96a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga3a50c3550715d1622f5643c5d436e96a">bitpit::CGElem::vertexOfBox</a> (int const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; &amp;)</td></tr>
<tr class="separator:ga3a50c3550715d1622f5643c5d436e96a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaadfa940aafafbe1dd901869e0c5b005"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#gaaadfa940aafafbe1dd901869e0c5b005">bitpit::CGElem::edgeOfBox</a> (int const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;)</td></tr>
<tr class="separator:gaaadfa940aafafbe1dd901869e0c5b005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2fc46bb8132243943a3e4a4edcb2c0be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__CG.xhtml#ga2fc46bb8132243943a3e4a4edcb2c0be">bitpit::CGElem::faceOfBox</a> (int const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; const &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;)</td></tr>
<tr class="separator:ga2fc46bb8132243943a3e4a4edcb2c0be"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="gaed22a95c25a4188b2aed1e195b40df68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::computeAABBSegment </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes axis aligned boundig box of a segment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B</td><td>end point of segment </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P0</td><td>min point of bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P1</td><td>max point of bounding box </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01643">1643</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gac750c9b80eaff130f9dab6838471805e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::computeAABBSimplex </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>VS</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes axis aligned boundig box of a simplex </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">VS</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P0</td><td>min point of bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P1</td><td>max point of bounding box </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01703">1703</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga361eb9679beb9717525ad56d57fca646"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::computeAABBTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>C</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes axis aligned boundig box of a triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B</td><td>second vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">C</td><td>third vertex of triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P0</td><td>min point of bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P1</td><td>max point of bounding box </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01672">1672</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga458674818b75b1483c3230aed5e79489"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; double &gt; bitpit::CGElem::distanceCloudSimplex </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distances of point cloud to generic simplex </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point cloud coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest points on simplex </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">flag</td><td>point projecting onto simplex's interior (flag = 0), simplex's vertices (flag = 1, 2, ...) or triangle's edges (flag = -1, -2, -...) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00577">577</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gadaa89cadf1673e949561d5a4f76dac37"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; double &gt; bitpit::CGElem::distanceCloudTriangle </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distances of point cloud to triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point cloud coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>first triangle vertex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>second triangle vertex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q3</td><td>third triangle vertex </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest points on triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">flag</td><td>point projecting onto triangle's interior (flag = 0), triangle's vertices (flag = 1, 2, 3) or triangle's edges (flag = -1, -2, -3) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00377">377</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga0b186f528f3dfbbba58c597e5b8ca129"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointLine </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distance point to line in 3D </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q</td><td>point on line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>line direction </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest point on line </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga28976f06b57e03754967b18ff086d82e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointPlane </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distance point to plane </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q</td><td>point on plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>plane normal </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest point on line </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00079">79</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gae545eae55c3c1de0e5d5ddd1e61faebf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointSegment </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distance point to segment in 3D using a projection method </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>segment starting point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>segment ending point </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest point on line </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">flag</td><td>point mapping onto segment vertices (flag = 1, 2), or onto segment interior (flag = 0) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga04767cedc120a800142d7bd97615ac8b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointSegment </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>lambda</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distance point to segment in 3D using barycentric coordinates </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>segment starting point </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>segment ending point </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest point on line </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">lambda</td><td>barycentric coordinates </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga117c4d6c26f342961f9d08539f349c0e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointSimplex </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distances of point to generic simplex </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest points on simplex </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">flag</td><td>point projecting onto simplex's interior (flag = 0), simplex's vertices (flag = 1, 2, ...) or triangle's edges (flag = -1, -2, -...) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00511">511</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga4e5d22fcba141d307e6fe304aa923697"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distance point to triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>first triangle vertex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>second triangle vertex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q3</td><td>third triangle vertex </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest point on triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">flag</td><td>point projecting onto triangle's interior (flag = 0), triangle's vertices (flag = 1, 2, 3) or triangle's edges (flag = -1, -2, -3) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00184">184</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga210b30976b370777304e0b3f6f091e2e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double bitpit::CGElem::distancePointTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>xP</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>lambda</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes distance point to triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q0</td><td>first triangle vertex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>second triangle vertex </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>third triangle vertex </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">xP</td><td>closest point on triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">lambda</td><td>barycentric coordinates of projection point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>distance </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00295">295</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaaadfa940aafafbe1dd901869e0c5b005"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::edgeOfBox </td>
          <td>(</td>
          <td class="paramtype">int const &amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the edge coordiantes of a box </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>edge index </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A0</td><td>min point of bounding box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>max point of bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P0</td><td>first vertex of edge </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P1</td><td>first vertex of edge </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01827">1827</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga2fc46bb8132243943a3e4a4edcb2c0be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::faceOfBox </td>
          <td>(</td>
          <td class="paramtype">int const &amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the face coordiantes of a box </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>face index </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A0</td><td>min point of bounding box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>max point of bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P0</td><td>first vertex of face </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P1</td><td>first vertex of face </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P2</td><td>first vertex of face </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P3</td><td>first vertex of face </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01792">1792</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga28d8df159d89502ca11a1621114bef2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectBoxBox </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between two axis aligned bounding boxes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B1</td><td>min point of second box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B2</td><td>max point of second box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimension to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01035">1035</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gabbc62c093e486335b5b742c945566d1b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectBoxBox </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>I1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>I2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between two axis aligned bounding boxes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B1</td><td>min point of second box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B2</td><td>max point of second box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">I1</td><td>min point of intersection box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">I2</td><td>max point of intersection box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimension to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01068">1068</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gafcc27b894cfe337cd6d3623a41bb2819"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectBoxSimplex </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>VS</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between an axis aligned bounding box and a simplex </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">VS</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimension to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01315">1315</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga91e4ba973c42e42c8f89becf97495ca2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectBoxSimplex </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>VS</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between an axis aligned bounding box and a simplex </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">VS</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>intersection points simplex box edges </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimension to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01375">1375</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga3b8e0df06710d21b83057b3707f3017f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectBoxTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between an axis aligned bounding box and a triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V1</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V2</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V3</td><td>first vertex of triangle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01106">1106</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga6a339fdf76c3be3669a39651f5a4eb07"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectBoxTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V3</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between an axis aligned bounding box and a triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of first box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V1</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V2</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V3</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>intersection points between triangle and box edges </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01144">1144</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga93d2af41505f0a9b9cf872a4e58b0d85"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectLineLine </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between two lines in 3D </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n1</td><td>direction of first line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>point on first line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n2</td><td>direction of second line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P2</td><td>point on second line </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>intersection point if intersect, else unaltered </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00664">664</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga8a9146b741131d214b9de49f34da78e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectLinePlane </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between line and plane </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>point on line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n1</td><td>direction of line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P2</td><td>point on plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n2</td><td>normal to plane </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>intersection point if intersect, else unaltered </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00756">756</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga253f1da11618741ba6a3d28e359f2f35"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectLineSimplex </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>Q</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between triangle and a segment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point on line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>direction of line </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Q</td><td>intersection point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00957">957</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaee0b9e12077a84bab81f9723fe105e93"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectLineTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>C</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>Q</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between triangle and a line </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point on plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>normal to plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B</td><td>second vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">C</td><td>third vertex of triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Q</td><td>intersection point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00893">893</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga3df671f58183f772cd7e5c3af5a27272"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectPlanePlane </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>Pl</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>nl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between two planes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>point on first plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n1</td><td>normal to first plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P2</td><td>point on second plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n2</td><td>normal to second plane </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Pl</td><td>point on intersection line </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">nl</td><td>direction of intersection line </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00828">828</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga5cfa556dd5a2e5b1aad6d3f3f5de1abd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectPointBox </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>checks if points lies within axis aligned box </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B1</td><td>min coodinates of box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B2</td><td>max coodinates of box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimensions to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if point in box </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01616">1616</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga452da0b1ef8c1f8e1800e15fa6274905"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectPointSegment </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>checks if points lies on segment in 3D </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P2</td><td>end point of segment </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if point lies on segment </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01512">1512</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaa7ef8fb3466f1a2f5b3649adc4877220"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectPointTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>C</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>checks if points lies on triangle </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P</td><td>point coordinates </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B</td><td>second vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">C</td><td>third vertex of triangle </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if point lies on segment </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01545">1545</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaaed8ea1a85150953485b336dd2c6d528"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectSegmentBox </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between an axis aligned bounding box and a segment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">V1</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V2</td><td>end point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimension to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01186">1186</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga6819d9e5a4ca43e28507038cf0a3cac4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectSegmentBox </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between an axis aligned bounding box and a segment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">V1</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V2</td><td>end point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>min point of box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A2</td><td>max point of box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>intersection point segment and box faces </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">dim</td><td>number of dimension to be checked </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01243">1243</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga539176e3d1968d2c259768ffc05fbee3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectSegmentPlane </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>n2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between segment and plane </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>end point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P2</td><td>point on plane </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">n2</td><td>normal to plane </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>intersection point if intersect, else unaltered </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00794">794</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga4ba48b236af6deafacc652dcb6230b1a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectSegmentSegment </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>Q2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between two segments in 3D </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>star point of first segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P2</td><td>end point of first segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q1</td><td>star point of second segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">Q2</td><td>end point of second segment </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">x</td><td>intersection point if intersect, else unaltered </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00700">700</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga77795ed4e8b89797b0d9e53c461c42ba"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectSegmentSimplex </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>V</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>Q</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between triangle and a segment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P0</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>end point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">V</td><td>simplex vertices coordinates </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Q</td><td>intersection point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00998">998</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga64c4dd9ddee021e20938b9ab939242d6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::CGElem::intersectSegmentTriangle </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>C</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>Q</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Computes intersection between triangle and a segment </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">P0</td><td>start point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">P1</td><td>end point of segment </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A</td><td>first vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B</td><td>second vertex of triangle </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">C</td><td>third vertex of triangle </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Q</td><td>intersection point </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if intersect </dd></dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l00926">926</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaaffff56c0556b6b8b785a26294623c32"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::rotateVector </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>theta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>rotates a vector in 3D using Rodrigues' formula. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">v</td><td>vector to be rotated </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">a</td><td>rotation axis </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">theta</td><td>rotation angle </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01924">1924</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga1e3859b64c3d6419c2ce47c0558526b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::unionAABB </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>B1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>C0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>C1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the union of two axis aligned bounding boxes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A0</td><td>min point of first bounding box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>max point of first bounding box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B0</td><td>min point of second bounding box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">B1</td><td>max point of second bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">C0</td><td>min point of union bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">C1</td><td>max point of union bounding box </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01734">1734</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="gad23af3deb6aa65acd24280f4e18197a1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::unionAABB </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::array&lt; double, 3 &gt; &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>C0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>C1</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the union of several axis aligned bounding boxes </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">A0</td><td>min points of bounding boxes </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>max points of bounding boxes </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">C0</td><td>min point of union bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">C1</td><td>max point of union bounding box </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01758">1758</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga3a50c3550715d1622f5643c5d436e96a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::CGElem::vertexOfBox </td>
          <td>(</td>
          <td class="paramtype">int const &amp;&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; const &amp;&#160;</td>
          <td class="paramname"><em>A1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; double, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>P</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the vertex coordiantes of a box </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">i</td><td>vertex index </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A0</td><td>min point of bounding box </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">A1</td><td>max point of bounding box </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">P</td><td>vertex coordinates </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="CG__elem_8cpp_source.xhtml#l01854">1854</a> of file <a class="el" href="CG__elem_8cpp_source.xhtml">CG_elem.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

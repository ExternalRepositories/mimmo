
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - Mathematical functions</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Mathematical functions<div class="ingroups"><a class="el" href="group__operators.xhtml">Operators</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Collaboration diagram for Mathematical functions:</div>
<div class="dyncontent">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__MathFunctions.svg" width="304" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</td></tr></table></center>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga60e7587149a3744797dbf7ed2f6c4292"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga60e7587149a3744797dbf7ed2f6c4292"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga60e7587149a3744797dbf7ed2f6c4292">sign</a> (const T &amp;val)</td></tr>
<tr class="separator:ga60e7587149a3744797dbf7ed2f6c4292"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga88740c05f6c499a2784fcc1a221c1c9f"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga88740c05f6c499a2784fcc1a221c1c9f"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a> (const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</td></tr>
<tr class="separator:ga88740c05f6c499a2784fcc1a221c1c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga32c704d096aedd4495610696ea078483"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga32c704d096aedd4495610696ea078483"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga32c704d096aedd4495610696ea078483">min</a> (const std::array&lt; T, d &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:ga32c704d096aedd4495610696ea078483"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7729b247db2d23fbae5a211f92fd0a92"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga7729b247db2d23fbae5a211f92fd0a92"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga7729b247db2d23fbae5a211f92fd0a92">min</a> (const T &amp;x, const std::array&lt; T, d &gt; &amp;y)</td></tr>
<tr class="separator:ga7729b247db2d23fbae5a211f92fd0a92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga549530c6789cc261218fa2d0ef5655c7"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, size_t n&gt; </td></tr>
<tr class="memitem:ga549530c6789cc261218fa2d0ef5655c7"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; std::array&lt; T, n &gt;, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga549530c6789cc261218fa2d0ef5655c7">min</a> (const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:ga549530c6789cc261218fa2d0ef5655c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga54a0496f16acf8e3b5cec8fb5272286c"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, size_t n&gt; </td></tr>
<tr class="memitem:ga54a0496f16acf8e3b5cec8fb5272286c"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; std::array&lt; T, n &gt;, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga54a0496f16acf8e3b5cec8fb5272286c">min</a> (const T &amp;x, const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;y)</td></tr>
<tr class="separator:ga54a0496f16acf8e3b5cec8fb5272286c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7865c5a0adeca0b8995d46204eb79480"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, class T1 &gt; </td></tr>
<tr class="memitem:ga7865c5a0adeca0b8995d46204eb79480"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga7865c5a0adeca0b8995d46204eb79480">minval</a> (const std::array&lt; T, d &gt; &amp;x, T1 &amp;min_value)</td></tr>
<tr class="separator:ga7865c5a0adeca0b8995d46204eb79480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga119be619426d7a672ab67296a32f04e9"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga119be619426d7a672ab67296a32f04e9"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a> (const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</td></tr>
<tr class="separator:ga119be619426d7a672ab67296a32f04e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad9246125c2ce0972898af3619bf1a892"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:gad9246125c2ce0972898af3619bf1a892"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gad9246125c2ce0972898af3619bf1a892">max</a> (const std::array&lt; T, d &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:gad9246125c2ce0972898af3619bf1a892"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga80aeb4577146eaf64ae67348ef840991"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga80aeb4577146eaf64ae67348ef840991"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga80aeb4577146eaf64ae67348ef840991">max</a> (const T &amp;x, const std::array&lt; T, d &gt; &amp;y)</td></tr>
<tr class="separator:ga80aeb4577146eaf64ae67348ef840991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa0a692f85b8149297537bce1a314f556"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, size_t n&gt; </td></tr>
<tr class="memitem:gaa0a692f85b8149297537bce1a314f556"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; std::array&lt; T, n &gt;, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaa0a692f85b8149297537bce1a314f556">max</a> (const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:gaa0a692f85b8149297537bce1a314f556"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab0411917fb58bdc1fb5c128782a621f2"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, size_t n&gt; </td></tr>
<tr class="memitem:gab0411917fb58bdc1fb5c128782a621f2"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; std::array&lt; T, n &gt;, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gab0411917fb58bdc1fb5c128782a621f2">max</a> (const T &amp;x, const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;y)</td></tr>
<tr class="separator:gab0411917fb58bdc1fb5c128782a621f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga435153c79cc6efb4eb34789321e764d2"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, class T1 &gt; </td></tr>
<tr class="memitem:ga435153c79cc6efb4eb34789321e764d2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga435153c79cc6efb4eb34789321e764d2">maxval</a> (const std::array&lt; T, d &gt; &amp;x, T1 &amp;max_value)</td></tr>
<tr class="separator:ga435153c79cc6efb4eb34789321e764d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2d8c14ca84b59b6c18e141946001fbfc"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d, class T1 &gt; </td></tr>
<tr class="memitem:ga2d8c14ca84b59b6c18e141946001fbfc"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga2d8c14ca84b59b6c18e141946001fbfc">sum</a> (const std::array&lt; T, d &gt; &amp;x, T1 &amp;s)</td></tr>
<tr class="separator:ga2d8c14ca84b59b6c18e141946001fbfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4ec6338e8f898ec64973b2e7eb886ac7"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga4ec6338e8f898ec64973b2e7eb886ac7"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a> (const std::array&lt; T, d &gt; &amp;x)</td></tr>
<tr class="separator:ga4ec6338e8f898ec64973b2e7eb886ac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6da0697577be6fda9b574b2344c58014"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga6da0697577be6fda9b574b2344c58014"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, d &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a> (std::array&lt; T, d &gt; &amp;x, double p)</td></tr>
<tr class="separator:ga6da0697577be6fda9b574b2344c58014"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9f703751e0a174b453e6d4559152992d"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga9f703751e0a174b453e6d4559152992d"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga9f703751e0a174b453e6d4559152992d">norm1</a> (const std::array&lt; T, d &gt; &amp;x)</td></tr>
<tr class="separator:ga9f703751e0a174b453e6d4559152992d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabb983de64002faac55552e131e9096c0"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:gabb983de64002faac55552e131e9096c0"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a> (const std::array&lt; T, d &gt; &amp;x)</td></tr>
<tr class="separator:gabb983de64002faac55552e131e9096c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f62854fbef31a58c9c4a54a4f939af4"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga2f62854fbef31a58c9c4a54a4f939af4"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga2f62854fbef31a58c9c4a54a4f939af4">norm</a> (const std::array&lt; T, d &gt; &amp;x, int p)</td></tr>
<tr class="separator:ga2f62854fbef31a58c9c4a54a4f939af4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae2e106f5028f7b4edb41ef60e562b4e6"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:gae2e106f5028f7b4edb41ef60e562b4e6"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gae2e106f5028f7b4edb41ef60e562b4e6">normInf</a> (const std::array&lt; T, d &gt; &amp;x)</td></tr>
<tr class="separator:gae2e106f5028f7b4edb41ef60e562b4e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga982a6463d7e5b2cbcd89a15b7b3ee7cc"><td class="memTemplParams" colspan="2">template&lt;class T , size_t d&gt; </td></tr>
<tr class="memitem:ga982a6463d7e5b2cbcd89a15b7b3ee7cc"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga982a6463d7e5b2cbcd89a15b7b3ee7cc">dotProduct</a> (const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</td></tr>
<tr class="separator:ga982a6463d7e5b2cbcd89a15b7b3ee7cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaaedc68b3fb7ff16b47e6b4b28442fefd"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gaaedc68b3fb7ff16b47e6b4b28442fefd"><td class="memTemplItemLeft" align="right" valign="top">std::array&lt; T, 3 &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaaedc68b3fb7ff16b47e6b4b28442fefd">crossProduct</a> (const std::array&lt; T, 3 &gt; &amp;x, const std::array&lt; T, 3 &gt; &amp;y)</td></tr>
<tr class="separator:gaaedc68b3fb7ff16b47e6b4b28442fefd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75e9305b70a93e91c97fe90a3f1b70a4"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga75e9305b70a93e91c97fe90a3f1b70a4"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga75e9305b70a93e91c97fe90a3f1b70a4">crossProduct</a> (const std::array&lt; T, 2 &gt; &amp;x, const std::array&lt; T, 2 &gt; &amp;y)</td></tr>
<tr class="separator:ga75e9305b70a93e91c97fe90a3f1b70a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaeb2ebe2d18595e0b8fe96e4bf3a0ebdd"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gaeb2ebe2d18595e0b8fe96e4bf3a0ebdd"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaeb2ebe2d18595e0b8fe96e4bf3a0ebdd">min</a> (const std::vector&lt; T &gt; &amp;x, const std::vector&lt; T &gt; &amp;y)</td></tr>
<tr class="separator:gaeb2ebe2d18595e0b8fe96e4bf3a0ebdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0e9bfeeb303af797e8c5ef35534e2327"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga0e9bfeeb303af797e8c5ef35534e2327"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga0e9bfeeb303af797e8c5ef35534e2327">min</a> (const std::vector&lt; T &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:ga0e9bfeeb303af797e8c5ef35534e2327"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0aa770072af063106068b7438de21b5e"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga0aa770072af063106068b7438de21b5e"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga0aa770072af063106068b7438de21b5e">min</a> (const T &amp;x, const std::vector&lt; T &gt; &amp;y)</td></tr>
<tr class="separator:ga0aa770072af063106068b7438de21b5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga672cf90d63340e626b464fa6fa533844"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga672cf90d63340e626b464fa6fa533844"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; T &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga672cf90d63340e626b464fa6fa533844">min</a> (const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:ga672cf90d63340e626b464fa6fa533844"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gafb380f4b66055005d240eaeac339c97e"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gafb380f4b66055005d240eaeac339c97e"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; T &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gafb380f4b66055005d240eaeac339c97e">min</a> (const T &amp;x, const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;y)</td></tr>
<tr class="separator:gafb380f4b66055005d240eaeac339c97e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga655022bed66ff99928c4ca6e77cf3659"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_scalar&lt; T &gt;::value &gt;::type * &gt; </td></tr>
<tr class="memitem:ga655022bed66ff99928c4ca6e77cf3659"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga655022bed66ff99928c4ca6e77cf3659">minval</a> (const T &amp;x, T &amp;min_value)</td></tr>
<tr class="separator:ga655022bed66ff99928c4ca6e77cf3659"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6910032e2337b6c33788fc95af690366"><td class="memTemplParams" colspan="2">template&lt;class T , class T1 &gt; </td></tr>
<tr class="memitem:ga6910032e2337b6c33788fc95af690366"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga6910032e2337b6c33788fc95af690366">minval</a> (const std::vector&lt; T &gt; &amp;x, T1 &amp;min_value)</td></tr>
<tr class="separator:ga6910032e2337b6c33788fc95af690366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadd8190df4fa960d5208d2d78535279ec"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gadd8190df4fa960d5208d2d78535279ec"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gadd8190df4fa960d5208d2d78535279ec">max</a> (const std::vector&lt; T &gt; &amp;x, const std::vector&lt; T &gt; &amp;y)</td></tr>
<tr class="separator:gadd8190df4fa960d5208d2d78535279ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0613d89e2e558d9bed551e0abe12672a"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga0613d89e2e558d9bed551e0abe12672a"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga0613d89e2e558d9bed551e0abe12672a">max</a> (const std::vector&lt; T &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:ga0613d89e2e558d9bed551e0abe12672a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96c0d371fc48058d11acac2c5fca81e1"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga96c0d371fc48058d11acac2c5fca81e1"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga96c0d371fc48058d11acac2c5fca81e1">max</a> (const T &amp;x, const std::vector&lt; T &gt; &amp;y)</td></tr>
<tr class="separator:ga96c0d371fc48058d11acac2c5fca81e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga64bb64983415bf1e5ec533a7fe9b90d5"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga64bb64983415bf1e5ec533a7fe9b90d5"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; T &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga64bb64983415bf1e5ec533a7fe9b90d5">max</a> (const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;x, const T &amp;y)</td></tr>
<tr class="separator:ga64bb64983415bf1e5ec533a7fe9b90d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaca67c7d764c0416e53033a97b24c3ccd"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gaca67c7d764c0416e53033a97b24c3ccd"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; T &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaca67c7d764c0416e53033a97b24c3ccd">max</a> (const T &amp;x, const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;y)</td></tr>
<tr class="separator:gaca67c7d764c0416e53033a97b24c3ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9c47762e0e4ab411a9a41dd7cf785b9a"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if&lt; std::is_scalar&lt; T &gt;::value &gt;::type * &gt; </td></tr>
<tr class="memitem:ga9c47762e0e4ab411a9a41dd7cf785b9a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga9c47762e0e4ab411a9a41dd7cf785b9a">maxval</a> (const T &amp;x, T &amp;max_value)</td></tr>
<tr class="separator:ga9c47762e0e4ab411a9a41dd7cf785b9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gad56275c223fc3602abd89f439b91285d"><td class="memTemplParams" colspan="2">template&lt;class T , class T1 &gt; </td></tr>
<tr class="memitem:gad56275c223fc3602abd89f439b91285d"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gad56275c223fc3602abd89f439b91285d">maxval</a> (const std::vector&lt; T &gt; &amp;x, T1 &amp;max_value)</td></tr>
<tr class="separator:gad56275c223fc3602abd89f439b91285d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8b6b58c9b742bb9c3ab7eaad01dd3224"><td class="memTemplParams" colspan="2">template&lt;class T , typename std::enable_if&lt; std::is_scalar&lt; T &gt;::value &gt;::type * &gt; </td></tr>
<tr class="memitem:ga8b6b58c9b742bb9c3ab7eaad01dd3224"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga8b6b58c9b742bb9c3ab7eaad01dd3224">sum</a> (const T &amp;x, T &amp;s)</td></tr>
<tr class="separator:ga8b6b58c9b742bb9c3ab7eaad01dd3224"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga96dd1dde90dfcf4d6fef3d168a085cd2"><td class="memTemplParams" colspan="2">template&lt;class T , class T1 &gt; </td></tr>
<tr class="memitem:ga96dd1dde90dfcf4d6fef3d168a085cd2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga96dd1dde90dfcf4d6fef3d168a085cd2">sum</a> (const std::vector&lt; T &gt; &amp;x, T1 &amp;s)</td></tr>
<tr class="separator:ga96dd1dde90dfcf4d6fef3d168a085cd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa2bd17f264c1ae53a97eef11392dcf03"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gaa2bd17f264c1ae53a97eef11392dcf03"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaa2bd17f264c1ae53a97eef11392dcf03">abs</a> (const std::vector&lt; T &gt; &amp;x)</td></tr>
<tr class="separator:gaa2bd17f264c1ae53a97eef11392dcf03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2e4ef848d41bd281b7ed7c3620a38d7a"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga2e4ef848d41bd281b7ed7c3620a38d7a"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga2e4ef848d41bd281b7ed7c3620a38d7a">pow</a> (std::vector&lt; T &gt; &amp;x, double p)</td></tr>
<tr class="separator:ga2e4ef848d41bd281b7ed7c3620a38d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3c2d8ebc22ddc6089bf7d27a7dd4aea0"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga3c2d8ebc22ddc6089bf7d27a7dd4aea0"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga3c2d8ebc22ddc6089bf7d27a7dd4aea0">norm1</a> (const std::vector&lt; T &gt; &amp;x)</td></tr>
<tr class="separator:ga3c2d8ebc22ddc6089bf7d27a7dd4aea0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga435776342af0a3a83c985e2e14c0b1d5"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga435776342af0a3a83c985e2e14c0b1d5"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga435776342af0a3a83c985e2e14c0b1d5">norm2</a> (const std::vector&lt; T &gt; &amp;x)</td></tr>
<tr class="separator:ga435776342af0a3a83c985e2e14c0b1d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab99395379e521ed5d5e07441a61e1b92"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gab99395379e521ed5d5e07441a61e1b92"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gab99395379e521ed5d5e07441a61e1b92">norm</a> (const std::vector&lt; T &gt; &amp;x, int p)</td></tr>
<tr class="separator:gab99395379e521ed5d5e07441a61e1b92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa10e3ec839a4fe861df1809a2a134637"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gaa10e3ec839a4fe861df1809a2a134637"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaa10e3ec839a4fe861df1809a2a134637">normInf</a> (const std::vector&lt; T &gt; &amp;x)</td></tr>
<tr class="separator:gaa10e3ec839a4fe861df1809a2a134637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8891f3df4dafa40a0bf5b8cd8aef1b8a"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga8891f3df4dafa40a0bf5b8cd8aef1b8a"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#ga8891f3df4dafa40a0bf5b8cd8aef1b8a">dotProduct</a> (const std::vector&lt; T &gt; &amp;x, const std::vector&lt; T &gt; &amp;y)</td></tr>
<tr class="separator:ga8891f3df4dafa40a0bf5b8cd8aef1b8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac12cb054de3201c148013379477d15a"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:gaac12cb054de3201c148013379477d15a"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__MathFunctions.xhtml#gaac12cb054de3201c148013379477d15a">crossProduct</a> (const std::vector&lt; T &gt; &amp;x, const std::vector&lt; T &gt; &amp;y)</td></tr>
<tr class="separator:gaac12cb054de3201c148013379477d15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga4ec6338e8f898ec64973b2e7eb886ac7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; abs </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given a input array, x, returns a array storing the absolute value of elements in x, i.e.: z[i] = abs(x[i]), for i = 0, ..., d-1 where d is the size of x.</p>
<p>Template parameter can be any type such that <a class="el" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs()</a> function is defined. For instance if T = std::array&lt;T1, e&gt;, the <a class="el" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs()</a> function will call itself to return the absolute value of elements in x[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array having the same dimensions of x storing the absolute value of the elements in x. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00591">591</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaa2bd17f264c1ae53a97eef11392dcf03"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; abs </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given a ipnut vector, x, returns a vector storing the absolute value of elements in x, i.e.: z[i] = abs(x[i]), for i = 0, ..., n-1 where n is the size of x.</p>
<p>Template parameter can be any type such that <a class="el" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs()</a> function is defined. For instance if T = std::vector&lt;T1&gt;, the <a class="el" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs()</a> function will call itself to return the absolute value of elements in x[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>vector having the same dimensions of x storing the absolute value of the elements in x. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00748">748</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaaedc68b3fb7ff16b47e6b4b28442fefd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, 3&gt; crossProduct </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, 3 &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the cross product in R3 of input arrays, x and y. Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the cross product product of x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00890">890</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga75e9305b70a93e91c97fe90a3f1b70a4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T crossProduct </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, 2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, 2 &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the cross product in R2 of input arrays, x and y. Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the cross product product of x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00920">920</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaac12cb054de3201c148013379477d15a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; crossProduct </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the cross product in R3 of input vectors, x and y. Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the cross product product of x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l01053">1053</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga982a6463d7e5b2cbcd89a15b7b3ee7cc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T dotProduct </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the scalar product of 2 input arrays, x and y, i.e.: d = sum(x * y).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the scalar product of x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00851">851</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga8891f3df4dafa40a0bf5b8cd8aef1b8a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T dotProduct </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the scalar product of 2 input vectors, x and y, i.e.: d = sum(x * y).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the scalar product of x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l01013">1013</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga119be619426d7a672ab67296a32f04e9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; max </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between two arrays. Given two array x and y, returns z such that: z[i] = max(x[i], y[i]), for all i = 0, ..., d-1 where the d is the size of x and y.</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::array&lt;T1, e&gt;, max function call itself to return the element-wise maximum between x[i] and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of x and y, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00306">306</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gad9246125c2ce0972898af3619bf1a892"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; max </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between array and constant. Given a array x and a constant y, returns z such that: z[i] = max(x[i], y), for all i = 0, ..., d-1 where d is the size of x.</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::array&lt;T1, e&gt;, max function call itself to return the element-wise maximum between x[i] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of x, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00345">345</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gadd8190df4fa960d5208d2d78535279ec"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;T&gt; max </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between two vectors. Given two vectors x and y, returns z such that: z[i] = max(x[i], y[i]), for all i = 0, ..., n-1 where the n = min(x.size(), y.size()).</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::vector&lt;T1&gt;, max function call itself to return the element-wise maximum between x[i] and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of x and y, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00360">360</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga80aeb4577146eaf64ae67348ef840991"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; max </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between constant and array. Given a constant x and a array y, returns z such that: z[i] = max(x, y[i]), for all i = 0, ..., d-1 where d is the size of y.</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::array&lt;T1, e&gt;, max function call itself to return the element-wise maximum between x and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of y, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00384">384</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga0613d89e2e558d9bed551e0abe12672a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; max </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between vector and constant. Given a vector x and a constant y, returns z such that: z[i] = max(x[i], y), for all i = 0, ..., n-1 where n = x.size().</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::vector&lt;T1&gt;, max function call itself to return the element-wise maximum between x[i] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of x, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00401">401</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaa0a692f85b8149297537bce1a314f556"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, size_t n&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;std::array&lt;T, n&gt;, d&gt; max </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between 2D array and constant. Given a 2D array x and a constant y, returns z such that: z[i][j] = max(x[i][j], y), for all j = 0, ..., n-1, i = 0, ..., d-1 where d is the size of x.</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::array&lt;T1, e&gt;, max function call itself to return the element-wise maximum between x[i][j] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of x, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00421">421</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga96c0d371fc48058d11acac2c5fca81e1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; max </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between constant and vector. Given a constant x and a vector y, returns z such that: z[i] = max(x, y[i]), for all i = 0, ..., d-1 where d is the size of y.</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::vector&lt;T1&gt;, max function call itself to return the element-wise maximum between x and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of y, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00441">441</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gab0411917fb58bdc1fb5c128782a621f2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, size_t n&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;std::array&lt;T, n&gt;, d&gt; max </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between constant and 2D array. Given a constant x and a 2D array y, returns z such that: z[i][j] = max(x, y[i][j]), for all j = 0, ..., n-1, i = 0, ..., d-1 where d is the size of y.</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::array&lt;T1, e&gt;, max function call itself to return the element-wise maximum between x and y[i][j].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a array having the same dimensions of y, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00460">460</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga64bb64983415bf1e5ec533a7fe9b90d5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; T &gt; &gt; max </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between 2D vector and constant. Given a 2D vector x and a constant y, returns z such that: z[i][j] = max(x[i][j], y), for all j = 0, ..., x[i].size(), i = 0, ..., n-1 where n = x.size().</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::vector&lt;T1&gt;, max function call itself to return the element-wise maximum between x[i][j] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of x, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00478">478</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaca67c7d764c0416e53033a97b24c3ccd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; T &gt; &gt; max </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise maximum between constant and 2D vector. Given a constant x and a 2D vector y, returns z such that: z[i][j] = max(x, y[i][j]), for all j = 0, ..., y[i].size(), i = 0, ..., n-1 where n = y.size().</p>
<p>Template parameters T can be any type such that max is defined. For instance if T = std::vector&lt;T1&gt;, max function call itself to return the element-wise maximum between x and y[i][j].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of y, storing the element-wise maximum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00518">518</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga435153c79cc6efb4eb34789321e764d2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, class T1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void maxval </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T1 &amp;&#160;</td>
          <td class="paramname"><em>max_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the element with the largest value within a array, i.e. given an input array, x max_value = max(x[i]) over all i = 0, ..., n-1 where n = x.size().</p>
<p>Parameters template can be of any type with the following requirements:</p>
<ol type="1">
<li>minval must be defined for any type T</li>
<li>type T1 must be a scalar type (for instance, T = std::array&lt;double, e&gt;, T1 = double)</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">max_value</td><td>on output stores the elements with the largest value. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00497">497</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga9c47762e0e4ab411a9a41dd7cf785b9a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename std::enable_if&lt; std::is_scalar&lt; T &gt;::value &gt;::type * &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void maxval </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>max_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Overloading of <a class="el" href="group__MathFunctions.xhtml#ga435153c79cc6efb4eb34789321e764d2">maxval()</a> function for scalar types.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input scalar </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">max_value</td><td>on output returns the input value </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00547">547</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gad56275c223fc3602abd89f439b91285d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class T1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void maxval </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T1 &amp;&#160;</td>
          <td class="paramname"><em>max_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the element with the largest value within a vector, i.e. given an input vector, x max_value = max(x[i]) over all i = 0, ..., n-1 where n = x.size().</p>
<p>Parameters template can be of any type with the following requirements:</p>
<ol type="1">
<li>minval must be defined for any type T</li>
<li>type T1 must be a scalar type (for instance, T = std::vector&lt;double&gt;, T1 = double)</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">max_value</td><td>on output stores the elements with the largest value. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00603">603</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaeb2ebe2d18595e0b8fe96e4bf3a0ebdd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; min </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between two vectors. Given two vectors x and y, returns z such that: z[i] = min(x[i], y[i]), for all i = 0, ..., n-1 where the n = min(x.size(), y.size()).</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::vector&lt;T1&gt;, min function call itself to return the element-wise minimum between x[i] and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of x and y, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00066">66</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga88740c05f6c499a2784fcc1a221c1c9f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; min </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between two arrays. Given two array x and y, returns z such that: z[i] = min(x[i], y[i]), for all i = 0, ..., d-1 where the d is the size of x and y.</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::array&lt;T1, e&gt;, min function call itself to return the element-wise minimum between x[i] and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of x and y, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00067">67</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga32c704d096aedd4495610696ea078483"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; min </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between array and constant. Given a array x and a constant y, returns z such that: z[i] = min(x[i], y), for all i = 0, ..., d-1 where d is the size of x.</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::array&lt;T1, e&gt;, min function call itself to return the element-wise minimum between x[i] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of x, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00106">106</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga0e9bfeeb303af797e8c5ef35534e2327"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; min </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between vector and constant. Given a vector x and a constant y, returns z such that: z[i] = min(x[i], y), for all i = 0, ..., n-1 where n = x.size().</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::vector&lt;T1&gt;, min function call itself to return the element-wise minimum between x[i] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of x, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00107">107</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga7729b247db2d23fbae5a211f92fd0a92"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; min </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between constant and array. Given a constant x and a array y, returns z such that: z[i] = min(x, y[i]), for all i = 0, ..., d-1 where d is the size of y.</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::array&lt;T1, e&gt;, min function call itself to return the element-wise minimum between x and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of y, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00145">145</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga0aa770072af063106068b7438de21b5e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; min </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between constant and vector. Given a constant x and a vector y, returns z such that: z[i] = min(x, y[i]), for all i = 0, ..., d-1 where d is the size of y.</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::vector&lt;T1&gt;, min function call itself to return the element-wise minimum between x and y[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of y, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00147">147</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga549530c6789cc261218fa2d0ef5655c7"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, size_t n&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;std::array&lt;T, n&gt;, d&gt; min </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between 2D array and constant. Given a 2D array x and a constant y, returns z such that: z[i][j] = min(x[i][j], y), for all j = 0, ..., n-1, i = 0, ..., d-1 where d is the size of x.</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::array&lt;T1, e&gt;, min function call itself to return the element-wise minimum between x[i][j] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns an array having the same dimensions of x, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00182">182</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga672cf90d63340e626b464fa6fa533844"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; T &gt; &gt; min </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between 2D vector and constant. Given a 2D vector x and a constant y, returns z such that: z[i][j] = min(x[i][j], y), for all j = 0, ..., x[i].size(), i = 0, ..., n-1 where n = x.size().</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::vector&lt;T1&gt;, min function call itself to return the element-wise minimum between x[i][j] and y.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of x, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00184">184</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga54a0496f16acf8e3b5cec8fb5272286c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, size_t n&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;std::array&lt;T, n&gt;, d&gt; min </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::array&lt; std::array&lt; T, n &gt;, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between constant and 2D array. Given a constant x and a 2D array y, returns z such that: z[i][j] = min(x, y[i][j]), for all j = 0, ..., n-1, i = 0, ..., d-1 where d is the size of y.</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::array&lt;T1, e&gt;, min function call itself to return the element-wise minimum between x and y[i][j].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a array having the same dimensions of y, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00221">221</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gafb380f4b66055005d240eaeac339c97e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector &lt; T &gt; &gt; min </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; T &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Element-wise minimum between constant and 2D vector. Given a constant x and a 2D vector y, returns z such that: z[i][j] = min(x, y[i][j]), for all j = 0, ..., y[i].size(), i = 0, ..., n-1 where n = y.size().</p>
<p>Template parameters T can be any type such that min is defined. For instance if T = std::vector&lt;T1&gt;, min function call itself to return the element-wise minimum between x and y[i][j].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>1st argument </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">y</td><td>2nd argument</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a vector having the same dimensions of y, storing the element-wise minimum between x and y. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00224">224</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga655022bed66ff99928c4ca6e77cf3659"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename std::enable_if&lt; std::is_scalar&lt; T &gt;::value &gt;::type * &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void minval </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>min_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Overloading of <a class="el" href="group__MathFunctions.xhtml#ga7865c5a0adeca0b8995d46204eb79480">minval()</a> function for scalar types.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input scalar </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">min_value</td><td>on output returns the input value </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00253">253</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga7865c5a0adeca0b8995d46204eb79480"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, class T1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void minval </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T1 &amp;&#160;</td>
          <td class="paramname"><em>min_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the element with the smallest value within a array, i.e. given an input array, x min_value = min(x[i]) over all i = 0, ..., d-1</p>
<p>Parameters template can be of any type with the following requirements:</p>
<ol type="1">
<li>minval must be defined for any type T</li>
<li>type T1 must be a scalar type (for instance, T = std::array&lt;double, e&gt;, T1 = double)</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">min_value</td><td>on output stores the elements with the smallest value. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00256">256</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga6910032e2337b6c33788fc95af690366"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class T1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void minval </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T1 &amp;&#160;</td>
          <td class="paramname"><em>min_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the element with the smallest value within a vector, i.e. given an input vector, x min_value = min(x[i]) over all i = 0, ..., n-1 where n = x.size().</p>
<p>Parameters template can be of any type with the following requirements:</p>
<ol type="1">
<li>minval must be defined for any type T</li>
<li>type T1 must be a scalar type (for instance, T = std::vector&lt;double&gt;, T1 = double)</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">min_value</td><td>on output stores the elements with the smallest value. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00309">309</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga2f62854fbef31a58c9c4a54a4f939af4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double norm </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the generic norm of a input array, x, i.e.: n = pow( sum( pow( abs(x), p ) ), 1/p ).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>norm index</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the p-norm of the input array. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00754">754</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gab99395379e521ed5d5e07441a61e1b92"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double norm </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the generic norm of a input vector, x, i.e.: n = pow( sum( pow( abs(x), p ) ), 1/p ).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>norm index</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the p-norm of the input vector. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00916">916</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga9f703751e0a174b453e6d4559152992d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double norm1 </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the 1-norm of a input array, x, i.e.: n = sum(abs(x)).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the 1-norm of the input array. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00675">675</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga3c2d8ebc22ddc6089bf7d27a7dd4aea0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double norm1 </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the 1-norm of a input vector, x, i.e.: n = sum(abs(x)).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the 1-norm of the input vector. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00837">837</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gabb983de64002faac55552e131e9096c0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double norm2 </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the 2-norm of a input array, x, i.e.: n = sqrt(sum(pow(x, 2))).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the 2-norm of the input array. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00714">714</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga435776342af0a3a83c985e2e14c0b1d5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double norm2 </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the 2-norm of a input vector, x, i.e.: n = sqrt(sum(pow(x, 2))).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the 2-norm of the input vector. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00877">877</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gae2e106f5028f7b4edb41ef60e562b4e6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double normInf </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the infinity-norm of a input array, x, i.e.: n = maxval(abs(x)).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the inf-norm of the input array. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00805">805</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaa10e3ec839a4fe861df1809a2a134637"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double normInf </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compute the infinity-norm of a input vector, x, i.e.: n = maxval(abs(x)).</p>
<p>Template parameter can be any scalar type</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>on output returns the inf-norm of the input vector. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00966">966</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga6da0697577be6fda9b574b2344c58014"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::array&lt;T, d&gt; pow </td>
          <td>(</td>
          <td class="paramtype">std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given a input array, x, returns a array storing the p-th power of its elements, i.e.: z[i] = pow(x[i], p), for i = 0, ..., d-1 where d is the size of x.</p>
<p>Template parameter can be any type such that pow function is defined. For instance if T = std::array&lt;T1, e&gt;, the <a class="el" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow()</a> function will call itself to return the p-th power of the elements in x[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>power index</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>array having the same dimensions of x storing the p-th power of the elements in x. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="PABLO_bubbles_2D_8cpp-example.xhtml#a11">PABLO_bubbles_2D.cpp</a>, <a class="el" href="PABLO_bubbles_3D_8cpp-example.xhtml#a1">PABLO_bubbles_3D.cpp</a>, <a class="el" href="PABLO_example_00001_8cpp-example.xhtml#a11">PABLO_example_00001.cpp</a>, <a class="el" href="PABLO_example_00002_8cpp-example.xhtml#a8">PABLO_example_00002.cpp</a>, <a class="el" href="PABLO_example_00003_8cpp-example.xhtml#a4">PABLO_example_00003.cpp</a>, <a class="el" href="PABLO_example_00004_8cpp-example.xhtml#a6">PABLO_example_00004.cpp</a>, <a class="el" href="PABLO_example_00005_8cpp-example.xhtml#a9">PABLO_example_00005.cpp</a>, <a class="el" href="PABLO_example_00006_8cpp-example.xhtml#a7">PABLO_example_00006.cpp</a>, <a class="el" href="PABLO_example_00007_8cpp-example.xhtml#a8">PABLO_example_00007.cpp</a>, <a class="el" href="PABLO_example_00008_8cpp-example.xhtml#a7">PABLO_example_00008.cpp</a>, <a class="el" href="PABLO_example_00009_8cpp-example.xhtml#a8">PABLO_example_00009.cpp</a>, and <a class="el" href="PABLO_example_00010_8cpp-example.xhtml#a7">PABLO_example_00010.cpp</a>.</dd>
</dl>
<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00637">637</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga2e4ef848d41bd281b7ed7c3620a38d7a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt; pow </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given a input vector, x, returns a vector storing the p-th power of its elements, i.e.: z[i] = pow(x[i], p), for i = 0, ..., n-1 where n is the size of x.</p>
<p>Template parameter can be any type such that pow function is defined. For instance if T = std::vector&lt;T1&gt;, the <a class="el" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow()</a> function will call itself to return the p-th power of the elements in x[i].</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">p</td><td>power index</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>vector having the same dimensions of x storing the p-th power of the elements in x. </dd></dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00796">796</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga60e7587149a3744797dbf7ed2f6c4292"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T sign </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sign function. Given a a variable of integral type, val, returns: 1 if val &gt; 0 -1, othersize.</p>
<p>Template parameters can be any integral type such that operator&lt; is defined.</p>
<dl class="section return"><dt>Returns</dt><dd>returns the sign of the input value. </dd></dl>

<p>Definition at line <a class="el" href="Operators_8tpp_source.xhtml#l00038">38</a> of file <a class="el" href="Operators_8tpp_source.xhtml">Operators.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga2d8c14ca84b59b6c18e141946001fbfc"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t d, class T1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void sum </td>
          <td>(</td>
          <td class="paramtype">const std::array&lt; T, d &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T1 &amp;&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given a input array, x, returns the sum of its elements, i.e.: s = sum (x[i]) over all i = 0, ..., n-1 where n = x.size().</p>
<p>Parameters template can be of any type with the following requirements:</p>
<ol type="1">
<li>operator += must be defined for type T</li>
<li>type T1 must be a scalar type (for instance, T = std::array&lt;double, e&gt;, T1 = double)</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input array </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">s</td><td>sum of element in x. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__array_8tpp_source.xhtml#l00544">544</a> of file <a class="el" href="MathOperators__array_8tpp_source.xhtml">MathOperators_array.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga8b6b58c9b742bb9c3ab7eaad01dd3224"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , typename std::enable_if&lt; std::is_scalar&lt; T &gt;::value &gt;::type * &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sum </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Overloading of <a class="el" href="group__MathFunctions.xhtml#ga2d8c14ca84b59b6c18e141946001fbfc">sum()</a> function for scalar type.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input scalar </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">s</td><td>on output stores the value of the input scalar </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00644">644</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga96dd1dde90dfcf4d6fef3d168a085cd2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , class T1 &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void sum </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T1 &amp;&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given a input vector, x, returns the sum of its elements, i.e.: s = sum (x[i]) over all i = 0, ..., n-1 where n = x.size().</p>
<p>Parameters template can be of any type with the following requirements:</p>
<ol type="1">
<li>operator += must be defined for type T</li>
<li>type T1 must be a scalar type (for instance, T = std::vector&lt;double&gt;, T1 = double)</li>
</ol>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">x</td><td>input vector </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">s</td><td>sum of element in x. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="MathOperators__vector_8tpp_source.xhtml#l00700">700</a> of file <a class="el" href="MathOperators__vector_8tpp_source.xhtml">MathOperators_vector.tpp</a>.</p>

</div>
</div>
</div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

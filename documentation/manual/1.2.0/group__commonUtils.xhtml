
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - Utils</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Utils<div class="ingroups"><a class="el" href="group__common.xhtml">Common</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Collaboration diagram for Utils:</div>
<div class="dyncontent">
<center><table><tr><td><div class="center"><iframe scrolling="no" frameborder="0" src="group__commonUtils.svg" width="187" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</td></tr></table></center>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga8faa2a7f637d597b0b8179417115353f"><td class="memTemplParams" colspan="2">template&lt;typename T , typename Comparator  = std::less&lt;T&gt;&gt; </td></tr>
<tr class="memitem:ga8faa2a7f637d597b0b8179417115353f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga8faa2a7f637d597b0b8179417115353f">bitpit::utils::addToOrderedVector</a> (const T &amp;value, std::vector&lt; T &gt; &amp;list, Comparator comparator=Comparator())</td></tr>
<tr class="separator:ga8faa2a7f637d597b0b8179417115353f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga928b586992a2e9b043fa2402fc6e0a81"><td class="memTemplParams" colspan="2">template&lt;typename T , typename Comparator  = std::less&lt;T&gt;&gt; </td></tr>
<tr class="memitem:ga928b586992a2e9b043fa2402fc6e0a81"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; T &gt;::const_iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga928b586992a2e9b043fa2402fc6e0a81">bitpit::utils::findInOrderedVector</a> (const T &amp;value, const std::vector&lt; T &gt; &amp;list, Comparator comparator=Comparator())</td></tr>
<tr class="separator:ga928b586992a2e9b043fa2402fc6e0a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa23e28742c346e3492aa57b4e2975033"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#gaa23e28742c346e3492aa57b4e2975033">bitpit::utils::extractWithoutReplacement</a> (int n, int m, std::vector&lt; int &gt; &amp;list)</td></tr>
<tr class="separator:gaa23e28742c346e3492aa57b4e2975033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga863d874e124e6379f126a2f01675a900"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga863d874e124e6379f126a2f01675a900">bitpit::utils::getAfterKeyword</a> (string line_, string key_, char del_, string &amp;result_)</td></tr>
<tr class="separator:ga863d874e124e6379f126a2f01675a900"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga105ed45338d1b589dd0f362c1ceb32c6"><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">bitpit::utils::ltrim</a> (std::string &amp;)</td></tr>
<tr class="separator:ga105ed45338d1b589dd0f362c1ceb32c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga581867dae90ebcb56e2df3cb2a92e863"><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">bitpit::utils::rtrim</a> (std::string &amp;)</td></tr>
<tr class="separator:ga581867dae90ebcb56e2df3cb2a92e863"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8c0a3a248295d848ab26d96ef239bf3c"><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a> (std::string &amp;)</td></tr>
<tr class="separator:ga8c0a3a248295d848ab26d96ef239bf3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac258781ca67f8a33018b0cb1e87beba5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#gac258781ca67f8a33018b0cb1e87beba5">bitpit::utils::lfill</a> (const int &amp;, std::string &amp;, char)</td></tr>
<tr class="separator:gac258781ca67f8a33018b0cb1e87beba5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0979b1f2bec395e380ce10ca72d02553"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga0979b1f2bec395e380ce10ca72d02553">bitpit::utils::rfill</a> (const int &amp;, std::string &amp;, char)</td></tr>
<tr class="separator:ga0979b1f2bec395e380ce10ca72d02553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga00bf0377b50ac81c49b46fb69996414d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga00bf0377b50ac81c49b46fb69996414d">bitpit::utils::zeroPadNumber</a> (int, int)</td></tr>
<tr class="separator:ga00bf0377b50ac81c49b46fb69996414d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga74c227d4f60cdedcd7264a7937fd09b2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga74c227d4f60cdedcd7264a7937fd09b2">bitpit::utils::keywordInString</a> (std::string, std::string)</td></tr>
<tr class="separator:ga74c227d4f60cdedcd7264a7937fd09b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6d129095e8d03237f1ad81cee6efa771"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga6d129095e8d03237f1ad81cee6efa771"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">bitpit::utils::convertString</a> (std::string, T &amp;)</td></tr>
<tr class="separator:ga6d129095e8d03237f1ad81cee6efa771"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9e86fe37cc205a03b2d4054980bade72"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ga9e86fe37cc205a03b2d4054980bade72"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#ga9e86fe37cc205a03b2d4054980bade72">bitpit::utils::convertString</a> (std::string, std::vector&lt; T &gt; &amp;)</td></tr>
<tr class="separator:ga9e86fe37cc205a03b2d4054980bade72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab5933459e2cdaba505d8e52f9b32e6f0"><td class="memTemplParams" colspan="2">template&lt;class T , size_t n&gt; </td></tr>
<tr class="memitem:gab5933459e2cdaba505d8e52f9b32e6f0"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="group__commonUtils.xhtml#gab5933459e2cdaba505d8e52f9b32e6f0">bitpit::utils::convertString</a> (std::string, std::array&lt; T, n &gt; &amp;)</td></tr>
<tr class="separator:gab5933459e2cdaba505d8e52f9b32e6f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga8faa2a7f637d597b0b8179417115353f"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename Comparator  = std::less&lt;T&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::utils::addToOrderedVector </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Comparator&#160;</td>
          <td class="paramname"><em>comparator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Adds an id to an ordered list of unique ids.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>is the type of elements contained in the list </td></tr>
    <tr><td class="paramname">Comparator</td><td>is the type of the binary function used for the comparison of the elements</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>is the value to be added </td></tr>
    <tr><td class="paramname">list</td><td>is the ordered list </td></tr>
    <tr><td class="paramname">comparator</td><td>is a binary function that accepts two arguments (the first of the type pointed by ForwardIterator, and the second, always val), and returns a value convertible to bool. The value returned indicates whether the first argument is considered to go before the second. The function shall not modify any of its arguments. This can either be a function pointer or a function object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true is the id was added to the list, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="utils_8tpp_source.xhtml#l00057">57</a> of file <a class="el" href="utils_8tpp_source.xhtml">utils.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga6d129095e8d03237f1ad81cee6efa771"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::utils::convertString </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>input_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>output_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convertes a string into fundamental data type.</p>
<p>If no data of type T can be extracted from the input string a 0 value, will be stored in output_. If multiple values can be extracted from the input string, only the first value will be saved in output_.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_</td><td>input string </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">output_</td><td>variable storing the value read from string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00279">279</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga9e86fe37cc205a03b2d4054980bade72"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::utils::convertString </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>input_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>output_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convertes a string into a vector of fundamental data type.</p>
<p>If no data of type T can be extracted from the input string a void vector is returned. Values extracted from string are pushed at the end of the vector.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_</td><td>input string </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">output_</td><td>vector storing the value extracted from string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00330">330</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gab5933459e2cdaba505d8e52f9b32e6f0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T , size_t n&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::utils::convertString </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>input_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::array&lt; T, n &gt; &amp;&#160;</td>
          <td class="paramname"><em>output_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convertes a string into a arrayof fundamental data type.</p>
<p>If no data of type T can be extracted from the input string a void array with null elements is returned. If the number of elements which can be extracted from the input string is larger than the array size, only the first n elements are saved in the array.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">input_</td><td>input string </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">output_</td><td>array storing the value extracted from string. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00368">368</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gaa23e28742c346e3492aa57b4e2975033"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void bitpit::utils::extractWithoutReplacement </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extract n integers in the interval [0,m] without replacement. if n = m+1, returns a random permutation of {0, 1, 2, ..., m}</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">n</td><td>number of extraction </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">m</td><td>upper bound of extraction interval </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">list</td><td>vector with size n, storing extracted values </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utils_8cpp_source.xhtml#l00059">59</a> of file <a class="el" href="utils_8cpp_source.xhtml">utils.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga928b586992a2e9b043fa2402fc6e0a81"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename Comparator  = std::less&lt;T&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; T &gt;::const_iterator bitpit::utils::findInOrderedVector </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Comparator&#160;</td>
          <td class="paramname"><em>comparator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Search a value in an ordered list of unique ids.</p>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>is the type of elements contained in the list </td></tr>
    <tr><td class="paramname">Comparator</td><td>is the type of the binary function used for the comparison of the elements</td></tr>
  </table>
  </dd>
</dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>is the value to be searched for </td></tr>
    <tr><td class="paramname">list</td><td>is the ordered list </td></tr>
    <tr><td class="paramname">comparator</td><td>is a binary function that accepts two arguments (the first of the type pointed by ForwardIterator, and the second, always val), and returns a value convertible to bool. The value returned indicates whether the first argument is considered to go before the second. The function shall not modify any of its arguments. This can either be a function pointer or a function object. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true is the value is in the list, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="utils_8tpp_source.xhtml#l00093">93</a> of file <a class="el" href="utils_8tpp_source.xhtml">utils.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga863d874e124e6379f126a2f01675a900"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::utils::getAfterKeyword </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>line_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>key_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>del_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>result_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Given an input string containing several fields separated by a delimiter, returns the field after the specified search key. For instance, if the input string is str = "field_1 ; field_2 ; field_3" getAfterKeyword(str, "field_1, ';', output) returns
output = "field_2"</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line_</td><td>input string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key_</td><td>search key </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">del_</td><td>delimiter char </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">result_</td><td>on output stores the field after the search key</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean flag, (true) if search key has been found, (false) otherwise </dd></dl>

<p>Definition at line <a class="el" href="utilsString_8cpp_source.xhtml#l00057">57</a> of file <a class="el" href="utilsString_8cpp_source.xhtml">utilsString.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga74c227d4f60cdedcd7264a7937fd09b2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool bitpit::utils::keywordInString </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>line_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>key_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check whether a string contains the kwyword or not.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">line_</td><td>input string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">key_</td><td>search key</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>boolean flag (true) if the keyword has been found, (false) otherwise. </dd></dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00261">261</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="gac258781ca67f8a33018b0cb1e87beba5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string bitpit::utils::lfill </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>nchar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>String left-filler. Create a string composed of the input string left-filled with a specified character. E.g. given the input string s = "test", lfill(10, s, '_') will return "______test".</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nchar</td><td>length of the final string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>input string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>char used as filler </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00153">153</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga105ed45338d1b589dd0f362c1ceb32c6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string &amp; bitpit::utils::ltrim </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Left-trim operator for std::string. Remove left trailing spaces from string. For instance, if the input string is "  test_string  ", on output this function returns "test_string  "</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>input string</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to input string </dd></dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00060">60</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga0979b1f2bec395e380ce10ca72d02553"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string bitpit::utils::rfill </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>nchar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>String right-filler. Create a string composed of the input string right-filled with a specified character. E.g. given the input string s = "test", rfill(10, s, '_') will return "test______".</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nchar</td><td>length of the final string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>input string </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">c</td><td>char used as filler </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00189">189</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga581867dae90ebcb56e2df3cb2a92e863"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string &amp; bitpit::utils::rtrim </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Right-trim operator for std::string. Remove right blank spaces from string. For instance, if the input string is "  test_string  ", on output this function returns "  test_string"</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>input string</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to input string </dd></dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00091">91</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga8c0a3a248295d848ab26d96ef239bf3c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string &amp; bitpit::utils::trim </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Trim operator for std::string. Remove left/right blank spaces from string. For instance, if the input string is "  test_string  ", on output this function returns "test_string"</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">s</td><td>input string</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>reference to input string </dd></dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00122">122</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
<a class="anchor" id="ga00bf0377b50ac81c49b46fb69996414d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string bitpit::utils::zeroPadNumber </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nchar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>num</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Given an integer, returns a string of length nchar, composed of the input number and nchar - ndigits '0' characters (where ndigits is the number of digits of the input integer) in the following format "000xxx". If ndigits &gt; nchar, the output string will contaiens ndigits characters storing the digits of the input number. For instance, if nchar = 4 and num = 3, this function returns the string "0003". If nchar = 4, and num = 12345, this function returns "12345".</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">nchar</td><td>string length </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num</td><td>input integer</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>returns a string storing the input number in the format 000xxx. </dd></dl>

<p>Definition at line <a class="el" href="utilsString_8tpp_source.xhtml#l00230">230</a> of file <a class="el" href="utilsString_8tpp_source.xhtml">utilsString.tpp</a>.</p>

</div>
</div>
</div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

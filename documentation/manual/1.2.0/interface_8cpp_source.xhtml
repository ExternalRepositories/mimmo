
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/patchkernel/interface.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_9dc7aa6b5c138a40bfa86c6dff2965ac.xhtml">patchkernel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">interface.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;bitpit_common.hpp&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;bitpit_operators.hpp&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;bitpit_LA.hpp&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;cell.hpp&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;interface.hpp&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a7394006a01ee87408ffd6c05a59a4cae">   53</a></span>&#160;<a class="code" href="classbitpit_1_1Interface.xhtml#a7394006a01ee87408ffd6c05a59a4cae">Interface::Interface</a>()</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    : <a class="code" href="classbitpit_1_1Element.xhtml">Element</a>(),</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      m_owner(NULL_ID), m_ownerFace(-1),</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      m_neigh(NULL_ID), m_neighFace(-1)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a996ed4eab5b579ae1a9f1632c5117e81">   64</a></span>&#160;<a class="code" href="classbitpit_1_1Interface.xhtml#a7394006a01ee87408ffd6c05a59a4cae">Interface::Interface</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    : <a class="code" href="classbitpit_1_1Element.xhtml">Element</a>(id, type),</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      m_owner(NULL_ID), m_ownerFace(-1),</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      m_neigh(NULL_ID), m_neighFace(-1)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a2e3cabbc240d19d2521fa31225dafd91">   75</a></span>&#160;<a class="code" href="classbitpit_1_1Interface.xhtml#a7394006a01ee87408ffd6c05a59a4cae">Interface::Interface</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;other)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    : <a class="code" href="classbitpit_1_1Element.xhtml">Element</a>(other)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;{</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    *<span class="keyword">this</span> = other;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a516da5caeb7bb085377b48bf6f9f867e">   84</a></span>&#160;<a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp; <a class="code" href="classbitpit_1_1Interface.xhtml#a516da5caeb7bb085377b48bf6f9f867e">Interface::operator=</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a>&amp; other)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="classbitpit_1_1Element.xhtml#a0583576dae78b3bfef8b83c0e7ce9904">Element::operator=</a>(other);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    m_owner     = other.m_owner;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    m_ownerFace = other.m_ownerFace;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    m_neigh     = other.m_neigh;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    m_neighFace = other.m_neighFace;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#acc8c546708e8988ce72632b4515c62ef">  117</a></span>&#160;std::array&lt;std::array&lt;double, 3&gt;, 3&gt; Interface::evalRotationFromCartesian(std::array&lt;double, 3&gt; &amp;versor)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="comment">// The rotation matrix has in its rows the versors that define</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// the interface coordinate system.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">//                | [x_int] |</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">//          R =   | [y_int] |</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">//                | [z_int] |</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    std::array&lt;std::array&lt;double, 3&gt;, 3&gt; R;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// x-interface axis</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 3; ++k) {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        R[0][k] = versor[k];</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="comment">// y-interface axis</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(versor[2]) - 1.) &gt; 1e-8) {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        std::array&lt;double, 3&gt; z = {{0.0, 0.0, 1.0}};</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        R[1] = <a class="code" href="group__MathFunctions.xhtml#gaaedc68b3fb7ff16b47e6b4b28442fefd">crossProduct</a>(z, R[0]);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        std::array&lt;double, 3&gt; x = {{1.0, 0.0, 0.0}};</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        R[1] = <a class="code" href="group__MathFunctions.xhtml#gaaedc68b3fb7ff16b47e6b4b28442fefd">crossProduct</a>(x, R[0]);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    R[1] = R[1] / <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(R[1]);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// z-interface axis</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    R[2] = <a class="code" href="group__MathFunctions.xhtml#gaaedc68b3fb7ff16b47e6b4b28442fefd">crossProduct</a>(R[0], R[1]);</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    R[2] = R[2] / <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(R[2]);</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> R;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#aae1a5d35257ff0c401cbd4244a7480d2">  168</a></span>&#160;std::array&lt;std::array&lt;double, 3&gt;, 3&gt; Interface::evalRotationToCartesian(std::array&lt;double, 3&gt; &amp;versor)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__lamanipulation.xhtml#ga0e9a3490052e83f4217825253f58797e">linearalgebra::transpose</a>(evalRotationFromCartesian(versor));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;}</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a9167222c2620af74bb77004ca876bcaa">  179</a></span>&#160;std::array&lt;std::array&lt;double, 3&gt;, 3&gt; <a class="code" href="classbitpit_1_1Interface.xhtml#a9167222c2620af74bb77004ca876bcaa">Interface::evalRotationTranspose</a>(<span class="keyword">const</span> std::array&lt;std::array&lt;double, 3&gt;, 3&gt; &amp;R)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__lamanipulation.xhtml#ga0e9a3490052e83f4217825253f58797e">linearalgebra::transpose</a>(R);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#ac0082ffaa228f420d487907193a31541">  189</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1Interface.xhtml#ac0082ffaa228f420d487907193a31541">Interface::isBorder</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">return</span> (m_neigh &lt; 0);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;}</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a03f84165e058cbbfbf0b0ae780699f2e">  200</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a03f84165e058cbbfbf0b0ae780699f2e">Interface::setOwner</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;owner, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;onwerFace)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    m_owner     = owner;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    m_ownerFace = onwerFace;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a30e9fb181cf924108ec20fbba9f1bd1a">  209</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a30e9fb181cf924108ec20fbba9f1bd1a">Interface::unsetOwner</a>()</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;{</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    m_owner     = Element::NULL_ID;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    m_ownerFace = -1;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a35043572b022d41c46f802d6485e668d">  220</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a35043572b022d41c46f802d6485e668d">Interface::getOwner</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordflow">return</span> m_owner;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">  230</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">Interface::getOwnerFace</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <span class="keywordflow">return</span> m_ownerFace;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a63828b49c892ae7efb216d5930a07072">  241</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a63828b49c892ae7efb216d5930a07072">Interface::setNeigh</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;neigh, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;neighFace)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;{</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    m_neigh     = neigh;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    m_neighFace = neighFace;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;}</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#af1748622857117c4a9a66c48243906f0">  250</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Interface.xhtml#af1748622857117c4a9a66c48243906f0">Interface::unsetNeigh</a>()</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    m_neigh     = Element::NULL_ID;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    m_neighFace = -1;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a2e3bd7c0d660d8602133a456225a2f3e">  261</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a2e3bd7c0d660d8602133a456225a2f3e">Interface::getNeigh</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  <span class="keywordflow">return</span> m_neigh;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;}</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a2604394c34101ea13f179ee9c6e2ffb1">  271</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a2604394c34101ea13f179ee9c6e2ffb1">Interface::getNeighFace</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">return</span> m_neighFace;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;}</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a3821442680dde7bde60f52626dfcd840">  282</a></span>&#160;std::array&lt;long, 2&gt; <a class="code" href="classbitpit_1_1Interface.xhtml#a3821442680dde7bde60f52626dfcd840">Interface::getOwnerNeigh</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    std::array&lt;long, 2&gt; cells;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    cells[0] = m_owner;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    cells[1] = m_neigh;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> cells;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classbitpit_1_1Interface.xhtml#a619a8c5d606e436de361067fe0f57f42">  298</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1Interface.xhtml#a619a8c5d606e436de361067fe0f57f42">Interface::display</a>(std::ostream &amp;out, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> indent)<span class="keyword"> const</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::string t_s = std::string(indent, <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">// If the type is unknown there are no information to display</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() == <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;interface type:    (unknown)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">// General info ----------------------------------------------------- //</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;interface type: &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;ID:             &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;is border:      &quot;</span>;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Interface.xhtml#a2e3bd7c0d660d8602133a456225a2f3e">getNeigh</a>() &gt;= 0)  { out &lt;&lt; <span class="stringliteral">&quot;(false)&quot;</span>; }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">else</span>                  { out &lt;&lt; <span class="stringliteral">&quot;(true)&quot;</span>; }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Connectivity infos --------------------------------------------------- //</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">int</span> nVertices = <a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>();</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;connectivity: [ &quot;</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nVertices - 1; ++i) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        out &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(i) &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    } <span class="comment">//next i</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    out &lt;&lt; <a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(nVertices - 1) &lt;&lt; <span class="stringliteral">&quot; ]&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Onwer infos ---------------------------------------------------------- //</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;onwer ID:    &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Interface.xhtml#a35043572b022d41c46f802d6485e668d">getOwner</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;owner face:  &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">getOwnerFace</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// Onwer infos ---------------------------------------------------------- //</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1Interface.xhtml#a2e3bd7c0d660d8602133a456225a2f3e">getNeigh</a>() &gt;= 0) {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;neighbour ID:    &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Interface.xhtml#a2e3bd7c0d660d8602133a456225a2f3e">getNeigh</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        out &lt;&lt; t_s &lt;&lt; <span class="stringliteral">&quot;neighbour face:  &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1Interface.xhtml#a2604394c34101ea13f179ee9c6e2ffb1">getNeighFace</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">// Explicit instantiation of the Interface containers</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">template</span> <span class="keyword">class </span><a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Interface&gt;</a>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a35043572b022d41c46f802d6485e668d"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a35043572b022d41c46f802d6485e668d">bitpit::Interface::getOwner</a></div><div class="ttdeci">long getOwner() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00220">interface.cpp:220</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a3821442680dde7bde60f52626dfcd840"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a3821442680dde7bde60f52626dfcd840">bitpit::Interface::getOwnerNeigh</a></div><div class="ttdeci">std::array&lt; long, 2 &gt; getOwnerNeigh() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00282">interface.cpp:282</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml"><div class="ttname"><a href="classbitpit_1_1Element.xhtml">bitpit::Element</a></div><div class="ttdoc">The Element class provides an interface for defining elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00107">element.hpp:107</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">bitpit::ElementInfo::UNDEFINED</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00047">element.hpp:47</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_af1748622857117c4a9a66c48243906f0"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#af1748622857117c4a9a66c48243906f0">bitpit::Interface::unsetNeigh</a></div><div class="ttdeci">void unsetNeigh()</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00250">interface.cpp:250</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a7394006a01ee87408ffd6c05a59a4cae"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a7394006a01ee87408ffd6c05a59a4cae">bitpit::Interface::Interface</a></div><div class="ttdeci">Interface()</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00053">interface.cpp:53</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml">bitpit::Interface</a></div><div class="ttdoc">The Interface class defines the interfaces among cells. </div><div class="ttdef"><b>Definition:</b> <a href="interface_8hpp_source.xhtml#l00037">interface.hpp:37</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="group__lamanipulation_xhtml_ga0e9a3490052e83f4217825253f58797e"><div class="ttname"><a href="group__lamanipulation.xhtml#ga0e9a3490052e83f4217825253f58797e">bitpit::linearalgebra::transpose</a></div><div class="ttdeci">void transpose(std::vector&lt; std::vector&lt; T &gt; &gt; &amp;, std::vector&lt; std::vector&lt; T &gt; &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="Manipulation_8tpp_source.xhtml#l00041">Manipulation.tpp:41</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a2604394c34101ea13f179ee9c6e2ffb1"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a2604394c34101ea13f179ee9c6e2ffb1">bitpit::Interface::getNeighFace</a></div><div class="ttdeci">int getNeighFace() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00271">interface.cpp:271</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a516da5caeb7bb085377b48bf6f9f867e"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a516da5caeb7bb085377b48bf6f9f867e">bitpit::Interface::operator=</a></div><div class="ttdeci">Interface &amp; operator=(const Interface &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00084">interface.cpp:84</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_gaaedc68b3fb7ff16b47e6b4b28442fefd"><div class="ttname"><a href="group__MathFunctions.xhtml#gaaedc68b3fb7ff16b47e6b4b28442fefd">crossProduct</a></div><div class="ttdeci">std::array&lt; T, 3 &gt; crossProduct(const std::array&lt; T, 3 &gt; &amp;x, const std::array&lt; T, 3 &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00890">MathOperators_array.tpp:890</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a619a8c5d606e436de361067fe0f57f42"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a619a8c5d606e436de361067fe0f57f42">bitpit::Interface::display</a></div><div class="ttdeci">void display(std::ostream &amp;out, unsigned short int indent) const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00298">interface.cpp:298</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a0583576dae78b3bfef8b83c0e7ce9904"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a0583576dae78b3bfef8b83c0e7ce9904">bitpit::Element::operator=</a></div><div class="ttdeci">Element &amp; operator=(const Element &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00962">element.cpp:962</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a9167222c2620af74bb77004ca876bcaa"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a9167222c2620af74bb77004ca876bcaa">bitpit::Interface::evalRotationTranspose</a></div><div class="ttdeci">static std::array&lt; std::array&lt; double, 3 &gt;, 3 &gt; evalRotationTranspose(const std::array&lt; std::array&lt; double, 3 &gt;, 3 &gt; &amp;R)</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00179">interface.cpp:179</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a03f84165e058cbbfbf0b0ae780699f2e"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a03f84165e058cbbfbf0b0ae780699f2e">bitpit::Interface::setOwner</a></div><div class="ttdeci">void setOwner(const long &amp;owner, const int &amp;onwerFace)</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00200">interface.cpp:200</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a63828b49c892ae7efb216d5930a07072"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a63828b49c892ae7efb216d5930a07072">bitpit::Interface::setNeigh</a></div><div class="ttdeci">void setNeigh(const long &amp;neigh, const int &amp;neighFace)</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00241">interface.cpp:241</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_ac0082ffaa228f420d487907193a31541"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#ac0082ffaa228f420d487907193a31541">bitpit::Interface::isBorder</a></div><div class="ttdeci">bool isBorder() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00189">interface.cpp:189</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_ab119e1a1ca2b9e8ea242fc4c1cb18f07"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">bitpit::Interface::getOwnerFace</a></div><div class="ttdeci">int getOwnerFace() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00230">interface.cpp:230</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a05a9d2b7f35b108a690d96242cdfe5e0"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">bitpit::Element::getType</a></div><div class="ttdeci">ElementInfo::Type getType() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01048">element.cpp:1048</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_gabb983de64002faac55552e131e9096c0"><div class="ttname"><a href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a></div><div class="ttdeci">double norm2(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00714">MathOperators_array.tpp:714</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a30e9fb181cf924108ec20fbba9f1bd1a"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a30e9fb181cf924108ec20fbba9f1bd1a">bitpit::Interface::unsetOwner</a></div><div class="ttdeci">void unsetOwner()</div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00209">interface.cpp:209</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a79eb2e7b6342c00c93b2b0f36214b1f1"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">bitpit::Element::getId</a></div><div class="ttdeci">long getId() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01018">element.cpp:1018</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a69eac8f6d4c5fe4fa4f70cb4be57ee9d"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">bitpit::Element::getVertexCount</a></div><div class="ttdeci">int getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01239">element.cpp:1239</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">bitpit::ElementInfo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00046">element.hpp:46</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a2e3bd7c0d660d8602133a456225a2f3e"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a2e3bd7c0d660d8602133a456225a2f3e">bitpit::Interface::getNeigh</a></div><div class="ttdeci">long getNeigh() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00261">interface.cpp:261</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a611e1742519f6391eb9a80433dabb83a"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">bitpit::Element::getVertex</a></div><div class="ttdeci">long getVertex(const int &amp;vertex) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01272">element.cpp:1272</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

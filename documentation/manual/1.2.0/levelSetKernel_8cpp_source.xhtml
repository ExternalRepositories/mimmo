
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/levelset/levelSetKernel.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_9d03ec41247481073d82a41947e2c425.xhtml">levelset</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">levelSetKernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># include &lt;mpi.h&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"># include &quot;communications.hpp&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"># include &lt;stack&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"># include &lt;unordered_set&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"># include &quot;bitpit_SA.hpp&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"># include &quot;bitpit_operators.hpp&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"># include &quot;levelSet.hpp&quot;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">   51</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">LevelSetKernel::LevelSetKernel</a>() {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a> = NULL ;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">m_commMPI</a> = MPI_COMM_NULL;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;};</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#abb8f5ff29e11ef379a0e2c4f7edbf357">   65</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">LevelSetKernel::LevelSetKernel</a>( <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a> *patch): <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a>() {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a> = patch ;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;};</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a0c7786a70ad675048b4ee33f3b368228">   73</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a0c7786a70ad675048b4ee33f3b368228">LevelSetKernel::~LevelSetKernel</a>(){</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a> = NULL ;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a28fa6f436943fa03dc5bbabc1b0f2f2a">freeCommunicator</a>();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;};</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">   85</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;LevelSetKernel::LSInfo&gt;</a>&amp; <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">LevelSetKernel::getLSInfo</a>(){</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a> ;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;} </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">   93</a></span>&#160;<a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>* <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">LevelSetKernel::getMesh</a>()<span class="keyword"> const</span>{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a> ;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;} </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a00c3c7c18a6075a9713b2289656e41a3">  103</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a00c3c7c18a6075a9713b2289656e41a3">LevelSetKernel::getLS</a>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword">const </span>{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">if</span>( ! <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(i) ){</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">return</span> levelSetDefaults::VALUE;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">return</span> (  <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[i].value );</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    };</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;};</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a27ab641eb7b79b49331c6dc8844bfb13">  118</a></span>&#160;std::array&lt;double,3&gt; <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a27ab641eb7b79b49331c6dc8844bfb13">LevelSetKernel::getGradient</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span>( ! <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(i) ){</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> levelSetDefaults::GRADIENT;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">return</span> (  <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[i].gradient );</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    };</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;};</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ad1f432dee6bd5b55654b3a2bb5c0bb3b">  133</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ad1f432dee6bd5b55654b3a2bb5c0bb3b">LevelSetKernel::getObject</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span>( ! <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(i) ){</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> levelSetDefaults::OBJECT;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">return</span> (  <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[i].<span class="keywordtype">object</span> );</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    };</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;};</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ae0ed0283133a41ba38178940c7779cfa">  148</a></span>&#160;<span class="keywordtype">short</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae0ed0283133a41ba38178940c7779cfa">LevelSetKernel::getSign</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword">const</span>{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span>( ! <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(i) ){</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> levelSetDefaults::SIGN;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">return</span> ( static_cast&lt;short&gt;(<a class="code" href="group__MathFunctions.xhtml#ga60e7587149a3744797dbf7ed2f6c4292">sign</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[i].value)) );</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    };</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;};</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a66f34d2c1fd4bdea07d153aa2b19b203">  163</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a66f34d2c1fd4bdea07d153aa2b19b203">LevelSetKernel::isInNarrowBand</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword">const</span>{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">if</span>( ! <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(i) ){</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> ( <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[i].value) &lt;= <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">m_RSearch</a> );</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    };</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;};</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">  177</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">LevelSetKernel::getSizeNarrowBand</a>()<span class="keyword">const</span>{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">m_RSearch</a>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;};</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">  185</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">LevelSetKernel::setSizeNarrowBand</a>(<span class="keywordtype">double</span> r){</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">m_RSearch</a> = r;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;};</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a2b2069be91249715a7ab170512223a5f">  194</a></span>&#160;std::array&lt;double,3&gt; <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a2b2069be91249715a7ab170512223a5f">LevelSetKernel::computeGradientUpwind</a>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;I ){</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">int</span>                     i, border ;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::array&lt;double,3&gt;    normal, gradient = {{0.,0.,0.}};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">long</span>                    owner;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a>            &amp;cell = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(I) ;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">int</span>                     nI = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>() ;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>*             interfaces = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">getInterfaces</a>() ;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>*             neighbours = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">getAdjacencies</a>() ;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordtype">long</span>                    F, N ;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">double</span>                  value, area;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">for</span>( i=0; i&lt;nI; ++i){</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        F = interfaces[i] ;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        N = neighbours[i] ;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a>       &amp;<span class="keyword">interface </span>= <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;getInterface(F) ;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        owner  = interface.getOwner() ;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        border = interface.isBorder() ;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        area   = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;evalInterfaceArea(F) ;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        normal = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;evalInterfaceNormal(F) ;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span>( owner != I)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            normal = -1. *normal ;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        value = border* <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[I].value + (1-border) *<a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[I].value , <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[N].value ) ;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        gradient += area *value *normal ;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    };</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    gradient = gradient /<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;evalCellVolume(I) ;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> gradient;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;};</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#af7e5c67445679a57c943e2a307973def">  242</a></span>&#160;std::array&lt;double,3&gt; <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#af7e5c67445679a57c943e2a307973def">LevelSetKernel::computeGradientCentral</a>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;I ){</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">int</span>                     i, border ;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    std::array&lt;double,3&gt;    normal, gradient = {{0.,0.,0.}};</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordtype">long</span>                    owner;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a>            &amp;cell = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(I) ;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">int</span>                     nI = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>() ;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>*             interfaces = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">getInterfaces</a>() ;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>*             neighbours = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">getAdjacencies</a>() ;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordtype">long</span>                    F, N;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">double</span>                  value, area;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keywordflow">for</span>( i=0; i&lt;nI; ++i){</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        F = interfaces[i] ;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        N = neighbours[i] ;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a>       &amp;<span class="keyword">interface </span>= <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;getInterface(F) ;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        owner  = interface.getOwner() ;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        border = interface.isBorder() ;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        area   = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;evalInterfaceArea(F) ;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        normal = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;evalInterfaceNormal(F) ;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">if</span>( owner != I)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            normal = -1. *normal ;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        value = border* <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[I].value + (1-border) *(<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[I].value +<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[N].value)/2.  ;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        gradient += area *value *normal ;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    };</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    gradient = gradient /<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;evalCellVolume(I) ;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">return</span> gradient;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;};</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a946d4dd8d2d13a9c4094e2c92d191a8e">  287</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a946d4dd8d2d13a9c4094e2c92d191a8e">LevelSetKernel::propagateSign</a>( std::unordered_map&lt;int,LevelSetObject*&gt; visitors ) {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// We don&#39;t need to propagate the sign in the narrowband</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">// An item is in the narrow band if it has a levelset value that differs</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">// from the defualt value.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    std::unordered_set&lt;long&gt; alreadyEvaluated;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;LSInfo&gt;</a> infoItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.begin() ;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">while</span> (infoItr != <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.end()) {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordtype">double</span> &amp;value = (*infoItr).value;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span>(!<a class="code" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">utils::DoubleFloatingEqual</a>()(<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(value), levelSetDefaults::VALUE)) {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            alreadyEvaluated.insert(infoItr.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>()) ;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        ++infoItr;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="comment">// If the all cells have the correct value we don&#39;t need to progagate the</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// sign</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">if</span> (alreadyEvaluated.size() == (size_t) <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>()) {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="comment">// Define the seed candidates</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">// First list cells in the narroband, then all other cells. The cells</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// outisde the narrowband will be used as seeds only if there are regions</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// of the mesh disconnected from the narrow band.</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    std::vector&lt;long&gt; seedCandidates;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    seedCandidates.reserve(<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>());</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    seedCandidates.assign(alreadyEvaluated.begin(), alreadyEvaluated.end());</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">getCells</a>()) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordtype">long</span> cellId = cell.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordflow">if</span> (alreadyEvaluated.count(cellId) == 0) {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            seedCandidates.push_back(cellId);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="comment">// Identify real seeds and propagate the sign</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> seed : seedCandidates) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="comment">// Get the neighbours that still need to be processed</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="comment">// If a cell is surrounded only by items already evaluated,</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="comment">// this cell can not be uses as a seed.</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        std::stack&lt;long&gt; processList;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">long</span> neigh : <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>( seed )) {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">if</span> (alreadyEvaluated.count(neigh) == 0) {</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                processList.push(neigh);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        }</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">if</span> (processList.empty()) {</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment">// Discard seeds with a LS value equal to 0</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="comment">// If a seed has a value equal to the default value, this means that</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="comment">// the cell is outside the narrow band. To have a meaningful levelset</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="comment">// value we need to evaulate the levelset from scratch.</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordtype">double</span> ls = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a00c3c7c18a6075a9713b2289656e41a3">getLS</a>(seed);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">utils::DoubleFloatingEqual</a>()(<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(ls), levelSetDefaults::VALUE)) {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            ls = levelSetDefaults::VALUE;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> entry : visitors) {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                <span class="keyword">const</span> <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> *visitor = entry.second ;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                ls = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>( visitor-&gt;evaluateLS(<span class="keyword">this</span>, seed), ls) ;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">if</span>( <a class="code" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">utils::DoubleFloatingEqual</a>()(<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(ls), (double) 0.) ) {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment">// Get the sign of the seed</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordtype">short</span> seedSign = ls &gt; 0 ? 1 : -1;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <span class="comment">// Propagate the sign</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">while</span> (!processList.empty()) {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            <span class="keywordtype">long</span> <span class="keywordtype">id</span> = processList.top();</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            processList.pop();</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="comment">// Get the value associated to the id</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            <span class="comment">// A new value needs to be created only if the sign to propagate</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;            <span class="comment">// is different from the default sign.</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            infoItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.find(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            <span class="keywordflow">if</span>( infoItr == <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.end() &amp;&amp; seedSign != levelSetDefaults::SIGN ){</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                infoItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.reclaim(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;            }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="comment">// Update the value</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="keywordflow">if</span>( infoItr != <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.end() ) {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                (*infoItr).value = seedSign * levelSetDefaults::VALUE;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="comment">// Add non-evaluated neighs to the process list</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            std::vector&lt;long&gt; neighs = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>( <span class="keywordtype">id</span> ) ;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">long</span> neigh : neighs) {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                <span class="keywordflow">if</span> (alreadyEvaluated.count(neigh) == 0) {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    processList.push(neigh);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            }</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="comment">// The item has been processeed</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            <span class="comment">// If all cells have been evaluated we can stop the propagation</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            alreadyEvaluated.insert(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="comment">// If all cells have been evaluated we can stop the propagation</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordflow">if</span> (alreadyEvaluated.size() == (size_t) <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>()) {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;};</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#aafce69d71ee87e203e85a83c00fa6bc2">  407</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aafce69d71ee87e203e85a83c00fa6bc2">LevelSetKernel::propagateValue</a>( <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> *visitor ){</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    BITPIT_UNUSED(visitor) ;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="comment">// Propagate outwards ------------------------------------------------------- //</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">solveEikonal</a>(1.0, 1.0);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="comment">// Propagate inwards -------------------------------------------------------- //</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">solveEikonal</a>(1.0, -1.0);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    return ;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;};</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">  428</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">LevelSetKernel::solveEikonal</a>( <span class="keywordtype">double</span> g, <span class="keywordtype">double</span> s ){</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordtype">long</span>                            N( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>()) ;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    std::unordered_map&lt;long,short&gt;   active ;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    { <span class="comment">//FLAG ALIVE, DEAD AND FAR AWAY VERTEXES</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordtype">long</span>    m(0), myId ;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordtype">bool</span>    check;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        std::vector&lt;long&gt;               neighs ;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        std::vector&lt;long&gt;::iterator     it, itbeg, itend ;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;cell : <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">getCells</a>() ){ </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            myId           = cell.getId() ;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a66f34d2c1fd4bdea07d153aa2b19b203">isInNarrowBand</a>(myId) ){ <span class="comment">// dead vertex</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                active.insert( {{myId, 0}} ) ;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            } <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                <span class="comment">// Loop over neighbors</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                check   = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                neighs = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>(myId) ;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                it    = neighs.begin() ;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                itend = neighs.end() ;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <span class="keywordflow">while</span>( !check &amp;&amp;  it != itend  ){</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    check = (s*<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[*it].value &gt;= 0.0) &amp;&amp; (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a>(<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[*it].value) &lt; levelSetDefaults::VALUE) ;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                    ++it ;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                };</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                active.insert( {{ myId, 2 - (int) check }} )  ;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                m += (int) check  ;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        } <span class="comment">//next i</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    { <span class="comment">// Construct min heap data structure </span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordtype">long</span>                            m(0), I(0), myId, J ;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        <span class="keywordtype">double</span>                          value ;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        std::vector&lt;long&gt;               neighs ;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        std::vector&lt;long&gt;::iterator     it, itbeg, itend ;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        std::unordered_map&lt;long,long&gt;   contiguos ;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        std::vector&lt;std::array&lt;int,2&gt;&gt;  map(N), *mapPtr = &amp;map;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <a class="code" href="classbitpit_1_1MinPQueue.xhtml">MinPQueue&lt;double, long&gt;</a> heap(m, <span class="keyword">true</span>, mapPtr);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;cell : <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">getCells</a>() ){ </div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            myId = cell.getId() ;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            contiguos.insert( {{myId,I}} ) ;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">if</span> (active[myId] == 1) {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                <span class="comment">// Solve the quadratic form</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                value = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">updateEikonal</a>(s, g, myId, active);</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <span class="comment">// Store value into heap</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                map[m][0] = I;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                map[I][1] = m; </div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a768f62d128005bb1179f8cc45fb49854">keys</a>[m] = value;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#ac4545644389c4f1e0030f6a513492370">labels</a>[m] = myId;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                <span class="comment">// Update counter</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                m++;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            }</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;            ++I;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        } <span class="comment">//next i</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="comment">// Build min-heap </span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a92d00cf57f84b05881175ab38974de9e">heap_size</a> = m;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a5872ca302513a914f69d5896988b3f9c">buildHeap</a>();</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="comment">// FAST MARCHING</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        <span class="keywordflow">while</span> (heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a92d00cf57f84b05881175ab38974de9e">heap_size</a> &gt; 0) {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;            <span class="comment">// Extract root</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#af4674fac27107b5539cde6073cfcecd4">extract</a>(value, myId);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml">LSInfo</a> &amp;lsInfo = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[myId] ;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;            <span class="comment">// Update level set value</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            lsInfo.<a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">value</a> = s*<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">updateEikonal</a>(s, g, myId, active);</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="comment">// Update m_activeNode to dead node</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;            active.at(myId) = 0;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            <span class="comment">// Upadate far-away neighboors</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;            neighs = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>(myId) ;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            itbeg = neighs.begin() ;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            itend = neighs.end() ;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            <span class="keywordflow">for</span>( it=itbeg; it != itend; ++it){</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                J = *it;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                <span class="comment">// Update the local value</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                value = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">updateEikonal</a>(s, g, J, active);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                <span class="keywordflow">if</span> (active.at(J) == 1) { <span class="comment">// Update value in min-heap</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    I = contiguos[J] ;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                    heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#ab449e33f5be2c4e0a1619a4abfdfe098">modify</a>( map[I][1], value, J );</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                }</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (active.at(J) == 2) {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                    <span class="comment">// Update m_activeNode for neighbor</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                    active.at(J) = 1;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                    I = contiguos[J] ;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;                    <span class="comment">// Insert neighbor into the min heap</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                    map[heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a92d00cf57f84b05881175ab38974de9e">heap_size</a>][0] = I ;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                    map[I][1] = heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a92d00cf57f84b05881175ab38974de9e">heap_size</a>;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                    heap.<a class="code" href="classbitpit_1_1MinPQueue.xhtml#a6c341bde1333cdc4a50dfba4004ddd9a">insert</a>(value, J);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                };</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            };</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        } <span class="comment">//next item</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">return</span>; </div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;};</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div>
<div class="line"><a name="l00576"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">  576</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">LevelSetKernel::updateEikonal</a>( <span class="keywordtype">double</span> s, <span class="keywordtype">double</span> g, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;I, <span class="keyword">const</span> std::unordered_map&lt;long,short&gt; &amp;active ){</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    BITPIT_UNUSED(s) ;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    BITPIT_UNUSED(g) ;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    BITPIT_UNUSED(I) ;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    BITPIT_UNUSED(active) ;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">return</span> levelSetDefaults::VALUE;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;};</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div>
<div class="line"><a name="l00589"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">  589</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">LevelSetKernel::clear</a>( ){</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.clear() ;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;}</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div>
<div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#abe9bfef4718dcfce759381b3cc080a08">  597</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#abe9bfef4718dcfce759381b3cc080a08">LevelSetKernel::clearAfterMeshMovement</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;mapper ){</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; map : mapper ){</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">if</span>( map.entity == adaption::Entity::ENTITY_CELL ){</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="keywordflow">if</span>( map.type == adaption::Type::TYPE_DELETION || </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                map.type == adaption::Type::TYPE_PARTITION_SEND  ||</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                map.type == adaption::Type::TYPE_REFINEMENT  ||</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                map.type == adaption::Type::TYPE_COARSENING  ){</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; parent : map.previous){</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                    <span class="keywordflow">if</span>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(parent) ) </div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.erase(parent,<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.flush() ;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    return ;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;};</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00623"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a0479c0ae3f673e2ef5c93602ed754d22">  623</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a0479c0ae3f673e2ef5c93602ed754d22">LevelSetKernel::filterOutsideNarrowBand</a>( <span class="keywordtype">double</span> newRSearch ){</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;LSInfo&gt;</a> lsItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.begin() ;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">while</span>( lsItr != <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.end() ){</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        <span class="keywordflow">if</span>( <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(lsItr-&gt;<a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">value</a>) &gt; newRSearch ){</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;            lsItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.erase( lsItr.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>(), true );</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            ++lsItr ;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        }</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    };</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.flush() ;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    return ;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;};</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div>
<div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ac9a8b7b521cac1909f5b8179f0b4eddb">  646</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac9a8b7b521cac1909f5b8179f0b4eddb">LevelSetKernel::dump</a>( std::fstream &amp;stream ){</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedVector&lt;LSInfo&gt;::iterator</a>   infoItr, infoEnd = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.end() ;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>(stream, <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">m_RSearch</a>);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>(stream, (<span class="keywordtype">long</span>) <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.size() ) ;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    <span class="keywordflow">for</span>( infoItr=<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.begin(); infoItr!=infoEnd; ++infoItr){</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>(stream, infoItr.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>()) ;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>(stream, infoItr-&gt;value) ;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>(stream, infoItr-&gt;gradient) ;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>(stream, infoItr-&gt;object) ;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    };</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    return ;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;};</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ad3729f94bbbf75abbfe29b6cf32b697f">  667</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ad3729f94bbbf75abbfe29b6cf32b697f">LevelSetKernel::restore</a>( std::fstream &amp;stream ){</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordtype">long</span> i, n, id;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml">LSInfo</a> cellInfo;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>(stream, <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">m_RSearch</a>);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>(stream, n);</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.reserve(n);</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keywordflow">for</span>( i=0; i&lt;n; ++i){</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>(stream, <span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>(stream, cellInfo.<a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">value</a>) ;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>(stream, cellInfo.<a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#abb7663f39862227420f82665fa03c883">gradient</a>) ;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>(stream, cellInfo.<a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#aa604bb01cf3826c7ee1ec890ba3ab30d">object</a>) ;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.insert(<span class="keywordtype">id</span>, cellInfo) ;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    };</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    return ;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;};</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00694"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a36a265e7d009012a8d82d958a42f1590">  694</a></span>&#160;MPI_Comm <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a36a265e7d009012a8d82d958a42f1590">LevelSetKernel::getCommunicator</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">m_commMPI</a>;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;}</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00704"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">  704</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">LevelSetKernel::isCommunicatorSet</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a36a265e7d009012a8d82d958a42f1590">getCommunicator</a>() != MPI_COMM_NULL);</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;}</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a28fa6f436943fa03dc5bbabc1b0f2f2a">  712</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a28fa6f436943fa03dc5bbabc1b0f2f2a">LevelSetKernel::freeCommunicator</a>() {</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">isCommunicatorSet</a>()) {</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordtype">int</span> finalizedCalled;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    MPI_Finalized(&amp;finalizedCalled);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keywordflow">if</span> (finalizedCalled) {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;    }</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    MPI_Comm_free(&amp;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">m_commMPI</a>);</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;}</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a24575637dacead8fb2c1ad27ad7a6be7">  733</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a24575637dacead8fb2c1ad27ad7a6be7">LevelSetKernel::assureMPI</a>( ){</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">isCommunicatorSet</a>()) {</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordflow">return</span> true ;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    MPI_Comm meshComm = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a801bc85779cba6906e87a5a3191b5263">getCommunicator</a>() ;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    <span class="keywordflow">if</span>( meshComm == MPI_COMM_NULL){</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        MPI_Comm_dup(<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a>-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a801bc85779cba6906e87a5a3191b5263">getCommunicator</a>(), &amp;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">m_commMPI</a>);</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;}</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00754"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a4247b7f2c88b4302868449a7eb8e4fd8">  754</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a4247b7f2c88b4302868449a7eb8e4fd8">LevelSetKernel::writeCommunicationBuffer</a>( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;sendList, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;sizeBuffer, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;dataBuffer ){</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keywordtype">long</span> nItems = sendList.size() ;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <span class="keywordtype">int</span> dataSize = 4*<span class="keyword">sizeof</span>(double) +<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) +<span class="keyword">sizeof</span>(long) ;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    dataBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#aff029dd34935dc72a202c4e103f4e078">setCapacity</a>(nItems*dataSize) ;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="comment">//determine elements to send</span></div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordtype">long</span> counter(0) ;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    nItems = 0 ;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;index : sendList){</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keywordflow">if</span>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(index)){</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;lsinfo = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>[index] ;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            dataBuffer &lt;&lt; counter ;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            dataBuffer &lt;&lt; lsinfo.value ;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            dataBuffer &lt;&lt; lsinfo.gradient ;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;            dataBuffer &lt;&lt; lsinfo.object ;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            ++nItems ;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        }</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        ++counter ;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    }</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    dataBuffer.<a class="code" href="classbitpit_1_1SendBuffer.xhtml#a779507f62b4c37c40ce1a3b6e19a458b">squeeze</a>( ) ;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    sizeBuffer &lt;&lt; nItems ;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;};</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#a40025b48f1a63005962acf2689416c98">  790</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a40025b48f1a63005962acf2689416c98">LevelSetKernel::readCommunicationBuffer</a>( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;recvList, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;nItems, <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp;dataBuffer ){</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keywordtype">long</span>    index, id;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i=0; i&lt;nItems; ++i){</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="comment">// Get the id of the element</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        dataBuffer &gt;&gt; index ;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keywordtype">id</span> = recvList[index] ;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="comment">// Assign the data of the element</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;LSInfo&gt;::iterator</a> infoItr ;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keywordflow">if</span>( !<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.exists(<span class="keywordtype">id</span>)){</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            infoItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.reclaim(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            infoItr = <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a>.getIterator(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        dataBuffer &gt;&gt; infoItr-&gt;value ;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        dataBuffer &gt;&gt; infoItr-&gt;gradient ;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        dataBuffer &gt;&gt; infoItr-&gt;object ;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    }</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;};</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_af4674fac27107b5539cde6073cfcecd4"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#af4674fac27107b5539cde6073cfcecd4">bitpit::MinPQueue::extract</a></div><div class="ttdeci">void extract(T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="PQueue_8tpp_source.xhtml#l00485">PQueue.tpp:485</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a36a265e7d009012a8d82d958a42f1590"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a36a265e7d009012a8d82d958a42f1590">bitpit::LevelSetKernel::getCommunicator</a></div><div class="ttdeci">MPI_Comm getCommunicator() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00694">levelSetKernel.cpp:694</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator</a></div><div class="ttdoc">Iterator for the class PiercedVector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00057">piercedVector.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1RecvBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1RecvBuffer.xhtml">bitpit::RecvBuffer</a></div><div class="ttdoc">Buffer to be used for receive communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00104">communications_buffers.hpp:104</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a23bc13fe61a828dd220e6935acac98b1"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">bitpit::LevelSetKernel::solveEikonal</a></div><div class="ttdeci">void solveEikonal(double, double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00428">levelSetKernel.cpp:428</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1SendBuffer_xhtml_a779507f62b4c37c40ce1a3b6e19a458b"><div class="ttname"><a href="classbitpit_1_1SendBuffer.xhtml#a779507f62b4c37c40ce1a3b6e19a458b">bitpit::SendBuffer::squeeze</a></div><div class="ttdeci">void squeeze()</div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8cpp_source.xhtml#l00048">communications_buffers.cpp:48</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml">bitpit::LevelSetKernel</a></div><div class="ttdoc">Mesh specific implementation to calculate the levelset function. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00116">levelSet.hpp:116</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_aafce69d71ee87e203e85a83c00fa6bc2"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#aafce69d71ee87e203e85a83c00fa6bc2">bitpit::LevelSetKernel::propagateValue</a></div><div class="ttdeci">void propagateValue(LevelSetObject *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00407">levelSetKernel.cpp:407</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a1d1d296b0cec58f89ef47f51ce09b20b"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a1d1d296b0cec58f89ef47f51ce09b20b">bitpit::Cell::getInterfaces</a></div><div class="ttdeci">const long * getInterfaces() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00360">cell.cpp:360</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml">bitpit::LevelSetKernel::LSInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00119">levelSet.hpp:119</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ae24049b7ad3aeea7c22b4ad981dda028"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">bitpit::LevelSetKernel::m_commMPI</a></div><div class="ttdeci">MPI_Comm m_commMPI</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00132">levelSet.hpp:132</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_a92d00cf57f84b05881175ab38974de9e"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#a92d00cf57f84b05881175ab38974de9e">bitpit::MinPQueue::heap_size</a></div><div class="ttdeci">int heap_size</div><div class="ttdef"><b>Definition:</b> <a href="SortAlgorithms_8hpp_source.xhtml#l00171">SortAlgorithms.hpp:171</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml">bitpit::LevelSetObject</a></div><div class="ttdoc">Interface class for all objects with respect to whom the levelset function may be computed...</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00219">levelSet.hpp:219</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3de4e780714af6d900307638b37e6f3d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">bitpit::PatchKernel::getCell</a></div><div class="ttdeci">Cell &amp; getCell(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01058">patch_kernel.cpp:1058</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_ac4545644389c4f1e0030f6a513492370"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#ac4545644389c4f1e0030f6a513492370">bitpit::MinPQueue::labels</a></div><div class="ttdeci">std::vector&lt; T1 &gt; labels</div><div class="ttdef"><b>Definition:</b> <a href="SortAlgorithms_8hpp_source.xhtml#l00173">SortAlgorithms.hpp:173</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_af95f90cb1619d65d3613603079bafe44"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">bitpit::Cell::getInterfaceCount</a></div><div class="ttdeci">int getInterfaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00324">cell.cpp:324</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_aa723a897f934aedb771699ddcdb0224a"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">bitpit::LevelSetKernel::m_ls</a></div><div class="ttdeci">PiercedVector&lt; LSInfo &gt; m_ls</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00126">levelSet.hpp:126</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_af9b313c3a966173dfcad7b952bb2ec8e"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">bitpit::LevelSetKernel::isCommunicatorSet</a></div><div class="ttdeci">bool isCommunicatorSet() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00704">levelSetKernel.cpp:704</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a946d4dd8d2d13a9c4094e2c92d191a8e"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a946d4dd8d2d13a9c4094e2c92d191a8e">bitpit::LevelSetKernel::propagateSign</a></div><div class="ttdeci">void propagateSign(std::unordered_map&lt; int, LevelSetObject * &gt;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00287">levelSetKernel.cpp:287</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml">bitpit::Interface</a></div><div class="ttdoc">The Interface class defines the interfaces among cells. </div><div class="ttdef"><b>Definition:</b> <a href="interface_8hpp_source.xhtml#l00037">interface.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_a5872ca302513a914f69d5896988b3f9c"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#a5872ca302513a914f69d5896988b3f9c">bitpit::MinPQueue::buildHeap</a></div><div class="ttdeci">void buildHeap(void)</div><div class="ttdef"><b>Definition:</b> <a href="PQueue_8tpp_source.xhtml#l00390">PQueue.tpp:390</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_af7e5c67445679a57c943e2a307973def"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#af7e5c67445679a57c943e2a307973def">bitpit::LevelSetKernel::computeGradientCentral</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; computeGradientCentral(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00242">levelSetKernel.cpp:242</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml_aa604bb01cf3826c7ee1ec890ba3ab30d"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#aa604bb01cf3826c7ee1ec890ba3ab30d">bitpit::LevelSetKernel::LSInfo::object</a></div><div class="ttdeci">int object</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00122">levelSet.hpp:122</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ac9a8b7b521cac1909f5b8179f0b4eddb"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ac9a8b7b521cac1909f5b8179f0b4eddb">bitpit::LevelSetKernel::dump</a></div><div class="ttdeci">void dump(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00646">levelSetKernel.cpp:646</a></div></div>
<div class="ttc" id="classbitpit_1_1CommunicationBuffer_xhtml_aff029dd34935dc72a202c4e103f4e078"><div class="ttname"><a href="classbitpit_1_1CommunicationBuffer.xhtml#aff029dd34935dc72a202c4e103f4e078">bitpit::CommunicationBuffer::setCapacity</a></div><div class="ttdeci">void setCapacity(size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8tpp_source.xhtml#l00053">communications_buffers.tpp:53</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a801bc85779cba6906e87a5a3191b5263"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a801bc85779cba6906e87a5a3191b5263">bitpit::PatchKernel::getCommunicator</a></div><div class="ttdeci">const MPI_Comm &amp; getCommunicator() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00101">patch_kernel_parallel.cpp:101</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ad3729f94bbbf75abbfe29b6cf32b697f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ad3729f94bbbf75abbfe29b6cf32b697f">bitpit::LevelSetKernel::restore</a></div><div class="ttdeci">void restore(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00667">levelSetKernel.cpp:667</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ad1f432dee6bd5b55654b3a2bb5c0bb3b"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ad1f432dee6bd5b55654b3a2bb5c0bb3b">bitpit::LevelSetKernel::getObject</a></div><div class="ttdeci">int getObject(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00133">levelSetKernel.cpp:133</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_adcce08f0224416149bb4ce6994e3f208"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">bitpit::LevelSetKernel::m_RSearch</a></div><div class="ttdeci">double m_RSearch</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00129">levelSet.hpp:129</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a28fa6f436943fa03dc5bbabc1b0f2f2a"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a28fa6f436943fa03dc5bbabc1b0f2f2a">bitpit::LevelSetKernel::freeCommunicator</a></div><div class="ttdeci">void freeCommunicator()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00712">levelSetKernel.cpp:712</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml">bitpit::MinPQueue</a></div><div class="ttdoc">class for min priority queue. </div><div class="ttdef"><b>Definition:</b> <a href="SortAlgorithms_8hpp_source.xhtml#l00166">SortAlgorithms.hpp:166</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3f366837c2cc93ec757c533813b1ebea"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">bitpit::PatchKernel::getCellCount</a></div><div class="ttdeci">virtual long getCellCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01017">patch_kernel.cpp:1017</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gafd5fdc9c55c9dd00f4d957ac693eea98"><div class="ttname"><a href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a></div><div class="ttdeci">void flushBINARY(std::fstream &amp;str, const data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00275">GenericIO.tpp:275</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a74f698b673fbc06202b443c53a635aae"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">bitpit::LevelSetKernel::updateEikonal</a></div><div class="ttdeci">virtual double updateEikonal(double, double, const long &amp;, const std::unordered_map&lt; long, short &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00576">levelSetKernel.cpp:576</a></div></div>
<div class="ttc" id="structbitpit_1_1utils_1_1DoubleFloatingEqual_xhtml"><div class="ttname"><a href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">bitpit::utils::DoubleFloatingEqual</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00147">utils.hpp:147</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a40025b48f1a63005962acf2689416c98"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a40025b48f1a63005962acf2689416c98">bitpit::LevelSetKernel::readCommunicationBuffer</a></div><div class="ttdeci">void readCommunicationBuffer(const std::vector&lt; long &gt; &amp;, const long &amp;, RecvBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00790">levelSetKernel.cpp:790</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ae0ed0283133a41ba38178940c7779cfa"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ae0ed0283133a41ba38178940c7779cfa">bitpit::LevelSetKernel::getSign</a></div><div class="ttdeci">short getSign(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00148">levelSetKernel.cpp:148</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gaa07df0f5bb3a3b7101a30b94bfee1460"><div class="ttname"><a href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a></div><div class="ttdeci">void absorbBINARY(std::fstream &amp;str, data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00825">GenericIO.tpp:825</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a5b0ba2aed1c754043bf5a7aec4c88794"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">bitpit::LevelSetKernel::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00589">levelSetKernel.cpp:589</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a538026315917904fd637b329f6716a2c"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">bitpit::LevelSetKernel::LevelSetKernel</a></div><div class="ttdeci">LevelSetKernel()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00051">levelSetKernel.cpp:51</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ac8b6c0dc68a43a97efa0bf90b9182a25"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">bitpit::LevelSetKernel::m_mesh</a></div><div class="ttdeci">VolumeKernel * m_mesh</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00127">levelSet.hpp:127</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a18841f81fbb288de48b90666f40d9942"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">bitpit::PiercedIterator::getId</a></div><div class="ttdeci">id_t getId(const id_t &amp;fallback=-1) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00060">piercedVector.tpp:60</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a></div><div class="ttdoc">The Cell class defines the cells. </div><div class="ttdef"><b>Definition:</b> <a href="cell_8hpp_source.xhtml#l00044">cell.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a4247b7f2c88b4302868449a7eb8e4fd8"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a4247b7f2c88b4302868449a7eb8e4fd8">bitpit::LevelSetKernel::writeCommunicationBuffer</a></div><div class="ttdeci">void writeCommunicationBuffer(const std::vector&lt; long &gt; &amp;, SendBuffer &amp;, SendBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00754">levelSetKernel.cpp:754</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_a6c341bde1333cdc4a50dfba4004ddd9a"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#a6c341bde1333cdc4a50dfba4004ddd9a">bitpit::MinPQueue::insert</a></div><div class="ttdeci">void insert(T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="PQueue_8tpp_source.xhtml#l00590">PQueue.tpp:590</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a8af81b96c7c37141cb780fe6d242daba"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">bitpit::LevelSetKernel::setSizeNarrowBand</a></div><div class="ttdeci">void setSizeNarrowBand(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00185">levelSetKernel.cpp:185</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_abe9bfef4718dcfce759381b3cc080a08"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#abe9bfef4718dcfce759381b3cc080a08">bitpit::LevelSetKernel::clearAfterMeshMovement</a></div><div class="ttdeci">void clearAfterMeshMovement(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00597">levelSetKernel.cpp:597</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a00c3c7c18a6075a9713b2289656e41a3"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a00c3c7c18a6075a9713b2289656e41a3">bitpit::LevelSetKernel::getLS</a></div><div class="ttdeci">double getLS(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00103">levelSetKernel.cpp:103</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_a768f62d128005bb1179f8cc45fb49854"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#a768f62d128005bb1179f8cc45fb49854">bitpit::MinPQueue::keys</a></div><div class="ttdeci">std::vector&lt; T &gt; keys</div><div class="ttdef"><b>Definition:</b> <a href="SortAlgorithms_8hpp_source.xhtml#l00172">SortAlgorithms.hpp:172</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a66f34d2c1fd4bdea07d153aa2b19b203"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a66f34d2c1fd4bdea07d153aa2b19b203">bitpit::LevelSetKernel::isInNarrowBand</a></div><div class="ttdeci">bool isInNarrowBand(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00163">levelSetKernel.cpp:163</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml_a8526c7d7e89f667b49a418080d1c06ad"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">bitpit::LevelSetKernel::LSInfo::value</a></div><div class="ttdeci">double value</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00120">levelSet.hpp:120</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a24575637dacead8fb2c1ad27ad7a6be7"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a24575637dacead8fb2c1ad27ad7a6be7">bitpit::LevelSetKernel::assureMPI</a></div><div class="ttdeci">bool assureMPI()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00733">levelSetKernel.cpp:733</a></div></div>
<div class="ttc" id="classbitpit_1_1MinPQueue_xhtml_ab449e33f5be2c4e0a1619a4abfdfe098"><div class="ttname"><a href="classbitpit_1_1MinPQueue.xhtml#ab449e33f5be2c4e0a1619a4abfdfe098">bitpit::MinPQueue::modify</a></div><div class="ttdeci">void modify(int, T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="PQueue_8tpp_source.xhtml#l00728">PQueue.tpp:728</a></div></div>
<div class="ttc" id="classbitpit_1_1SendBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1SendBuffer.xhtml">bitpit::SendBuffer</a></div><div class="ttdoc">Buffer to be used for send communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00090">communications_buffers.hpp:90</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a2b2069be91249715a7ab170512223a5f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a2b2069be91249715a7ab170512223a5f">bitpit::LevelSetKernel::computeGradientUpwind</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; computeGradientUpwind(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00194">levelSetKernel.cpp:194</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5caa1482ad646991f7cc73e4c09ef48e"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">bitpit::Cell::getAdjacencies</a></div><div class="ttdeci">const long * getAdjacencies() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00581">cell.cpp:581</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a17ac9a87e45c5f160316adfa4f5113de"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">bitpit::LevelSetKernel::getSizeNarrowBand</a></div><div class="ttdeci">double getSizeNarrowBand() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00177">levelSetKernel.cpp:177</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1799d61f7a4ea2c0f043ee860de457fe"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">bitpit::PatchKernel::getCells</a></div><div class="ttdeci">PiercedVector&lt; Cell &gt; &amp; getCells()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01047">patch_kernel.cpp:1047</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ab3d9782b45510606ec32bd74aeb7786f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">bitpit::LevelSetKernel::getMesh</a></div><div class="ttdeci">VolumeKernel * getMesh() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00093">levelSetKernel.cpp:93</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga60e7587149a3744797dbf7ed2f6c4292"><div class="ttname"><a href="group__MathFunctions.xhtml#ga60e7587149a3744797dbf7ed2f6c4292">sign</a></div><div class="ttdeci">T sign(const T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="Operators_8tpp_source.xhtml#l00038">Operators.tpp:38</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a79dc855649da2a386b999d991cd7603c"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">bitpit::LevelSetKernel::getLSInfo</a></div><div class="ttdeci">PiercedVector&lt; LSInfo &gt; &amp; getLSInfo()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00085">levelSetKernel.cpp:85</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab0ef8fd5ab115344cb859f66349a5e6f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">bitpit::PatchKernel::findCellFaceNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellFaceNeighs(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01740">patch_kernel.cpp:1740</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a0479c0ae3f673e2ef5c93602ed754d22"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a0479c0ae3f673e2ef5c93602ed754d22">bitpit::LevelSetKernel::filterOutsideNarrowBand</a></div><div class="ttdeci">void filterOutsideNarrowBand(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00623">levelSetKernel.cpp:623</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a0c7786a70ad675048b4ee33f3b368228"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a0c7786a70ad675048b4ee33f3b368228">bitpit::LevelSetKernel::~LevelSetKernel</a></div><div class="ttdeci">virtual ~LevelSetKernel()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00073">levelSetKernel.cpp:73</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml">bitpit::VolumeKernel</a></div><div class="ttdoc">The VolumeKernel class provides an interface for defining volume patches. </div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8hpp_source.xhtml#l00032">volume_kernel.hpp:32</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga88740c05f6c499a2784fcc1a221c1c9f"><div class="ttname"><a href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a></div><div class="ttdeci">std::array&lt; T, d &gt; min(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00067">MathOperators_array.tpp:67</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml_abb7663f39862227420f82665fa03c883"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#abb7663f39862227420f82665fa03c883">bitpit::LevelSetKernel::LSInfo::gradient</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; gradient</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00121">levelSet.hpp:121</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a27ab641eb7b79b49331c6dc8844bfb13"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a27ab641eb7b79b49331c6dc8844bfb13">bitpit::LevelSetKernel::getGradient</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; getGradient(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00118">levelSetKernel.cpp:118</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

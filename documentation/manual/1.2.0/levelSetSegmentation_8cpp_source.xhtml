
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/levelset/levelSetSegmentation.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_9d03ec41247481073d82a41947e2c425.xhtml">levelset</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">levelSetSegmentation.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"># include &quot;levelSet.hpp&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"># include &quot;bitpit_common.hpp&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor"># include &quot;bitpit_operators.hpp&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"># include &quot;bitpit_CG.hpp&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;LevelSetSegmentation::SegInfo::SegInfo( ) : m_segments(levelSetDefaults::LIST), m_support(levelSetDefaults::ELEMENT), m_checked(false){</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;};</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;LevelSetSegmentation::SegInfo::SegInfo( <span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp;list) :m_segments(list), m_support(levelSetDefaults::ELEMENT), m_checked(false) {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;};</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;LevelSetSegmentation::SegInfo::SegInfo( <span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp;list, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;support) :m_segments(list), m_support(support), m_checked(false){</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;};</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#acecb252ef5a3df908217900ab175938c">   69</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#acecb252ef5a3df908217900ab175938c">LevelSetSegmentation::~LevelSetSegmentation</a>() {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    m_segmentation = NULL;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    m_vertexNormal.clear() ;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;};</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">   79</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">LevelSetSegmentation::LevelSetSegmentation</a>( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml">SurfUnstructured</a> *STL) :<a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a>(id) {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    std::vector&lt;std::array&lt;double,3&gt;&gt;   vertexNormal ;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    m_segmentation = STL;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    m_dimension = m_segmentation-&gt;<a class="code" href="classbitpit_1_1SurfaceKernel.xhtml#ad536127ef4ec97ad046f26b09a12f013">getSpaceDimension</a>() ;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">int</span>  i, nV;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">long</span> segId ;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp; segment : m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">getCells</a>() ){</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        segId = segment.getId() ;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        nV = segment.getVertexCount() ;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        vertexNormal.resize(nV) ;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">for</span>(i=0; i&lt;nV; ++i){</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            vertexNormal[i] = m_segmentation-&gt;<a class="code" href="classbitpit_1_1SurfaceKernel.xhtml#ad78c2b69387b5030afe1e2a6647e44e2">evalVertexNormal</a>(segId,i) ;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        m_vertexNormal.insert({{segId,vertexNormal}}) ;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    };</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;};</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a706362bc324587dd7522e194ff538c65">  111</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">LevelSetSegmentation::LevelSetSegmentation</a>( <span class="keyword">const</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml">LevelSetSegmentation</a> &amp;other) :<a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a>(other.getId() ) {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    m_segmentation = other.m_segmentation; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    m_dimension = other.m_dimension ;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    m_vertexNormal = other.m_vertexNormal ;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;};</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#ae4a3143e281b4c1f8f39f49c17aae1c9">  123</a></span>&#160;<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml">LevelSetSegmentation</a>* <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ae4a3143e281b4c1f8f39f49c17aae1c9">LevelSetSegmentation::clone</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">LevelSetSegmentation</a>( *<span class="keyword">this</span> ); </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a9e30faab8e4f91f5c8ef0684ddf23d88">  132</a></span>&#160;<span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp; <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a9e30faab8e4f91f5c8ef0684ddf23d88">LevelSetSegmentation::getSimplexList</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword"> const</span>{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">if</span>( !m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(i) ){</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> levelSetDefaults::LIST;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> ( m_seg[i].m_segments );</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    };</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;};</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a851ff999bc25f8d4be84ae2e049933d0">  147</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a851ff999bc25f8d4be84ae2e049933d0">LevelSetSegmentation::getSupport</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i)<span class="keyword"> const</span>{</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span>( !m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(i) ){</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> levelSetDefaults::ELEMENT ;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">return</span> ( m_seg[i].m_support );</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    };</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;};</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#aa7cf1f1132b99d6df086b46d60653d6b">  162</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#aa7cf1f1132b99d6df086b46d60653d6b">LevelSetSegmentation::isInNarrowBand</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i){</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">return</span>( m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(i) ) ; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;};</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac6b6f336045d9576467c74fda94c653e">  171</a></span>&#160;std::vector&lt;std::array&lt;double,3&gt;&gt; <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac6b6f336045d9576467c74fda94c653e">LevelSetSegmentation::getSimplexVertices</a>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(i) ;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">int</span>                                     j, n, N (cell.<a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>()) ;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    std::vector&lt;std::array&lt;double,3&gt;&gt;       VS(N) ;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">for</span>( n=0; n&lt;N; ++n){</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        j = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(n) ;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        VS[n] = m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(j);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    };</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">if</span>( N &gt; 3){</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;levelset: only segments and triangles supported in LevelSetSegmentation !!&quot;</span> &lt;&lt; std::endl ;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> VS;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;};</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">  197</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">LevelSetSegmentation::lsFromSimplex</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *visitee, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;search, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp; signd, <span class="keywordtype">bool</span> filter){</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>                &amp;mesh  = *(visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">getMesh</a>() ) ;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordtype">long</span>                        id ;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordtype">double</span>                      s, d, value;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::array&lt;double,3&gt;        n, xP, P;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::unordered_set&lt;long&gt;::iterator    it, itend ;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;SegInfo&gt;</a>    segIt ;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;LevelSetKernel::LSInfo&gt;</a>       &amp;lsInfo = visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">getLSInfo</a>() ;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">for</span>( segIt=m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(); segIt!=m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>(); ++segIt ){</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        SegInfo                 &amp;segInfo = *segIt ;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">if</span>( segInfo.m_checked == <span class="keyword">false</span>){</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            segInfo.m_checked = true ;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            std::unordered_set&lt;long&gt;    &amp;segs = segInfo.m_segments ;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordtype">long</span>                        &amp;supp = segInfo.m_support ;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordtype">id</span>    = segIt.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>() ;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            it    = segs.begin();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            itend = segs.end() ;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            P = mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">evalCellCentroid</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keyword">auto</span> lsInfoItr = lsInfo.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a24d343798113ee633329df20374ab0d7">find</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">if</span>( lsInfoItr != lsInfo.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>() ){</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                value = <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a>( lsInfoItr-&gt;value );</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                value = 1e18;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            <span class="keywordflow">while</span>( it != itend ){</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">infoFromSimplex</a>(P, *it, d, s, xP, n);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">if</span> ( d &lt;= search ){</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    <span class="keywordflow">if</span>( d&lt;value ) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                        <span class="keywordflow">if</span> (lsInfoItr == lsInfo.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>()) {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                            lsInfoItr = lsInfo.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">reclaim</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                        }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        value   = d ;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        lsInfoItr-&gt;object   = <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#a095c1b5e1bb5fd841b82f50a71a50dad">getId</a>();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                        lsInfoItr-&gt;value    = ( signd *s  + (!signd) *1.) *d; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        lsInfoItr-&gt;gradient = ( signd *1. + (!signd) *s ) *n ;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                        supp                = *it ;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                    }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    ++it ;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                } <span class="comment">//end if distance</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    <span class="keywordflow">if</span>( filter){ </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                        it = segs.erase(it) ; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        ++it ;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    };</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                };</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            } <span class="comment">//end foreach triangle</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">if</span>( segs.size() == 0 ){</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">erase</a>(<span class="keywordtype">id</span>,<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            };</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        };</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    };<span class="comment">// foreach cell</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">flush</a>() ;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;};</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">  292</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">LevelSetSegmentation::infoFromSimplex</a>( <span class="keyword">const</span> std::array&lt;double,3&gt; &amp;p, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;i, <span class="keywordtype">double</span> &amp;d, <span class="keywordtype">double</span> &amp;s, std::array&lt;double,3&gt; &amp;x, std::array&lt;double,3&gt; &amp;n )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(i) ;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordtype">int</span> nV = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>() ;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keyword">auto</span> itr = m_vertexNormal.find(i) ;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    assert( itr != m_vertexNormal.end() ) ;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">if</span>( nV == 1){</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordtype">long</span> <span class="keywordtype">id</span> = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(0) ;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        d = <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>( p- m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(<span class="keywordtype">id</span>) ) ;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        n.fill(0.) ;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span>( nV == 2){</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="keywordtype">long</span> id0 = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(0) ;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordtype">long</span> id1 = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(1) ;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        std::array&lt;double,2&gt; lambda ;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        d= <a class="code" href="group__CG.xhtml#gae545eae55c3c1de0e5d5ddd1e61faebf">CGElem::distancePointSegment</a>( p, m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(id0), m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(id1), x, lambda ) ;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        n  = lambda[0] *itr-&gt;second[0] ;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        n += lambda[1] *itr-&gt;second[1] ;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        n /= <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(n) ;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nV == 3){</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordtype">long</span> id0 = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(0) ;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordtype">long</span> id1 = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(1) ;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordtype">long</span> id2 = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(2) ;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        std::array&lt;double,3&gt; lambda ;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        d= <a class="code" href="group__CG.xhtml#ga4e5d22fcba141d307e6fe304aa923697">CGElem::distancePointTriangle</a>( p, m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(id0), m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(id1), m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(id2), x, lambda ) ;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        n  = lambda[0] *itr-&gt;second[0] ;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        n += lambda[1] *itr-&gt;second[1] ;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        n += lambda[2] *itr-&gt;second[2] ;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        n /= <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(n) ;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    } <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; simplex not supported in LevelSetSegmentation::infoFromSimplex &quot;</span> &lt;&lt; nV &lt;&lt; std::endl ;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    };</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    s = <a class="code" href="group__MathFunctions.xhtml#ga60e7587149a3744797dbf7ed2f6c4292">sign</a>( <a class="code" href="group__MathFunctions.xhtml#ga982a6463d7e5b2cbcd89a15b7b3ee7cc">dotProduct</a>(n, p - x) );</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    return ;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;};</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac0f2a1a1d90de202ee3f0adef6af3a82">  349</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac0f2a1a1d90de202ee3f0adef6af3a82">LevelSetSegmentation::seedNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a> *visitee, std::vector&lt;std::array&lt;double,3&gt;&gt; &amp;VS, std::vector&lt;int&gt; &amp;I){</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>                        &amp;mesh = *(visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">getMesh</a>()) ;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordtype">bool</span>                                found(<span class="keyword">false</span>) ;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordtype">int</span>                                 dim( mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() ) ;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    std::array&lt;double,3&gt;                B0, B1;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    std::vector&lt;std::array&lt;double,3&gt;&gt;   VP ;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d">getBoundingBox</a>(B0, B1) ;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    B0 = B0 - visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">getSizeNarrowBand</a>() ;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    B1 = B1 + visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">getSizeNarrowBand</a>() ;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    I.clear() ;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;P : VS){</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordflow">if</span>(  <a class="code" href="group__CG.xhtml#ga5cfa556dd5a2e5b1aad6d3f3f5de1abd">CGElem::intersectPointBox</a>( P, B0, B1, dim ) ) {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            I.push_back( mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">locatePoint</a>(P) );</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            found =  true ;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        };</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    <span class="keywordflow">if</span>( !found &amp;&amp; <a class="code" href="group__CG.xhtml#gafcc27b894cfe337cd6d3623a41bb2819">CGElem::intersectBoxSimplex</a>( B0, B1, VS, VP, dim ) ) {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;P : VP){</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            I.push_back( mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">locatePoint</a>(P) );</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;            found = true ;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        };</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> found ;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;};</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac80e918a6d3fd5ea5d767d38f785dbc1">  388</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac80e918a6d3fd5ea5d767d38f785dbc1">LevelSetSegmentation::evaluateLS</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *visitee, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordtype">double</span>                      d, s, ls;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    std::array&lt;double,3&gt;        P, X, temp;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    P  = visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">getMesh</a>()-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">evalCellCentroid</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    ls = levelSetDefaults::VALUE;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp; segment : m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">getCells</a>() ){</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">infoFromSimplex</a>(P, segment.getId(), d, s, X, temp);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        d = <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a>(d) ;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keywordflow">if</span> ( d &lt; ls &amp;&amp; !<a class="code" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">utils::DoubleFloatingEqual</a>()(s, (<span class="keywordtype">double</span>) 0.)) {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            ls = d ;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    }</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">return</span> ls;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;};</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#ab960e3283c7b5102282a03e34edb5e6c">  416</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ab960e3283c7b5102282a03e34edb5e6c">LevelSetSegmentation::getBoundingBox</a>( std::array&lt;double,3&gt; &amp;minP, std::array&lt;double,3&gt; &amp;maxP )<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d">getBoundingBox</a>(minP,maxP) ;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;};</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a2705708080ee9532327e5ce5ebaf0b7d">  426</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a2705708080ee9532327e5ce5ebaf0b7d">LevelSetSegmentation::computeLSInNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *visitee, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;RSearch, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;signd ){</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">if</span>( <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a>* lsCartesian = dynamic_cast&lt;LevelSetCartesian*&gt;(visitee) ){</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>( lsCartesian, RSearch ) ;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a>* lsOctree = dynamic_cast&lt;LevelSetOctree*&gt;(visitee) ){</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>( lsOctree, RSearch ) ;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    };</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">lsFromSimplex</a>(visitee, RSearch, signd, <span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;};</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a25a324abc0f55bae7214f4ccff8c9cab">  448</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a25a324abc0f55bae7214f4ccff8c9cab">LevelSetSegmentation::updateLSInNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *visitee, <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;mapper, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;RSearch, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;signd ){</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordflow">if</span>( <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a>* lsCartesian = dynamic_cast&lt;LevelSetCartesian*&gt;(visitee) ){</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>( lsCartesian, RSearch ) ;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a>* lsOctree = dynamic_cast&lt;LevelSetOctree*&gt;(visitee) ){</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a37502fe1c723a7d646173fdf2c61e403">updateSimplexToCell</a>( lsOctree, mapper, RSearch ) ; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    };</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">lsFromSimplex</a>(visitee, RSearch, signd, <span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;};</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div>
<div class="line"><a name="l00468"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">  468</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">LevelSetSegmentation::associateSimplexToCell</a>( <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a> *visitee, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;RSearch ){</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>                            &amp;mesh = *(visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">getMesh</a>() ) ;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    std::vector&lt;std::array&lt;double,3&gt;&gt;       VS(3);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    std::vector&lt; int &gt;                      stack, temp ;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    std::vector&lt; std::array&lt;double,3&gt; &gt;     cloud ;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    std::vector&lt;double&gt;                     d;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    std::vector&lt;double&gt;::iterator           vit;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    std::vector&lt; std::array&lt;double,3&gt; &gt;     xP ;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    std::vector&lt; int &gt;                      where ;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    std::vector&lt;int&gt;                        flag( mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>(), -1);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordtype">int</span>                                     i, N( m_segmentation-&gt;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>() );</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    std::vector&lt;long&gt;                       neighs ;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;SegInfo&gt;::iterator</a> data ;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    stack.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">reserve</a>(128) ;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    temp.reserve(128) ;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    cloud.reserve(128) ;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    xP.resize(1) ;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    where.resize(1) ;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="comment">// --------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="comment">// COMPUTE THE SDF VALUE AT EACH MESH POINT                                   //</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; N; i++) {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="comment">// Segments vertex ------------------------------------------------------ //</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        VS  = <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac6b6f336045d9576467c74fda94c653e">getSimplexVertices</a>( i ) ;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac0f2a1a1d90de202ee3f0adef6af3a82">seedNarrowBand</a>( visitee, VS, stack ) ; <span class="comment">//TODO check if seed is found correctly if segmentation is outside grid but within narrow band</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <span class="comment">//-----------------------------------------------------------------</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        <span class="comment">//Propagate from seed</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordflow">while</span> (stack.size() &gt; 0) {</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="comment">// Extract point from lifo</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            cloud.clear() ;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp; I : stack){</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                cloud.push_back( mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">evalCellCentroid</a>(I) ) ;  </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            };</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;            d = <a class="code" href="group__CG.xhtml#ga458674818b75b1483c3230aed5e79489">CGElem::distanceCloudSimplex</a>( cloud, VS, xP, where); </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            vit = d.begin() ;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;            <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp; I : stack){</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <span class="keywordflow">if</span> ( *vit &lt;= RSearch ) {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                    <span class="keywordflow">if</span>( m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(I) ){</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                        m_seg[I].m_segments.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>(i) ;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                        data = m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">reclaim</a>(I) ;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                        data-&gt;m_segments.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>(i);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    };</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                    neighs  = mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>(I) ; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;  neigh : neighs){</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                        <span class="keywordflow">if</span>( flag[neigh] != i) {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                            temp.push_back( neigh) ;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                            flag[neigh] = i ;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                        };</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                } <span class="comment">//end if distance</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                ++vit ;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            };</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            stack.clear() ;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            stack.swap( temp ) ;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        } <span class="comment">//end while</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    } <span class="comment">//end for i</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;};</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a1b5205cea050a46117eb93fe4cafdde9">  563</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">LevelSetSegmentation::associateSimplexToCell</a>( <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a> *visitee, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;RSearch){</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>                &amp;mesh = *(visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">getMesh</a>()) ;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keywordtype">int</span>                         dim(mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>()) ;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordtype">long</span>                        id, icart;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordtype">int</span>                         i;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="keywordtype">double</span>                      size ;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    std::array&lt;double,3&gt;        C, C0, C1, G0, G1, octrBB0, octrBB1, triBB0, triBB1 ;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;SegInfo&gt;::iterator</a> data;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="comment">// mesh size corresponding to RSearch</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    size = visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#a9eae2ac31f7becc1b75e4213f2e1c67d">computeSizeFromRSearch</a>( RSearch ) ;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d">getBoundingBox</a>(octrBB0,octrBB1) ;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ab960e3283c7b5102282a03e34edb5e6c">getBoundingBox</a>( triBB0, triBB1 );</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    G0 = triBB0 - RSearch ;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    G1 = triBB1 + RSearch ;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">if</span>( <a class="code" href="group__CG.xhtml#ga28d8df159d89502ca11a1621114bef2d">CGElem::intersectBoxBox</a>(octrBB0,octrBB1,G0,G1,C0,C1) ) { <span class="comment">//intersect two Bounding Boxes around geometry and local grid</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        <span class="comment">// snap bounding box to grid and create cartesian grid</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        std::array&lt;int,3&gt;    nc ;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordflow">for</span>( i=0; i&lt;dim; ++i){</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            C0[i] =  octrBB0[i] + size *   (int) ( ( C0[i] - octrBB0[i] ) / size ) ;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            C1[i] =  octrBB0[i] + size * ( (int) ( ( C1[i] - octrBB0[i] ) / size ) +1 ) ;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            nc[i] = round( ( C1[i] - C0[i] ) /size ) ;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        };</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="comment">// calculate LS triangle lists on cartesian mesh and map on pablo</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <a class="code" href="classbitpit_1_1VolCartesian.xhtml">VolCartesian</a>            cmesh( 0, dim, C0, C1-C0, nc) ;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a>       auxLS(cmesh) ;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml">LevelSetSegmentation</a>    objLS(*<span class="keyword">this</span>) ;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        <span class="keywordtype">double</span>                  localRSearch = auxLS.<a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml#a3832ac56df2f84f586ce0b2e373c4eae">computeSizeNarrowBand</a>(<span class="keyword">this</span>) ;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        auxLS.<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">setSizeNarrowBand</a>(localRSearch);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        objLS.<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>(&amp;auxLS, auxLS.<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">getSizeNarrowBand</a>() ) ; </div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp; cell : mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">getCells</a>() ){</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <span class="keywordtype">id</span> = cell.getId() ;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            C  = mesh.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">evalCellCentroid</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            <span class="keywordflow">if</span>( cmesh.<a class="code" href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">isPointInside</a>(C) ){</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                icart = cmesh.<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a7e678bf1f4f1990dc0438eaa31796eab">locatePoint</a>(C) ;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                <span class="keywordflow">if</span>( objLS.<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#aa7cf1f1132b99d6df086b46d60653d6b">isInNarrowBand</a>(icart) ){</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                    <span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp;list = objLS.<a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a9e30faab8e4f91f5c8ef0684ddf23d88">getSimplexList</a>(icart) ;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                    data = m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a1822bc5d038cda38f8fa7f2e4d314067">emplace</a>(<span class="keywordtype">id</span>, list) ;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                };</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            };</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        };</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }; <span class="comment">//endif intersect</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;};</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a37502fe1c723a7d646173fdf2c61e403">  634</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a37502fe1c723a7d646173fdf2c61e403">LevelSetSegmentation::updateSimplexToCell</a>( <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a> *visitee, <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;mapper, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;newRSearch){</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordtype">double</span>      oldSize, newSize ;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    oldSize = visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#a9eae2ac31f7becc1b75e4213f2e1c67d">computeSizeFromRSearch</a>( visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">getSizeNarrowBand</a>() ) ;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    newSize = visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#a9eae2ac31f7becc1b75e4213f2e1c67d">computeSizeFromRSearch</a>( newRSearch ) ;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordflow">if</span>( newSize-oldSize &lt;= 1.e-8 ) { <span class="comment">//size of narrow band decreased or remained the same -&gt; mapping</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;        std::unordered_map&lt;long,std::unordered_set&lt;long&gt;&gt; oldSegs ;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        std::unordered_map&lt;long,std::unordered_set&lt;long&gt;&gt;::iterator oldSegsIt ;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; info : mapper ){</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordflow">if</span>( info.entity == adaption::Entity::ENTITY_CELL ){</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; parent : info.previous){ <span class="comment">//save old data and delete element</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                    <span class="keywordflow">if</span>( m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(parent) ){</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                        SegInfo *seg =  &amp;m_seg[parent] ;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                        oldSegs.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>({{ parent, seg-&gt;m_segments }}) ;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                        m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">erase</a>(parent,<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                    }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                }</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            }</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        }</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;        m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">flush</a>() ;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; info : mapper ){ <span class="comment">//forall mesh modifications</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            <span class="keywordflow">if</span>( info.entity == adaption::Entity::ENTITY_CELL){ <span class="comment">//check if changes on cells</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; child : info.current){ <span class="comment">// forall new elements</span></div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;SegInfo&gt;::iterator</a> seg =  m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">reclaim</a>(child) ;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                    seg-&gt;m_checked = false ;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    seg-&gt;m_segments.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4cb0dfa4437e32f46533d7a7efe53488">clear</a>() ;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; parent : info.previous){ <span class="comment">//take their parents</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                        oldSegsIt = oldSegs.find(parent);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                        <span class="keywordflow">if</span>( oldSegsIt != oldSegs.end() ) <span class="comment">//add their information if any</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                            seg-&gt;m_segments.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>( oldSegsIt-&gt;second.begin(), oldSegsIt-&gt;second.end() ) ;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                    }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                }</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            }</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        }</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    } <span class="keywordflow">else</span> { <span class="comment">//size of narrow band increased -&gt; recalculation</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;        m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4cb0dfa4437e32f46533d7a7efe53488">clear</a>() ;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">clear</a>() ;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>( visitee, visitee-&gt;<a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">getSizeNarrowBand</a>() ) ; </div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    };</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    return ;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;};</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div>
<div class="line"><a name="l00697"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a82fae0c93d9cc4cdd7d132ad47ba252c">  697</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a82fae0c93d9cc4cdd7d132ad47ba252c">LevelSetSegmentation::clearAfterMeshMovement</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;mapper ){</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; map : mapper ){</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="keywordflow">if</span>( map.entity == adaption::Entity::ENTITY_CELL ){</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keywordflow">if</span>( map.type == adaption::Type::TYPE_DELETION || </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                map.type == adaption::Type::TYPE_PARTITION_SEND  ||</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                map.type == adaption::Type::TYPE_REFINEMENT  ||</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                map.type == adaption::Type::TYPE_COARSENING  ){</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                <span class="keywordflow">for</span> ( <span class="keyword">auto</span> &amp; parent : map.previous){</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                    <span class="keywordflow">if</span>( m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(parent) ) </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                        m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">erase</a>(parent,<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            }</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        }</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">flush</a>() ;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    return ;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;};</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#ada4f28d606c67e795d79835b54b78786">  723</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ada4f28d606c67e795d79835b54b78786">LevelSetSegmentation::dumpDerived</a>( std::fstream &amp;stream ){</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordtype">int</span>                 s;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    std::vector&lt;long&gt;   temp;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedVector&lt;SegInfo&gt;::iterator</a> segItr, segEnd = m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>() ;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>( stream, (<span class="keywordtype">long</span>) m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03">size</a>() ) ;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    <span class="keywordflow">for</span>( segItr = m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(); segItr != segEnd; ++segItr){</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        s = segItr-&gt;m_segments.size() ;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;        temp.resize(s);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        std::copy( segItr-&gt;m_segments.begin(), segItr-&gt;m_segments.end(), temp.begin() );</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>( stream, segItr.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>() );</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>( stream, s );</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>( stream, temp );</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>( stream, segItr-&gt;m_support );</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a>( stream, segItr-&gt;m_checked );</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    }</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;};</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00752"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a168ce68cf265facc7adf5d6607718d59">  752</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a168ce68cf265facc7adf5d6607718d59">LevelSetSegmentation::restoreDerived</a>( std::fstream &amp;stream ){</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="keywordtype">int</span>     s;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <span class="keywordtype">long</span>    i, n, id;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    SegInfo cellData ;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    std::vector&lt;long&gt;   temp;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>( stream, n ) ;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">reserve</a>(n);</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="keywordflow">for</span>( i=0; i&lt;n; ++i){</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>( stream, <span class="keywordtype">id</span> );</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>( stream, s );</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        temp.resize(s) ;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>( stream, temp );</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>( stream, cellData.m_support );</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <a class="code" href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a>( stream, cellData.m_checked );</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        std::copy( temp.begin(), temp.end(), std::inserter( cellData.m_segments, cellData.m_segments.end() ) );</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>(<span class="keywordtype">id</span>,cellData) ;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    }</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;};</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00789"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#a2f588c1d6cc5899483e86819aca4428f">  789</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a2f588c1d6cc5899483e86819aca4428f">LevelSetSegmentation::writeCommunicationBuffer</a>( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;sendList, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;sizeBuffer, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;dataBuffer ){</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordtype">long</span> nItems = sendList.size(), counter(0) ;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    <span class="keywordtype">int</span> dataSize = 10*<span class="keyword">sizeof</span>(long)  +<span class="keyword">sizeof</span>(<span class="keywordtype">long</span>) +<span class="keyword">sizeof</span>(bool) +<span class="keyword">sizeof</span>(<span class="keywordtype">long</span>) +<span class="keyword">sizeof</span>(int) ;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    dataBuffer.<a class="code" href="classbitpit_1_1CommunicationBuffer.xhtml#aff029dd34935dc72a202c4e103f4e078">setCapacity</a>(nItems*dataSize) ;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    <span class="comment">//determine elements to send</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    nItems = 0 ;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;index : sendList){</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keywordflow">if</span>( m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(index)){</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keyword">const</span> <span class="keyword">auto</span> &amp;seginfo = m_seg[index] ;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            dataBuffer &lt;&lt; counter ;</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            dataBuffer &lt;&lt; (int) seginfo.m_segments.size() ;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp; seg : seginfo.m_segments ){</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;                dataBuffer &lt;&lt; seg ;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            };</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;            dataBuffer &lt;&lt; seginfo.m_support ;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;            dataBuffer &lt;&lt; seginfo.m_checked ;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            ++nItems ;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        }</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        ++counter ;</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    }</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    dataBuffer.<a class="code" href="classbitpit_1_1SendBuffer.xhtml#a779507f62b4c37c40ce1a3b6e19a458b">squeeze</a>() ;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    sizeBuffer &lt;&lt; nItems ;</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;};</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div>
<div class="line"><a name="l00827"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml#aed766331f391f2a2218e8973c87869bc">  827</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#aed766331f391f2a2218e8973c87869bc">LevelSetSegmentation::readCommunicationBuffer</a>( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;recvList, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;nItems, <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp;dataBuffer ){</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <span class="keywordtype">int</span>     s, nSegs ;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordtype">long</span>    index, id, segment ;</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i=0; i&lt;nItems; ++i){</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="comment">// Get the id of the element</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        dataBuffer &gt;&gt; index ;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        <span class="keywordtype">id</span> = recvList[index] ;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <span class="comment">// Assign the data of the element</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;SegInfo&gt;::iterator</a> segItr ;</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        <span class="keywordflow">if</span>( !m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">exists</a>(<span class="keywordtype">id</span>)){</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            segItr = m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">reclaim</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            segItr = m_seg.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3c7d5712ef62ee4505f4409de7d143cd">getIterator</a>(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        dataBuffer &gt;&gt; nSegs ;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keywordflow">for</span>( s=0; s&lt;nSegs; ++s){</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            dataBuffer &gt;&gt; segment ;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            segItr-&gt;m_segments.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">insert</a>(segment) ;</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        }</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;        dataBuffer &gt;&gt; segItr-&gt;m_support ;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        dataBuffer &gt;&gt; segItr-&gt;m_checked ;</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    }</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;};</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator</a></div><div class="ttdoc">Iterator for the class PiercedVector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00057">piercedVector.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1RecvBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1RecvBuffer.xhtml">bitpit::RecvBuffer</a></div><div class="ttdoc">Buffer to be used for receive communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00104">communications_buffers.hpp:104</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a7a355a9f5efdc6446377f4a17ad51318"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">bitpit::PiercedVector::erase</a></div><div class="ttdeci">iterator erase(id_t id, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00604">piercedVector.tpp:604</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfaceKernel_xhtml_ad78c2b69387b5030afe1e2a6647e44e2"><div class="ttname"><a href="classbitpit_1_1SurfaceKernel.xhtml#ad78c2b69387b5030afe1e2a6647e44e2">bitpit::SurfaceKernel::evalVertexNormal</a></div><div class="ttdeci">virtual std::array&lt; double, 3 &gt; evalVertexNormal(const long &amp;, const int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="surface__kernel_8cpp_source.xhtml#l00562">surface_kernel.cpp:562</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a79a3d99a413dfca13d331ea30375d9cb"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">bitpit::PatchKernel::evalCellCentroid</a></div><div class="ttdeci">virtual std::array&lt; double, 3 &gt; evalCellCentroid(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02597">patch_kernel.cpp:2597</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae28ec9687875e8032b8f2696fd6b8bf9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">bitpit::PatchKernel::getDimension</a></div><div class="ttdeci">int getDimension() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00551">patch_kernel.cpp:551</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a2f588c1d6cc5899483e86819aca4428f"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a2f588c1d6cc5899483e86819aca4428f">bitpit::LevelSetSegmentation::writeCommunicationBuffer</a></div><div class="ttdeci">void writeCommunicationBuffer(const std::vector&lt; long &gt; &amp;, SendBuffer &amp;, SendBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00789">levelSetSegmentation.cpp:789</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a37502fe1c723a7d646173fdf2c61e403"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a37502fe1c723a7d646173fdf2c61e403">bitpit::LevelSetSegmentation::updateSimplexToCell</a></div><div class="ttdeci">void updateSimplexToCell(LevelSetOctree *, const std::vector&lt; adaption::Info &gt; &amp;, const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00634">levelSetSegmentation.cpp:634</a></div></div>
<div class="ttc" id="classbitpit_1_1SendBuffer_xhtml_a779507f62b4c37c40ce1a3b6e19a458b"><div class="ttname"><a href="classbitpit_1_1SendBuffer.xhtml#a779507f62b4c37c40ce1a3b6e19a458b">bitpit::SendBuffer::squeeze</a></div><div class="ttdeci">void squeeze()</div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8cpp_source.xhtml#l00048">communications_buffers.cpp:48</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml">bitpit::LevelSetKernel</a></div><div class="ttdoc">Mesh specific implementation to calculate the levelset function. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00116">levelSet.hpp:116</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml">bitpit::LevelSetOctree</a></div><div class="ttdoc">Implements LevelSetKernel for octree meshes. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00202">levelSet.hpp:202</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ac588184ef6e5d280a963a0fde8dcbdd3"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">bitpit::PatchKernel::getVertexCoords</a></div><div class="ttdeci">const std::array&lt; double, 3 &gt; &amp; getVertexCoords(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01007">patch_kernel.cpp:1007</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga5cfa556dd5a2e5b1aad6d3f3f5de1abd"><div class="ttname"><a href="group__CG.xhtml#ga5cfa556dd5a2e5b1aad6d3f3f5de1abd">bitpit::CGElem::intersectPointBox</a></div><div class="ttdeci">bool intersectPointBox(array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01616">CG_elem.cpp:1616</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ae4a3143e281b4c1f8f39f49c17aae1c9"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ae4a3143e281b4c1f8f39f49c17aae1c9">bitpit::LevelSetSegmentation::clone</a></div><div class="ttdeci">LevelSetSegmentation * clone() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00123">levelSetSegmentation.cpp:123</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af101fc33cf0e24716e772f885e98adbf"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">bitpit::PatchKernel::locatePoint</a></div><div class="ttdeci">long locatePoint(const double &amp;x, const double &amp;y, const double &amp;z)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02653">patch_kernel.cpp:2653</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml">bitpit::LevelSetObject</a></div><div class="ttdoc">Interface class for all objects with respect to whom the levelset function may be computed...</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00219">levelSet.hpp:219</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml">bitpit::VolCartesian</a></div><div class="ttdoc">The VolCartesian defines a Cartesian patch. </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8hpp_source.xhtml#l00037">volcartesian.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3de4e780714af6d900307638b37e6f3d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">bitpit::PatchKernel::getCell</a></div><div class="ttdeci">Cell &amp; getCell(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01058">patch_kernel.cpp:1058</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ac0f2a1a1d90de202ee3f0adef6af3a82"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ac0f2a1a1d90de202ee3f0adef6af3a82">bitpit::LevelSetSegmentation::seedNarrowBand</a></div><div class="ttdeci">bool seedNarrowBand(LevelSetCartesian *, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; int &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00349">levelSetSegmentation.cpp:349</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4cb0dfa4437e32f46533d7a7efe53488"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4cb0dfa4437e32f46533d7a7efe53488">bitpit::PiercedVector::clear</a></div><div class="ttdeci">void clear(bool release=true)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00673">piercedVector.tpp:673</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a287482efeac9d9d0c9086c1746f5ec09"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">bitpit::PiercedVector::insert</a></div><div class="ttdeci">iterator insert(const id_t &amp;id, const value_t &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00362">piercedVector.tpp:362</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a24d343798113ee633329df20374ab0d7"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a24d343798113ee633329df20374ab0d7">bitpit::PiercedVector::find</a></div><div class="ttdeci">const_iterator find(id_t id) const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01073">piercedVector.tpp:1073</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a82fae0c93d9cc4cdd7d132ad47ba252c"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a82fae0c93d9cc4cdd7d132ad47ba252c">bitpit::LevelSetSegmentation::clearAfterMeshMovement</a></div><div class="ttdeci">void clearAfterMeshMovement(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00697">levelSetSegmentation.cpp:697</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a0a26b98c0ce42e24c6243eed2c325574"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">bitpit::LevelSetSegmentation::LevelSetSegmentation</a></div><div class="ttdeci">LevelSetSegmentation(int, SurfUnstructured *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00079">levelSetSegmentation.cpp:79</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga458674818b75b1483c3230aed5e79489"><div class="ttname"><a href="group__CG.xhtml#ga458674818b75b1483c3230aed5e79489">bitpit::CGElem::distanceCloudSimplex</a></div><div class="ttdeci">std::vector&lt; double &gt; distanceCloudSimplex(std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; const &amp;, std::vector&lt; array3D &gt; &amp;, std::vector&lt; int &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00577">CG_elem.cpp:577</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a3c7d5712ef62ee4505f4409de7d143cd"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a3c7d5712ef62ee4505f4409de7d143cd">bitpit::PiercedVector::getIterator</a></div><div class="ttdeci">iterator getIterator(const id_t &amp;id) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01445">piercedVector.tpp:1445</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a7e678bf1f4f1990dc0438eaa31796eab"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a7e678bf1f4f1990dc0438eaa31796eab">bitpit::VolCartesian::locatePoint</a></div><div class="ttdeci">long locatePoint(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00836">volcartesian.cpp:836</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a168ce68cf265facc7adf5d6607718d59"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a168ce68cf265facc7adf5d6607718d59">bitpit::LevelSetSegmentation::restoreDerived</a></div><div class="ttdeci">void restoreDerived(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00752">levelSetSegmentation.cpp:752</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a2705708080ee9532327e5ce5ebaf0b7d"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a2705708080ee9532327e5ce5ebaf0b7d">bitpit::LevelSetSegmentation::computeLSInNarrowBand</a></div><div class="ttdeci">void computeLSInNarrowBand(LevelSetKernel *, const double &amp;, const bool &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00426">levelSetSegmentation.cpp:426</a></div></div>
<div class="ttc" id="classbitpit_1_1CommunicationBuffer_xhtml_aff029dd34935dc72a202c4e103f4e078"><div class="ttname"><a href="classbitpit_1_1CommunicationBuffer.xhtml#aff029dd34935dc72a202c4e103f4e078">bitpit::CommunicationBuffer::setCapacity</a></div><div class="ttdeci">void setCapacity(size_t capacity)</div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8tpp_source.xhtml#l00053">communications_buffers.tpp:53</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ac80e918a6d3fd5ea5d767d38f785dbc1"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ac80e918a6d3fd5ea5d767d38f785dbc1">bitpit::LevelSetSegmentation::evaluateLS</a></div><div class="ttdeci">double evaluateLS(LevelSetKernel *, long) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00388">levelSetSegmentation.cpp:388</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a47b85ed80bec772e039f90657789ac03"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03">bitpit::PiercedVector::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01043">piercedVector.tpp:1043</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3f366837c2cc93ec757c533813b1ebea"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">bitpit::PatchKernel::getCellCount</a></div><div class="ttdeci">virtual long getCellCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01017">patch_kernel.cpp:1017</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetCartesian_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetCartesian.xhtml">bitpit::LevelSetCartesian</a></div><div class="ttdoc">Implements LevelSetKernel for cartesian meshes. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00186">levelSet.hpp:186</a></div></div>
<div class="ttc" id="group__CG_xhtml_gae545eae55c3c1de0e5d5ddd1e61faebf"><div class="ttname"><a href="group__CG.xhtml#gae545eae55c3c1de0e5d5ddd1e61faebf">bitpit::CGElem::distancePointSegment</a></div><div class="ttdeci">double distancePointSegment(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00107">CG_elem.cpp:107</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a8dc0159e82618b7686ef6a27391e0750"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">bitpit::LevelSetSegmentation::infoFromSimplex</a></div><div class="ttdeci">void infoFromSimplex(const std::array&lt; double, 3 &gt; &amp;, const long &amp;, double &amp;, double &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00292">levelSetSegmentation.cpp:292</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gafd5fdc9c55c9dd00f4d957ac693eea98"><div class="ttname"><a href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a></div><div class="ttdeci">void flushBINARY(std::fstream &amp;str, const data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00275">GenericIO.tpp:275</a></div></div>
<div class="ttc" id="structbitpit_1_1utils_1_1DoubleFloatingEqual_xhtml"><div class="ttname"><a href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">bitpit::utils::DoubleFloatingEqual</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00147">utils.hpp:147</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga28d8df159d89502ca11a1621114bef2d"><div class="ttname"><a href="group__CG.xhtml#ga28d8df159d89502ca11a1621114bef2d">bitpit::CGElem::intersectBoxBox</a></div><div class="ttdeci">bool intersectBoxBox(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01035">CG_elem.cpp:1035</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gaa07df0f5bb3a3b7101a30b94bfee1460"><div class="ttname"><a href="group__GenericIO.xhtml#gaa07df0f5bb3a3b7101a30b94bfee1460">bitpit::genericIO::absorbBINARY</a></div><div class="ttdeci">void absorbBINARY(std::fstream &amp;str, data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00825">GenericIO.tpp:825</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a5b0ba2aed1c754043bf5a7aec4c88794"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">bitpit::LevelSetKernel::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00589">levelSetKernel.cpp:589</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_aa7cf1f1132b99d6df086b46d60653d6b"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#aa7cf1f1132b99d6df086b46d60653d6b">bitpit::LevelSetSegmentation::isInNarrowBand</a></div><div class="ttdeci">bool isInNarrowBand(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00162">levelSetSegmentation.cpp:162</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_a095c1b5e1bb5fd841b82f50a71a50dad"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#a095c1b5e1bb5fd841b82f50a71a50dad">bitpit::LevelSetObject::getId</a></div><div class="ttdeci">virtual int getId() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00059">levelSetObject.cpp:59</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ae87af3b327566619ce4112b484ca7c89"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">bitpit::PiercedVector::exists</a></div><div class="ttdeci">bool exists(id_t id) const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01056">piercedVector.tpp:1056</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4c84c99d0e0f36d2023b291b57d5b58a"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">bitpit::PiercedVector::begin</a></div><div class="ttdeci">iterator begin() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01473">piercedVector.tpp:1473</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_aed766331f391f2a2218e8973c87869bc"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#aed766331f391f2a2218e8973c87869bc">bitpit::LevelSetSegmentation::readCommunicationBuffer</a></div><div class="ttdeci">void readCommunicationBuffer(const std::vector&lt; long &gt; &amp;, const long &amp;, RecvBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00827">levelSetSegmentation.cpp:827</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a9e30faab8e4f91f5c8ef0684ddf23d88"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a9e30faab8e4f91f5c8ef0684ddf23d88">bitpit::LevelSetSegmentation::getSimplexList</a></div><div class="ttdeci">const std::unordered_set&lt; long &gt; &amp; getSimplexList(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00132">levelSetSegmentation.cpp:132</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a321157907261f65f58cc50febcf2ab9d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d">bitpit::PatchKernel::getBoundingBox</a></div><div class="ttdeci">void getBoundingBox(std::array&lt; double, 3 &gt; &amp;minPoint, std::array&lt; double, 3 &gt; &amp;maxPoint)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03065">patch_kernel.cpp:3065</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a70bff906b394c2c23b1a0e0ab610ac83"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">bitpit::LevelSetSegmentation::associateSimplexToCell</a></div><div class="ttdeci">void associateSimplexToCell(LevelSetCartesian *, const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00468">levelSetSegmentation.cpp:468</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a18841f81fbb288de48b90666f40d9942"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">bitpit::PiercedIterator::getId</a></div><div class="ttdeci">id_t getId(const id_t &amp;fallback=-1) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00060">piercedVector.tpp:60</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a></div><div class="ttdoc">The Cell class defines the cells. </div><div class="ttdef"><b>Definition:</b> <a href="cell_8hpp_source.xhtml#l00044">cell.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a290ffa245664cb815aaddc9ce7af501d"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">bitpit::PiercedVector::reclaim</a></div><div class="ttdeci">iterator reclaim(const id_t &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00224">piercedVector.tpp:224</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a8af81b96c7c37141cb780fe6d242daba"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">bitpit::LevelSetKernel::setSizeNarrowBand</a></div><div class="ttdeci">void setSizeNarrowBand(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00185">levelSetKernel.cpp:185</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ac6b6f336045d9576467c74fda94c653e"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ac6b6f336045d9576467c74fda94c653e">bitpit::LevelSetSegmentation::getSimplexVertices</a></div><div class="ttdeci">std::vector&lt; std::array&lt; double, 3 &gt; &gt; getSimplexVertices(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00171">levelSetSegmentation.cpp:171</a></div></div>
<div class="ttc" id="group__CG_xhtml_ga4e5d22fcba141d307e6fe304aa923697"><div class="ttname"><a href="group__CG.xhtml#ga4e5d22fcba141d307e6fe304aa923697">bitpit::CGElem::distancePointTriangle</a></div><div class="ttdeci">double distancePointTriangle(array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D const &amp;, array3D &amp;, int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l00184">CG_elem.cpp:184</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml">bitpit::SurfUnstructured</a></div><div class="ttdoc">The SurfUnstructured class defines an unstructured surface triangulation. </div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8hpp_source.xhtml#l00036">surfunstructured.hpp:36</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ac879653e4b7641068bb9cb55367b93fd"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">bitpit::PiercedVector::flush</a></div><div class="ttdeci">void flush()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00703">piercedVector.tpp:703</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_abcef3cebae85ce071be0fa775dbbb5a1"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">bitpit::VolCartesian::isPointInside</a></div><div class="ttdeci">bool isPointInside(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00812">volcartesian.cpp:812</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml">bitpit::LevelSetSegmentation</a></div><div class="ttdoc">Implements visitor pattern fo segmentated geometries. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00253">levelSet.hpp:253</a></div></div>
<div class="ttc" id="classbitpit_1_1SendBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1SendBuffer.xhtml">bitpit::SendBuffer</a></div><div class="ttdoc">Buffer to be used for send communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00090">communications_buffers.hpp:90</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a8bd0cf39ad223e8e99f738e67c979d58"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">bitpit::PiercedVector::end</a></div><div class="ttdeci">iterator end() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01486">piercedVector.tpp:1486</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_gabb983de64002faac55552e131e9096c0"><div class="ttname"><a href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a></div><div class="ttdeci">double norm2(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00714">MathOperators_array.tpp:714</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a25a324abc0f55bae7214f4ccff8c9cab"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a25a324abc0f55bae7214f4ccff8c9cab">bitpit::LevelSetSegmentation::updateLSInNarrowBand</a></div><div class="ttdeci">void updateLSInNarrowBand(LevelSetKernel *, const std::vector&lt; adaption::Info &gt; &amp;, const double &amp;, const bool &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00448">levelSetSegmentation.cpp:448</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetCartesian_xhtml_a3832ac56df2f84f586ce0b2e373c4eae"><div class="ttname"><a href="classbitpit_1_1LevelSetCartesian.xhtml#a3832ac56df2f84f586ce0b2e373c4eae">bitpit::LevelSetCartesian::computeSizeNarrowBand</a></div><div class="ttdeci">double computeSizeNarrowBand(LevelSetObject *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetCartesian_8cpp_source.xhtml#l00056">levelSetCartesian.cpp:56</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a620cbe659447387c5cbe0701bb7b0ab3"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">bitpit::LevelSetSegmentation::lsFromSimplex</a></div><div class="ttdeci">void lsFromSimplex(LevelSetKernel *, const double &amp;, const bool &amp;, bool filter=false)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00197">levelSetSegmentation.cpp:197</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a69eac8f6d4c5fe4fa4f70cb4be57ee9d"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">bitpit::Element::getVertexCount</a></div><div class="ttdeci">int getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01239">element.cpp:1239</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a17ac9a87e45c5f160316adfa4f5113de"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">bitpit::LevelSetKernel::getSizeNarrowBand</a></div><div class="ttdeci">double getSizeNarrowBand() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00177">levelSetKernel.cpp:177</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfaceKernel_xhtml_ad536127ef4ec97ad046f26b09a12f013"><div class="ttname"><a href="classbitpit_1_1SurfaceKernel.xhtml#ad536127ef4ec97ad046f26b09a12f013">bitpit::SurfaceKernel::getSpaceDimension</a></div><div class="ttdeci">int getSpaceDimension(void) const </div><div class="ttdef"><b>Definition:</b> <a href="surface__kernel_8cpp_source.xhtml#l00081">surface_kernel.cpp:81</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1799d61f7a4ea2c0f043ee860de457fe"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">bitpit::PatchKernel::getCells</a></div><div class="ttdeci">PiercedVector&lt; Cell &gt; &amp; getCells()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01047">patch_kernel.cpp:1047</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a851ff999bc25f8d4be84ae2e049933d0"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a851ff999bc25f8d4be84ae2e049933d0">bitpit::LevelSetSegmentation::getSupport</a></div><div class="ttdeci">long getSupport(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00147">levelSetSegmentation.cpp:147</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ab3d9782b45510606ec32bd74aeb7786f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">bitpit::LevelSetKernel::getMesh</a></div><div class="ttdeci">VolumeKernel * getMesh() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00093">levelSetKernel.cpp:93</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga60e7587149a3744797dbf7ed2f6c4292"><div class="ttname"><a href="group__MathFunctions.xhtml#ga60e7587149a3744797dbf7ed2f6c4292">sign</a></div><div class="ttdeci">T sign(const T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="Operators_8tpp_source.xhtml#l00038">Operators.tpp:38</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a79dc855649da2a386b999d991cd7603c"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">bitpit::LevelSetKernel::getLSInfo</a></div><div class="ttdeci">PiercedVector&lt; LSInfo &gt; &amp; getLSInfo()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00085">levelSetKernel.cpp:85</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab0ef8fd5ab115344cb859f66349a5e6f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">bitpit::PatchKernel::findCellFaceNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellFaceNeighs(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01740">patch_kernel.cpp:1740</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_acecb252ef5a3df908217900ab175938c"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#acecb252ef5a3df908217900ab175938c">bitpit::LevelSetSegmentation::~LevelSetSegmentation</a></div><div class="ttdeci">virtual ~LevelSetSegmentation()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00069">levelSetSegmentation.cpp:69</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ada8a762dd07bcbad92e9192bf72892a8"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">bitpit::PiercedVector::reserve</a></div><div class="ttdeci">void reserve(std::size_t n)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00723">piercedVector.tpp:723</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga982a6463d7e5b2cbcd89a15b7b3ee7cc"><div class="ttname"><a href="group__MathFunctions.xhtml#ga982a6463d7e5b2cbcd89a15b7b3ee7cc">dotProduct</a></div><div class="ttdeci">T dotProduct(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00851">MathOperators_array.tpp:851</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_a9eae2ac31f7becc1b75e4213f2e1c67d"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#a9eae2ac31f7becc1b75e4213f2e1c67d">bitpit::LevelSetOctree::computeSizeFromRSearch</a></div><div class="ttdeci">double computeSizeFromRSearch(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00250">levelSetOctree.cpp:250</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml">bitpit::VolumeKernel</a></div><div class="ttdoc">The VolumeKernel class provides an interface for defining volume patches. </div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8hpp_source.xhtml#l00032">volume_kernel.hpp:32</a></div></div>
<div class="ttc" id="namespacebitpit_1_1log_xhtml_ac9c385c32dc5a0331c601b1b07ab9952"><div class="ttname"><a href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">bitpit::log::cout</a></div><div class="ttdeci">Logger &amp; cout()</div><div class="ttdef"><b>Definition:</b> <a href="logger_8cpp_source.xhtml#l01280">logger.cpp:1280</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a1822bc5d038cda38f8fa7f2e4d314067"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a1822bc5d038cda38f8fa7f2e4d314067">bitpit::PiercedVector::emplace</a></div><div class="ttdeci">PiercedVector&lt; value_t, id_t &gt;::iterator emplace(const id_t &amp;id, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00474">piercedVector.tpp:474</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ada4f28d606c67e795d79835b54b78786"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ada4f28d606c67e795d79835b54b78786">bitpit::LevelSetSegmentation::dumpDerived</a></div><div class="ttdeci">void dumpDerived(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00723">levelSetSegmentation.cpp:723</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ab960e3283c7b5102282a03e34edb5e6c"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ab960e3283c7b5102282a03e34edb5e6c">bitpit::LevelSetSegmentation::getBoundingBox</a></div><div class="ttdeci">void getBoundingBox(std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00416">levelSetSegmentation.cpp:416</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a611e1742519f6391eb9a80433dabb83a"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">bitpit::Element::getVertex</a></div><div class="ttdeci">long getVertex(const int &amp;vertex) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01272">element.cpp:1272</a></div></div>
<div class="ttc" id="group__CG_xhtml_gafcc27b894cfe337cd6d3623a41bb2819"><div class="ttname"><a href="group__CG.xhtml#gafcc27b894cfe337cd6d3623a41bb2819">bitpit::CGElem::intersectBoxSimplex</a></div><div class="ttdeci">bool intersectBoxSimplex(array3D const &amp;, array3D const &amp;, std::vector&lt; array3D &gt; const &amp;, int dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="CG__elem_8cpp_source.xhtml#l01315">CG_elem.cpp:1315</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

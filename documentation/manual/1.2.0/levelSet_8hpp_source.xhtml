
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/levelset/levelSet.hpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_9d03ec41247481073d82a41947e2c425.xhtml">levelset</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">levelSet.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"># ifndef __BITPIT_LEVELSET_HPP__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># define __BITPIT_LEVELSET_HPP__</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// Standard Template Library</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"># include &lt;array&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"># include &lt;vector&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"># include &lt;unordered_set&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"># include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># include &quot;bitpit_communications.hpp&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span><span class="preprocessor"># include &quot;bitpit_patchkernel.hpp&quot;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"># include &quot;bitpit_surfunstructured.hpp&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor"># include &quot;bitpit_volcartesian.hpp&quot;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor"># include &quot;bitpit_voloctree.hpp&quot;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">class </span>LevelSetKernel ;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">class </span>LevelSetObject ;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">class </span>LevelSetSegmentation ;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">namespace </span>levelSetDefaults{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span>                            VALUE = 1.e18 ;             </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">const</span> std::array&lt;double,3&gt;              GRADIENT = {{0.,0.,0.}};    </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">short</span>                             SIGN = 1;                   </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                               OBJECT = -1 ;               </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keyword">const</span> std::unordered_set&lt;long&gt;          LIST;                       </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>                              ELEMENT = -1 ;              </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;};</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSet.xhtml">   57</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1LevelSet.xhtml">LevelSet</a>{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a>*                             m_kernel ;              </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::unordered_map&lt;int,LevelSetObject*&gt;     m_object ;              </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">bool</span>                                        m_userRSearch;          </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordtype">bool</span>                                        m_signedDF;             </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">bool</span>                                        m_propagateS;           </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">bool</span>                                        m_propagateV;           </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classbitpit_1_1LevelSet.xhtml#a5d7dd747488384775a2aabd2282516b0">~LevelSet</a>() ;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classbitpit_1_1LevelSet.xhtml#a708cfa6c216e2634f7396e34c4bc8bbb">LevelSet</a>() ;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a3c86e83691f459b4c470cbde32a87b85">setMesh</a>( <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>* ) ;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a3c86e83691f459b4c470cbde32a87b85">setMesh</a>( <a class="code" href="classbitpit_1_1VolCartesian.xhtml">VolCartesian</a>* ) ;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a3c86e83691f459b4c470cbde32a87b85">setMesh</a>( <a class="code" href="classbitpit_1_1VolOctree.xhtml">VolOctree</a>* ) ;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">int</span>                                         <a class="code" href="classbitpit_1_1LevelSet.xhtml#aa5ae74dcf2b8adeec0881b2185caac32">addObject</a>( <a class="code" href="classbitpit_1_1SurfaceKernel.xhtml">SurfaceKernel</a>*, <span class="keywordtype">int</span> <span class="keywordtype">id</span> = levelSetDefaults::OBJECT ) ;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">int</span>                                         <a class="code" href="classbitpit_1_1LevelSet.xhtml#aa5ae74dcf2b8adeec0881b2185caac32">addObject</a>( <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml">SurfUnstructured</a> *, <span class="keywordtype">int</span> <span class="keywordtype">id</span> = levelSetDefaults::OBJECT ) ;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">int</span>                                         <a class="code" href="classbitpit_1_1LevelSet.xhtml#aa5ae74dcf2b8adeec0881b2185caac32">addObject</a>( <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a>* ) ;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a33ea4d6c4efd868df48067d52bed77d1">clear</a>();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a330e22098a1bdd14e476c25cfcbb00fe">clearObject</a>();</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a330e22098a1bdd14e476c25cfcbb00fe">clearObject</a>( <span class="keywordtype">int</span> );</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSet.xhtml#aba8ccd57fdfbdb090e18767357ee5230">getLS</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    std::array&lt;double,3&gt;                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#aeba34de2f04469a7fc91466d4ff7998a">getGradient</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">int</span>                                         <a class="code" href="classbitpit_1_1LevelSet.xhtml#a42e8badfa3d23dbdf83594b4f6d07fc1">getObject</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keywordtype">long</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#ae55daacabe2f83c5e90611d41b0bad35">getSupport</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a9967d2d63cf0c4695248ce71cb5edf39">getObjectAndSupport</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <span class="keywordtype">int</span> &amp;, <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">short</span>                                       <a class="code" href="classbitpit_1_1LevelSet.xhtml#a75a142c0c3da7f30657dd282712fa710">getSign</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">bool</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a25a4169fb20d7270d6bf1b41b6466147">isInNarrowBand</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSet.xhtml#af9b8c16a7ace5f03c1c11a7426dd177f">getSizeNarrowBand</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#ab7c5954b25fa16ebb3a6c2e80def916f">setSizeNarrowBand</a>(<span class="keywordtype">double</span>) ;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a7b3adc3a239c487c0a022719a75847e8">setSign</a>(<span class="keywordtype">bool</span>);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a5c8ebd5426a40696815c7c789382281d">setPropagateSign</a>(<span class="keywordtype">bool</span>) ;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#ab021610d3ddf3fab7eee983fe5de8e6a">setPropagateValue</a>(<span class="keywordtype">bool</span>) ;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a7a883d1b59925413e2134843decd2ece">dump</a>( std::fstream &amp;);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a66094ad89698e5f32c495d240376dfc1">restore</a>( std::fstream &amp;);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a4168291bad279c958b90fddc8b202ecc">compute</a>( ) ;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a1a5477ad34a671de362c3b81d64f8655">update</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; ) ;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#ac88aaa9d09663ecd1938667c7dcae5a6">exchangeGhosts</a>( ) ;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSet.xhtml#a701ae67ac3235132c867ed57ab96d890">communicate</a>( std::unordered_map&lt;<span class="keywordtype">int</span>,std::vector&lt;long&gt;&gt; &amp;, std::unordered_map&lt;<span class="keywordtype">int</span>,std::vector&lt;long&gt;&gt; &amp;, std::vector&lt;adaption::Info&gt; <span class="keyword">const</span> *mapper=NULL ) ;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">bool</span>                                        assureMPI() ;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;};</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml">  116</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a>{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml">  119</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml">LSInfo</a>{</div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">  120</a></span>&#160;        <span class="keywordtype">double</span>                                  <a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">value</a> ;         </div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#abb7663f39862227420f82665fa03c883">  121</a></span>&#160;        std::array&lt;double,3&gt;                    <a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#abb7663f39862227420f82665fa03c883">gradient</a> ;      </div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#aa604bb01cf3826c7ee1ec890ba3ab30d">  122</a></span>&#160;        <span class="keywordtype">int</span>                                     <a class="code" href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#aa604bb01cf3826c7ee1ec890ba3ab30d">object</a> ;        </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    };</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">  126</a></span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;LSInfo&gt;</a>                       <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">m_ls</a> ;          </div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">  127</a></span>&#160;    <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>*                               <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">m_mesh</a> ;        </div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">  129</a></span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">m_RSearch</a>;      </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">  132</a></span>&#160;<span class="preprocessor"></span>    MPI_Comm                                    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">m_commMPI</a> ;     </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a0c7786a70ad675048b4ee33f3b368228">~LevelSetKernel</a>() ;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">LevelSetKernel</a>() ;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">LevelSetKernel</a>( <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a> *) ;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;LSInfo&gt;</a>&amp;                      <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">getLSInfo</a>() ;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>*                               <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">getMesh</a>() <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a00c3c7c18a6075a9713b2289656e41a3">getLS</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    std::array&lt;double,3&gt;                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a27ab641eb7b79b49331c6dc8844bfb13">getGradient</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">int</span>                                         <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ad1f432dee6bd5b55654b3a2bb5c0bb3b">getObject</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordtype">short</span>                                       <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ae0ed0283133a41ba38178940c7779cfa">getSign</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">getSizeNarrowBand</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">bool</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a66f34d2c1fd4bdea07d153aa2b19b203">isInNarrowBand</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">setSizeNarrowBand</a>(<span class="keywordtype">double</span>) ;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">double</span>                              computeSizeNarrowBand( <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> * )=0;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">double</span>                              updateSizeNarrowBand( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; )=0;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">clear</a>() ;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#abe9bfef4718dcfce759381b3cc080a08">clearAfterMeshMovement</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; ) ;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a0479c0ae3f673e2ef5c93602ed754d22">filterOutsideNarrowBand</a>( <span class="keywordtype">double</span> ) ;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a946d4dd8d2d13a9c4094e2c92d191a8e">propagateSign</a>( std::unordered_map&lt;int,LevelSetObject*&gt; ) ;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#aafce69d71ee87e203e85a83c00fa6bc2">propagateValue</a>( <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> *) ;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ac9a8b7b521cac1909f5b8179f0b4eddb">dump</a>( std::fstream &amp;);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#ad3729f94bbbf75abbfe29b6cf32b697f">restore</a>( std::fstream &amp;);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    MPI_Comm                                    <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a36a265e7d009012a8d82d958a42f1590">getCommunicator</a>() <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a28fa6f436943fa03dc5bbabc1b0f2f2a">freeCommunicator</a>();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordtype">bool</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">isCommunicatorSet</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">bool</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a24575637dacead8fb2c1ad27ad7a6be7">assureMPI</a>() ;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a4247b7f2c88b4302868449a7eb8e4fd8">writeCommunicationBuffer</a>( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp; );</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a40025b48f1a63005962acf2689416c98">readCommunicationBuffer</a>(  <span class="keyword">const</span> std::vector&lt;long&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp; ) ;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">solveEikonal</a>( <span class="keywordtype">double</span>, <span class="keywordtype">double</span> );</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">double</span>                              <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">updateEikonal</a>( <span class="keywordtype">double</span>, <span class="keywordtype">double</span>, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <span class="keyword">const</span> std::unordered_map&lt;long,short&gt; &amp; ) ; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    std::array&lt;double,3&gt;                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#a2b2069be91249715a7ab170512223a5f">computeGradientUpwind</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) ;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    std::array&lt;double,3&gt;                        <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml#af7e5c67445679a57c943e2a307973def">computeGradientCentral</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) ;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;};</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetCartesian.xhtml">  186</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a> : <span class="keyword">public</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a>{</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <a class="code" href="classbitpit_1_1VolCartesian.xhtml">VolCartesian</a>*                               m_cartesian ;       </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordtype">double</span>                                      updateSizeNarrowBand( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; );</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordtype">double</span>                                      updateEikonal( <span class="keywordtype">double</span>, <span class="keywordtype">double</span>, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <span class="keyword">const</span> std::unordered_map&lt;long,short&gt; &amp; ) ; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml#a3d6221d723e861a93c456d8422c8000d">~LevelSetCartesian</a>();</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml#a9390fce704670e2f86e5750613db20cf">LevelSetCartesian</a>( <a class="code" href="classbitpit_1_1VolCartesian.xhtml">VolCartesian</a> &amp; );</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml#a3832ac56df2f84f586ce0b2e373c4eae">computeSizeNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> * );</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;};</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetOctree.xhtml">  202</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a> : <span class="keyword">public</span> <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a>{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classbitpit_1_1VolOctree.xhtml">VolOctree</a>*                                  m_octree ;       </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#aefcef9d100d32537fbd2d0649d0997c0">computeRSearchFromLevel</a>( uint8_t ) ;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#a9eae2ac31f7becc1b75e4213f2e1c67d">computeSizeFromRSearch</a>( <span class="keywordtype">double</span> ) ;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#ad01bff31af5060f22a1cadf3327fd5e1">~LevelSetOctree</a>();</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#af7d1e4f62e702e2ce2ff94326fa9c689">LevelSetOctree</a>( <a class="code" href="classbitpit_1_1VolOctree.xhtml">VolOctree</a> &amp; );</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#a634a84d74fa3207702bbb20ac853e70c">computeSizeNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> * );</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml#a650ce3f6b7852c47823a29020119c048">updateSizeNarrowBand</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; );</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;};</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetObject.xhtml">  219</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a>{</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">int</span>                                         m_id;           </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#a79eb08ec797686a17d517bf4f4659d2c">~LevelSetObject</a>();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#ae9e619e5103d2d5594afab3003e3c2d2">LevelSetObject</a>(<span class="keywordtype">int</span>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">int</span>                                 <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#a095c1b5e1bb5fd841b82f50a71a50dad">getId</a>() <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                getBoundingBox( std::array&lt;double,3&gt; &amp;, std::array&lt;double,3&gt; &amp; )<span class="keyword">const</span> =0  ;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a>*                     clone() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">long</span>                                getSupport(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> =0 ;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                computeLSInNarrowBand( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;)=0 ;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                updateLSInNarrowBand( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;)=0 ;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#a574db86d1d478c50c71a008603f2f379">clearAfterMeshMovement</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; ) ;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                dumpDerived( std::fstream &amp;) =0 ;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                restoreDerived( std::fstream &amp;) =0 ;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">double</span>                              evaluateLS( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keywordtype">long</span>) <span class="keyword">const</span> =0;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#a4ecce213c104dc31e63bef40490ec242">dump</a>( std::fstream &amp;) ;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetObject.xhtml#a3a12e99e52418bbff321e03a45018955">restore</a>( std::fstream &amp;) ;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                writeCommunicationBuffer( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp; ) =0 ;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span>                                readCommunicationBuffer(  <span class="keyword">const</span> std::vector&lt;long&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp; ) =0 ;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor"># endif </span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;};</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classbitpit_1_1LevelSetSegmentation.xhtml">  253</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml">LevelSetSegmentation</a> : <span class="keyword">public</span> <a class="code" href="classbitpit_1_1LevelSetObject.xhtml">LevelSetObject</a> {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">private</span>:</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">struct </span>SegInfo{</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        std::unordered_set&lt;long&gt;                m_segments ;                </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordtype">long</span>                                    m_support ;                 </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordtype">bool</span>                                    m_checked ;                 </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        SegInfo( ) ;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        SegInfo( <span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp; ) ;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        SegInfo( <span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp; ) ;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    };</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordtype">int</span>                                         m_dimension ;               </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml">SurfUnstructured</a>*                           m_segmentation;             </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    std::unordered_map&lt; long, std::vector&lt; std::array&lt;double,3&gt;&gt; &gt; m_vertexNormal;            </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;SegInfo&gt;</a>                      m_seg;                      </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#acecb252ef5a3df908217900ab175938c">~LevelSetSegmentation</a>();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">LevelSetSegmentation</a>(<span class="keywordtype">int</span>, <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml">SurfUnstructured</a>*);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">LevelSetSegmentation</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml">LevelSetSegmentation</a>&amp;);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml">LevelSetSegmentation</a>*                       <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ae4a3143e281b4c1f8f39f49c17aae1c9">clone</a>() <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keyword">const</span> std::unordered_set&lt;long&gt; &amp;            <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a9e30faab8e4f91f5c8ef0684ddf23d88">getSimplexList</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordtype">long</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a851ff999bc25f8d4be84ae2e049933d0">getSupport</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) <span class="keyword">const</span>  ;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordtype">bool</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#aa7cf1f1132b99d6df086b46d60653d6b">isInNarrowBand</a>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;) ;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ada4f28d606c67e795d79835b54b78786">dumpDerived</a>( std::fstream &amp;) ;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a168ce68cf265facc7adf5d6607718d59">restoreDerived</a>( std::fstream &amp;) ;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ab960e3283c7b5102282a03e34edb5e6c">getBoundingBox</a>( std::array&lt;double,3&gt; &amp;, std::array&lt;double,3&gt; &amp; ) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordtype">bool</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac0f2a1a1d90de202ee3f0adef6af3a82">seedNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a> *, std::vector&lt;std::array&lt;double,3&gt;&gt; &amp;, std::vector&lt;int&gt; &amp;) ;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordtype">double</span>                                      <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac80e918a6d3fd5ea5d767d38f785dbc1">evaluateLS</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keywordtype">long</span>) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a2705708080ee9532327e5ce5ebaf0b7d">computeLSInNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a25a324abc0f55bae7214f4ccff8c9cab">updateLSInNarrowBand</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp; ) ;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a82fae0c93d9cc4cdd7d132ad47ba252c">clearAfterMeshMovement</a>( <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp; ) ;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="preprocessor"># if BITPIT_ENABLE_MPI</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a2f588c1d6cc5899483e86819aca4428f">writeCommunicationBuffer</a>( <span class="keyword">const</span> std::vector&lt;long&gt; &amp;, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp;, <a class="code" href="classbitpit_1_1SendBuffer.xhtml">SendBuffer</a> &amp; ) ;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#aed766331f391f2a2218e8973c87869bc">readCommunicationBuffer</a>(  <span class="keyword">const</span> std::vector&lt;long&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <a class="code" href="classbitpit_1_1RecvBuffer.xhtml">RecvBuffer</a> &amp; ) ;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="preprocessor"># endif</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::vector&lt;std::array&lt;double,3&gt;&gt;           <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#ac6b6f336045d9576467c74fda94c653e">getSimplexVertices</a>( <span class="keyword">const</span> <span class="keywordtype">long</span> &amp; ) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">lsFromSimplex</a>( <a class="code" href="classbitpit_1_1LevelSetKernel.xhtml">LevelSetKernel</a> *, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;, <span class="keywordtype">bool</span> filter = <span class="keyword">false</span> ) ;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">infoFromSimplex</a>(<span class="keyword">const</span> std::array&lt;double,3&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;, <span class="keywordtype">double</span> &amp;, <span class="keywordtype">double</span> &amp;, std::array&lt;double,3&gt; &amp;,std::array&lt;double,3&gt; &amp;) <span class="keyword">const</span> ;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>( <a class="code" href="classbitpit_1_1LevelSetCartesian.xhtml">LevelSetCartesian</a> *, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">associateSimplexToCell</a>( <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a> *, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">void</span>                                        <a class="code" href="classbitpit_1_1LevelSetSegmentation.xhtml#a37502fe1c723a7d646173fdf2c61e403">updateSimplexToCell</a>( <a class="code" href="classbitpit_1_1LevelSetOctree.xhtml">LevelSetOctree</a> *, <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; ) ;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;};</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;}</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* LEVELSET_HPP */</span><span class="preprocessor"></span></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_a650ce3f6b7852c47823a29020119c048"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#a650ce3f6b7852c47823a29020119c048">bitpit::LevelSetOctree::updateSizeNarrowBand</a></div><div class="ttdeci">double updateSizeNarrowBand(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00161">levelSetOctree.cpp:161</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a36a265e7d009012a8d82d958a42f1590"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a36a265e7d009012a8d82d958a42f1590">bitpit::LevelSetKernel::getCommunicator</a></div><div class="ttdeci">MPI_Comm getCommunicator() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00694">levelSetKernel.cpp:694</a></div></div>
<div class="ttc" id="classbitpit_1_1RecvBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1RecvBuffer.xhtml">bitpit::RecvBuffer</a></div><div class="ttdoc">Buffer to be used for receive communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00104">communications_buffers.hpp:104</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_a634a84d74fa3207702bbb20ac853e70c"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#a634a84d74fa3207702bbb20ac853e70c">bitpit::LevelSetOctree::computeSizeNarrowBand</a></div><div class="ttdeci">double computeSizeNarrowBand(LevelSetObject *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00056">levelSetOctree.cpp:56</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a23bc13fe61a828dd220e6935acac98b1"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a23bc13fe61a828dd220e6935acac98b1">bitpit::LevelSetKernel::solveEikonal</a></div><div class="ttdeci">void solveEikonal(double, double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00428">levelSetKernel.cpp:428</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a2f588c1d6cc5899483e86819aca4428f"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a2f588c1d6cc5899483e86819aca4428f">bitpit::LevelSetSegmentation::writeCommunicationBuffer</a></div><div class="ttdeci">void writeCommunicationBuffer(const std::vector&lt; long &gt; &amp;, SendBuffer &amp;, SendBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00789">levelSetSegmentation.cpp:789</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_aefcef9d100d32537fbd2d0649d0997c0"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#aefcef9d100d32537fbd2d0649d0997c0">bitpit::LevelSetOctree::computeRSearchFromLevel</a></div><div class="ttdeci">double computeRSearchFromLevel(uint8_t)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00240">levelSetOctree.cpp:240</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a37502fe1c723a7d646173fdf2c61e403"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a37502fe1c723a7d646173fdf2c61e403">bitpit::LevelSetSegmentation::updateSimplexToCell</a></div><div class="ttdeci">void updateSimplexToCell(LevelSetOctree *, const std::vector&lt; adaption::Info &gt; &amp;, const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00634">levelSetSegmentation.cpp:634</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml">bitpit::LevelSetKernel</a></div><div class="ttdoc">Mesh specific implementation to calculate the levelset function. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00116">levelSet.hpp:116</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_aafce69d71ee87e203e85a83c00fa6bc2"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#aafce69d71ee87e203e85a83c00fa6bc2">bitpit::LevelSetKernel::propagateValue</a></div><div class="ttdeci">void propagateValue(LevelSetObject *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00407">levelSetKernel.cpp:407</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml">bitpit::LevelSetOctree</a></div><div class="ttdoc">Implements LevelSetKernel for octree meshes. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00202">levelSet.hpp:202</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_a3a12e99e52418bbff321e03a45018955"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#a3a12e99e52418bbff321e03a45018955">bitpit::LevelSetObject::restore</a></div><div class="ttdeci">void restore(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00086">levelSetObject.cpp:86</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_a574db86d1d478c50c71a008603f2f379"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#a574db86d1d478c50c71a008603f2f379">bitpit::LevelSetObject::clearAfterMeshMovement</a></div><div class="ttdeci">virtual void clearAfterMeshMovement(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00067">levelSetObject.cpp:67</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ae4a3143e281b4c1f8f39f49c17aae1c9"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ae4a3143e281b4c1f8f39f49c17aae1c9">bitpit::LevelSetSegmentation::clone</a></div><div class="ttdeci">LevelSetSegmentation * clone() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00123">levelSetSegmentation.cpp:123</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_af7d1e4f62e702e2ce2ff94326fa9c689"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#af7d1e4f62e702e2ce2ff94326fa9c689">bitpit::LevelSetOctree::LevelSetOctree</a></div><div class="ttdeci">LevelSetOctree(VolOctree &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00048">levelSetOctree.cpp:48</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_af9b8c16a7ace5f03c1c11a7426dd177f"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#af9b8c16a7ace5f03c1c11a7426dd177f">bitpit::LevelSet::getSizeNarrowBand</a></div><div class="ttdeci">double getSizeNarrowBand() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00303">levelSet.cpp:303</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml">bitpit::LevelSetKernel::LSInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00119">levelSet.hpp:119</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ae24049b7ad3aeea7c22b4ad981dda028"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ae24049b7ad3aeea7c22b4ad981dda028">bitpit::LevelSetKernel::m_commMPI</a></div><div class="ttdeci">MPI_Comm m_commMPI</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00132">levelSet.hpp:132</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml">bitpit::LevelSetObject</a></div><div class="ttdoc">Interface class for all objects with respect to whom the levelset function may be computed...</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00219">levelSet.hpp:219</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml">bitpit::VolCartesian</a></div><div class="ttdoc">The VolCartesian defines a Cartesian patch. </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8hpp_source.xhtml#l00037">volcartesian.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a330e22098a1bdd14e476c25cfcbb00fe"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a330e22098a1bdd14e476c25cfcbb00fe">bitpit::LevelSet::clearObject</a></div><div class="ttdeci">void clearObject()</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00180">levelSet.cpp:180</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_aa723a897f934aedb771699ddcdb0224a"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#aa723a897f934aedb771699ddcdb0224a">bitpit::LevelSetKernel::m_ls</a></div><div class="ttdeci">PiercedVector&lt; LSInfo &gt; m_ls</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00126">levelSet.hpp:126</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a3c86e83691f459b4c470cbde32a87b85"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a3c86e83691f459b4c470cbde32a87b85">bitpit::LevelSet::setMesh</a></div><div class="ttdeci">void setMesh(VolumeKernel *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00095">levelSet.cpp:95</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ac0f2a1a1d90de202ee3f0adef6af3a82"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ac0f2a1a1d90de202ee3f0adef6af3a82">bitpit::LevelSetSegmentation::seedNarrowBand</a></div><div class="ttdeci">bool seedNarrowBand(LevelSetCartesian *, std::vector&lt; std::array&lt; double, 3 &gt;&gt; &amp;, std::vector&lt; int &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00349">levelSetSegmentation.cpp:349</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_af9b313c3a966173dfcad7b952bb2ec8e"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#af9b313c3a966173dfcad7b952bb2ec8e">bitpit::LevelSetKernel::isCommunicatorSet</a></div><div class="ttdeci">bool isCommunicatorSet() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00704">levelSetKernel.cpp:704</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a82fae0c93d9cc4cdd7d132ad47ba252c"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a82fae0c93d9cc4cdd7d132ad47ba252c">bitpit::LevelSetSegmentation::clearAfterMeshMovement</a></div><div class="ttdeci">void clearAfterMeshMovement(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00697">levelSetSegmentation.cpp:697</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a946d4dd8d2d13a9c4094e2c92d191a8e"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a946d4dd8d2d13a9c4094e2c92d191a8e">bitpit::LevelSetKernel::propagateSign</a></div><div class="ttdeci">void propagateSign(std::unordered_map&lt; int, LevelSetObject * &gt;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00287">levelSetKernel.cpp:287</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a0a26b98c0ce42e24c6243eed2c325574"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a0a26b98c0ce42e24c6243eed2c325574">bitpit::LevelSetSegmentation::LevelSetSegmentation</a></div><div class="ttdeci">LevelSetSegmentation(int, SurfUnstructured *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00079">levelSetSegmentation.cpp:79</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a5c8ebd5426a40696815c7c789382281d"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a5c8ebd5426a40696815c7c789382281d">bitpit::LevelSet::setPropagateSign</a></div><div class="ttdeci">void setPropagateSign(bool)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00320">levelSet.cpp:320</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a168ce68cf265facc7adf5d6607718d59"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a168ce68cf265facc7adf5d6607718d59">bitpit::LevelSetSegmentation::restoreDerived</a></div><div class="ttdeci">void restoreDerived(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00752">levelSetSegmentation.cpp:752</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_af7e5c67445679a57c943e2a307973def"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#af7e5c67445679a57c943e2a307973def">bitpit::LevelSetKernel::computeGradientCentral</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; computeGradientCentral(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00242">levelSetKernel.cpp:242</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml_aa604bb01cf3826c7ee1ec890ba3ab30d"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#aa604bb01cf3826c7ee1ec890ba3ab30d">bitpit::LevelSetKernel::LSInfo::object</a></div><div class="ttdeci">int object</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00122">levelSet.hpp:122</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a2705708080ee9532327e5ce5ebaf0b7d"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a2705708080ee9532327e5ce5ebaf0b7d">bitpit::LevelSetSegmentation::computeLSInNarrowBand</a></div><div class="ttdeci">void computeLSInNarrowBand(LevelSetKernel *, const double &amp;, const bool &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00426">levelSetSegmentation.cpp:426</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ac9a8b7b521cac1909f5b8179f0b4eddb"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ac9a8b7b521cac1909f5b8179f0b4eddb">bitpit::LevelSetKernel::dump</a></div><div class="ttdeci">void dump(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00646">levelSetKernel.cpp:646</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ad3729f94bbbf75abbfe29b6cf32b697f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ad3729f94bbbf75abbfe29b6cf32b697f">bitpit::LevelSetKernel::restore</a></div><div class="ttdeci">void restore(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00667">levelSetKernel.cpp:667</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ad1f432dee6bd5b55654b3a2bb5c0bb3b"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ad1f432dee6bd5b55654b3a2bb5c0bb3b">bitpit::LevelSetKernel::getObject</a></div><div class="ttdeci">int getObject(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00133">levelSetKernel.cpp:133</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_adcce08f0224416149bb4ce6994e3f208"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#adcce08f0224416149bb4ce6994e3f208">bitpit::LevelSetKernel::m_RSearch</a></div><div class="ttdeci">double m_RSearch</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00129">levelSet.hpp:129</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a28fa6f436943fa03dc5bbabc1b0f2f2a"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a28fa6f436943fa03dc5bbabc1b0f2f2a">bitpit::LevelSetKernel::freeCommunicator</a></div><div class="ttdeci">void freeCommunicator()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00712">levelSetKernel.cpp:712</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfaceKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1SurfaceKernel.xhtml">bitpit::SurfaceKernel</a></div><div class="ttdoc">The SurfaceKernel class provides an interface for defining surface patches. </div><div class="ttdef"><b>Definition:</b> <a href="surface__kernel_8hpp_source.xhtml#l00032">surface_kernel.hpp:32</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ac80e918a6d3fd5ea5d767d38f785dbc1"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ac80e918a6d3fd5ea5d767d38f785dbc1">bitpit::LevelSetSegmentation::evaluateLS</a></div><div class="ttdeci">double evaluateLS(LevelSetKernel *, long) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00388">levelSetSegmentation.cpp:388</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetCartesian_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetCartesian.xhtml">bitpit::LevelSetCartesian</a></div><div class="ttdoc">Implements LevelSetKernel for cartesian meshes. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00186">levelSet.hpp:186</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_ae55daacabe2f83c5e90611d41b0bad35"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#ae55daacabe2f83c5e90611d41b0bad35">bitpit::LevelSet::getSupport</a></div><div class="ttdeci">long getSupport(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00247">levelSet.cpp:247</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_aba8ccd57fdfbdb090e18767357ee5230"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#aba8ccd57fdfbdb090e18767357ee5230">bitpit::LevelSet::getLS</a></div><div class="ttdeci">double getLS(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00220">levelSet.cpp:220</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml">bitpit::VolOctree</a></div><div class="ttdoc">The VolOctree defines a Octree patch. </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8hpp_source.xhtml#l00044">voloctree.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a8dc0159e82618b7686ef6a27391e0750"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a8dc0159e82618b7686ef6a27391e0750">bitpit::LevelSetSegmentation::infoFromSimplex</a></div><div class="ttdeci">void infoFromSimplex(const std::array&lt; double, 3 &gt; &amp;, const long &amp;, double &amp;, double &amp;, std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00292">levelSetSegmentation.cpp:292</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml">bitpit::LevelSet</a></div><div class="ttdoc">Level Set driver class. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00057">levelSet.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a74f698b673fbc06202b443c53a635aae"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a74f698b673fbc06202b443c53a635aae">bitpit::LevelSetKernel::updateEikonal</a></div><div class="ttdeci">virtual double updateEikonal(double, double, const long &amp;, const std::unordered_map&lt; long, short &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00576">levelSetKernel.cpp:576</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_aa5ae74dcf2b8adeec0881b2185caac32"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#aa5ae74dcf2b8adeec0881b2185caac32">bitpit::LevelSet::addObject</a></div><div class="ttdeci">int addObject(SurfaceKernel *, int id=levelSetDefaults::OBJECT)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00153">levelSet.cpp:153</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a7b3adc3a239c487c0a022719a75847e8"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a7b3adc3a239c487c0a022719a75847e8">bitpit::LevelSet::setSign</a></div><div class="ttdeci">void setSign(bool)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00311">levelSet.cpp:311</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a40025b48f1a63005962acf2689416c98"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a40025b48f1a63005962acf2689416c98">bitpit::LevelSetKernel::readCommunicationBuffer</a></div><div class="ttdeci">void readCommunicationBuffer(const std::vector&lt; long &gt; &amp;, const long &amp;, RecvBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00790">levelSetKernel.cpp:790</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ae0ed0283133a41ba38178940c7779cfa"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ae0ed0283133a41ba38178940c7779cfa">bitpit::LevelSetKernel::getSign</a></div><div class="ttdeci">short getSign(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00148">levelSetKernel.cpp:148</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a708cfa6c216e2634f7396e34c4bc8bbb"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a708cfa6c216e2634f7396e34c4bc8bbb">bitpit::LevelSet::LevelSet</a></div><div class="ttdeci">LevelSet()</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00061">levelSet.cpp:61</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a701ae67ac3235132c867ed57ab96d890"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a701ae67ac3235132c867ed57ab96d890">bitpit::LevelSet::communicate</a></div><div class="ttdeci">void communicate(std::unordered_map&lt; int, std::vector&lt; long &gt;&gt; &amp;, std::unordered_map&lt; int, std::vector&lt; long &gt;&gt; &amp;, std::vector&lt; adaption::Info &gt; const *mapper=NULL)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00511">levelSet.cpp:511</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a5d7dd747488384775a2aabd2282516b0"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a5d7dd747488384775a2aabd2282516b0">bitpit::LevelSet::~LevelSet</a></div><div class="ttdeci">~LevelSet()</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00077">levelSet.cpp:77</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a5b0ba2aed1c754043bf5a7aec4c88794"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a5b0ba2aed1c754043bf5a7aec4c88794">bitpit::LevelSetKernel::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00589">levelSetKernel.cpp:589</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a25a4169fb20d7270d6bf1b41b6466147"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a25a4169fb20d7270d6bf1b41b6466147">bitpit::LevelSet::isInNarrowBand</a></div><div class="ttdeci">bool isInNarrowBand(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00295">levelSet.cpp:295</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_aa7cf1f1132b99d6df086b46d60653d6b"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#aa7cf1f1132b99d6df086b46d60653d6b">bitpit::LevelSetSegmentation::isInNarrowBand</a></div><div class="ttdeci">bool isInNarrowBand(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00162">levelSetSegmentation.cpp:162</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_a095c1b5e1bb5fd841b82f50a71a50dad"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#a095c1b5e1bb5fd841b82f50a71a50dad">bitpit::LevelSetObject::getId</a></div><div class="ttdeci">virtual int getId() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00059">levelSetObject.cpp:59</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_aed766331f391f2a2218e8973c87869bc"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#aed766331f391f2a2218e8973c87869bc">bitpit::LevelSetSegmentation::readCommunicationBuffer</a></div><div class="ttdeci">void readCommunicationBuffer(const std::vector&lt; long &gt; &amp;, const long &amp;, RecvBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00827">levelSetSegmentation.cpp:827</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a4168291bad279c958b90fddc8b202ecc"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a4168291bad279c958b90fddc8b202ecc">bitpit::LevelSet::compute</a></div><div class="ttdeci">void compute()</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00345">levelSet.cpp:345</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetCartesian_xhtml_a3d6221d723e861a93c456d8422c8000d"><div class="ttname"><a href="classbitpit_1_1LevelSetCartesian.xhtml#a3d6221d723e861a93c456d8422c8000d">bitpit::LevelSetCartesian::~LevelSetCartesian</a></div><div class="ttdeci">virtual ~LevelSetCartesian()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetCartesian_8cpp_source.xhtml#l00041">levelSetCartesian.cpp:41</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a538026315917904fd637b329f6716a2c"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a538026315917904fd637b329f6716a2c">bitpit::LevelSetKernel::LevelSetKernel</a></div><div class="ttdeci">LevelSetKernel()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00051">levelSetKernel.cpp:51</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_a79eb08ec797686a17d517bf4f4659d2c"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#a79eb08ec797686a17d517bf4f4659d2c">bitpit::LevelSetObject::~LevelSetObject</a></div><div class="ttdeci">virtual ~LevelSetObject()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00045">levelSetObject.cpp:45</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a9e30faab8e4f91f5c8ef0684ddf23d88"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a9e30faab8e4f91f5c8ef0684ddf23d88">bitpit::LevelSetSegmentation::getSimplexList</a></div><div class="ttdeci">const std::unordered_set&lt; long &gt; &amp; getSimplexList(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00132">levelSetSegmentation.cpp:132</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a70bff906b394c2c23b1a0e0ab610ac83"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a70bff906b394c2c23b1a0e0ab610ac83">bitpit::LevelSetSegmentation::associateSimplexToCell</a></div><div class="ttdeci">void associateSimplexToCell(LevelSetCartesian *, const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00468">levelSetSegmentation.cpp:468</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ac8b6c0dc68a43a97efa0bf90b9182a25"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ac8b6c0dc68a43a97efa0bf90b9182a25">bitpit::LevelSetKernel::m_mesh</a></div><div class="ttdeci">VolumeKernel * m_mesh</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00127">levelSet.hpp:127</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a4247b7f2c88b4302868449a7eb8e4fd8"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a4247b7f2c88b4302868449a7eb8e4fd8">bitpit::LevelSetKernel::writeCommunicationBuffer</a></div><div class="ttdeci">void writeCommunicationBuffer(const std::vector&lt; long &gt; &amp;, SendBuffer &amp;, SendBuffer &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00754">levelSetKernel.cpp:754</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a8af81b96c7c37141cb780fe6d242daba"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a8af81b96c7c37141cb780fe6d242daba">bitpit::LevelSetKernel::setSizeNarrowBand</a></div><div class="ttdeci">void setSizeNarrowBand(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00185">levelSetKernel.cpp:185</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_a4ecce213c104dc31e63bef40490ec242"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#a4ecce213c104dc31e63bef40490ec242">bitpit::LevelSetObject::dump</a></div><div class="ttdeci">void dump(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00076">levelSetObject.cpp:76</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_abe9bfef4718dcfce759381b3cc080a08"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#abe9bfef4718dcfce759381b3cc080a08">bitpit::LevelSetKernel::clearAfterMeshMovement</a></div><div class="ttdeci">void clearAfterMeshMovement(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00597">levelSetKernel.cpp:597</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a42e8badfa3d23dbdf83594b4f6d07fc1"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a42e8badfa3d23dbdf83594b4f6d07fc1">bitpit::LevelSet::getObject</a></div><div class="ttdeci">int getObject(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00238">levelSet.cpp:238</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a00c3c7c18a6075a9713b2289656e41a3"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a00c3c7c18a6075a9713b2289656e41a3">bitpit::LevelSetKernel::getLS</a></div><div class="ttdeci">double getLS(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00103">levelSetKernel.cpp:103</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ac6b6f336045d9576467c74fda94c653e"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ac6b6f336045d9576467c74fda94c653e">bitpit::LevelSetSegmentation::getSimplexVertices</a></div><div class="ttdeci">std::vector&lt; std::array&lt; double, 3 &gt; &gt; getSimplexVertices(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00171">levelSetSegmentation.cpp:171</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a66f34d2c1fd4bdea07d153aa2b19b203"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a66f34d2c1fd4bdea07d153aa2b19b203">bitpit::LevelSetKernel::isInNarrowBand</a></div><div class="ttdeci">bool isInNarrowBand(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00163">levelSetKernel.cpp:163</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml_a8526c7d7e89f667b49a418080d1c06ad"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#a8526c7d7e89f667b49a418080d1c06ad">bitpit::LevelSetKernel::LSInfo::value</a></div><div class="ttdeci">double value</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00120">levelSet.hpp:120</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_ad01bff31af5060f22a1cadf3327fd5e1"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#ad01bff31af5060f22a1cadf3327fd5e1">bitpit::LevelSetOctree::~LevelSetOctree</a></div><div class="ttdeci">virtual ~LevelSetOctree()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00041">levelSetOctree.cpp:41</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a24575637dacead8fb2c1ad27ad7a6be7"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a24575637dacead8fb2c1ad27ad7a6be7">bitpit::LevelSetKernel::assureMPI</a></div><div class="ttdeci">bool assureMPI()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00733">levelSetKernel.cpp:733</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml">bitpit::SurfUnstructured</a></div><div class="ttdoc">The SurfUnstructured class defines an unstructured surface triangulation. </div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8hpp_source.xhtml#l00036">surfunstructured.hpp:36</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_aeba34de2f04469a7fc91466d4ff7998a"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#aeba34de2f04469a7fc91466d4ff7998a">bitpit::LevelSet::getGradient</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; getGradient(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00229">levelSet.cpp:229</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml">bitpit::LevelSetSegmentation</a></div><div class="ttdoc">Implements visitor pattern fo segmentated geometries. </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00253">levelSet.hpp:253</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetObject_xhtml_ae9e619e5103d2d5594afab3003e3c2d2"><div class="ttname"><a href="classbitpit_1_1LevelSetObject.xhtml#ae9e619e5103d2d5594afab3003e3c2d2">bitpit::LevelSetObject::LevelSetObject</a></div><div class="ttdeci">LevelSetObject(int)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetObject_8cpp_source.xhtml#l00052">levelSetObject.cpp:52</a></div></div>
<div class="ttc" id="classbitpit_1_1SendBuffer_xhtml"><div class="ttname"><a href="classbitpit_1_1SendBuffer.xhtml">bitpit::SendBuffer</a></div><div class="ttdoc">Buffer to be used for send communications. </div><div class="ttdef"><b>Definition:</b> <a href="communications__buffers_8hpp_source.xhtml#l00090">communications_buffers.hpp:90</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a25a324abc0f55bae7214f4ccff8c9cab"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a25a324abc0f55bae7214f4ccff8c9cab">bitpit::LevelSetSegmentation::updateLSInNarrowBand</a></div><div class="ttdeci">void updateLSInNarrowBand(LevelSetKernel *, const std::vector&lt; adaption::Info &gt; &amp;, const double &amp;, const bool &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00448">levelSetSegmentation.cpp:448</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetCartesian_xhtml_a3832ac56df2f84f586ce0b2e373c4eae"><div class="ttname"><a href="classbitpit_1_1LevelSetCartesian.xhtml#a3832ac56df2f84f586ce0b2e373c4eae">bitpit::LevelSetCartesian::computeSizeNarrowBand</a></div><div class="ttdeci">double computeSizeNarrowBand(LevelSetObject *)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetCartesian_8cpp_source.xhtml#l00056">levelSetCartesian.cpp:56</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a2b2069be91249715a7ab170512223a5f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a2b2069be91249715a7ab170512223a5f">bitpit::LevelSetKernel::computeGradientUpwind</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; computeGradientUpwind(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00194">levelSetKernel.cpp:194</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a620cbe659447387c5cbe0701bb7b0ab3"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a620cbe659447387c5cbe0701bb7b0ab3">bitpit::LevelSetSegmentation::lsFromSimplex</a></div><div class="ttdeci">void lsFromSimplex(LevelSetKernel *, const double &amp;, const bool &amp;, bool filter=false)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00197">levelSetSegmentation.cpp:197</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_ab7c5954b25fa16ebb3a6c2e80def916f"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#ab7c5954b25fa16ebb3a6c2e80def916f">bitpit::LevelSet::setSizeNarrowBand</a></div><div class="ttdeci">void setSizeNarrowBand(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00336">levelSet.cpp:336</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a17ac9a87e45c5f160316adfa4f5113de"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a17ac9a87e45c5f160316adfa4f5113de">bitpit::LevelSetKernel::getSizeNarrowBand</a></div><div class="ttdeci">double getSizeNarrowBand() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00177">levelSetKernel.cpp:177</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_a851ff999bc25f8d4be84ae2e049933d0"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#a851ff999bc25f8d4be84ae2e049933d0">bitpit::LevelSetSegmentation::getSupport</a></div><div class="ttdeci">long getSupport(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00147">levelSetSegmentation.cpp:147</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_ab3d9782b45510606ec32bd74aeb7786f"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#ab3d9782b45510606ec32bd74aeb7786f">bitpit::LevelSetKernel::getMesh</a></div><div class="ttdeci">VolumeKernel * getMesh() const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00093">levelSetKernel.cpp:93</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a66094ad89698e5f32c495d240376dfc1"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a66094ad89698e5f32c495d240376dfc1">bitpit::LevelSet::restore</a></div><div class="ttdeci">void restore(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00462">levelSet.cpp:462</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a79dc855649da2a386b999d991cd7603c"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a79dc855649da2a386b999d991cd7603c">bitpit::LevelSetKernel::getLSInfo</a></div><div class="ttdeci">PiercedVector&lt; LSInfo &gt; &amp; getLSInfo()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00085">levelSetKernel.cpp:85</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_ac88aaa9d09663ecd1938667c7dcae5a6"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#ac88aaa9d09663ecd1938667c7dcae5a6">bitpit::LevelSet::exchangeGhosts</a></div><div class="ttdeci">void exchangeGhosts()</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00494">levelSet.cpp:494</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_acecb252ef5a3df908217900ab175938c"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#acecb252ef5a3df908217900ab175938c">bitpit::LevelSetSegmentation::~LevelSetSegmentation</a></div><div class="ttdeci">virtual ~LevelSetSegmentation()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00069">levelSetSegmentation.cpp:69</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a9967d2d63cf0c4695248ce71cb5edf39"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a9967d2d63cf0c4695248ce71cb5edf39">bitpit::LevelSet::getObjectAndSupport</a></div><div class="ttdeci">void getObjectAndSupport(const long &amp;, int &amp;, long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00264">levelSet.cpp:264</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a0479c0ae3f673e2ef5c93602ed754d22"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a0479c0ae3f673e2ef5c93602ed754d22">bitpit::LevelSetKernel::filterOutsideNarrowBand</a></div><div class="ttdeci">void filterOutsideNarrowBand(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00623">levelSetKernel.cpp:623</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a1a5477ad34a671de362c3b81d64f8655"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a1a5477ad34a671de362c3b81d64f8655">bitpit::LevelSet::update</a></div><div class="ttdeci">void update(const std::vector&lt; adaption::Info &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00374">levelSet.cpp:374</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a0c7786a70ad675048b4ee33f3b368228"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a0c7786a70ad675048b4ee33f3b368228">bitpit::LevelSetKernel::~LevelSetKernel</a></div><div class="ttdeci">virtual ~LevelSetKernel()</div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00073">levelSetKernel.cpp:73</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetOctree_xhtml_a9eae2ac31f7becc1b75e4213f2e1c67d"><div class="ttname"><a href="classbitpit_1_1LevelSetOctree.xhtml#a9eae2ac31f7becc1b75e4213f2e1c67d">bitpit::LevelSetOctree::computeSizeFromRSearch</a></div><div class="ttdeci">double computeSizeFromRSearch(double)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetOctree_8cpp_source.xhtml#l00250">levelSetOctree.cpp:250</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetCartesian_xhtml_a9390fce704670e2f86e5750613db20cf"><div class="ttname"><a href="classbitpit_1_1LevelSetCartesian.xhtml#a9390fce704670e2f86e5750613db20cf">bitpit::LevelSetCartesian::LevelSetCartesian</a></div><div class="ttdeci">LevelSetCartesian(VolCartesian &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetCartesian_8cpp_source.xhtml#l00048">levelSetCartesian.cpp:48</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a7a883d1b59925413e2134843decd2ece"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a7a883d1b59925413e2134843decd2ece">bitpit::LevelSet::dump</a></div><div class="ttdeci">void dump(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00441">levelSet.cpp:441</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml">bitpit::VolumeKernel</a></div><div class="ttdoc">The VolumeKernel class provides an interface for defining volume patches. </div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8hpp_source.xhtml#l00032">volume_kernel.hpp:32</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a75a142c0c3da7f30657dd282712fa710"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a75a142c0c3da7f30657dd282712fa710">bitpit::LevelSet::getSign</a></div><div class="ttdeci">short getSign(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00286">levelSet.cpp:286</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ada4f28d606c67e795d79835b54b78786"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ada4f28d606c67e795d79835b54b78786">bitpit::LevelSetSegmentation::dumpDerived</a></div><div class="ttdeci">void dumpDerived(std::fstream &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00723">levelSetSegmentation.cpp:723</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetSegmentation_xhtml_ab960e3283c7b5102282a03e34edb5e6c"><div class="ttname"><a href="classbitpit_1_1LevelSetSegmentation.xhtml#ab960e3283c7b5102282a03e34edb5e6c">bitpit::LevelSetSegmentation::getBoundingBox</a></div><div class="ttdeci">void getBoundingBox(std::array&lt; double, 3 &gt; &amp;, std::array&lt; double, 3 &gt; &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetSegmentation_8cpp_source.xhtml#l00416">levelSetSegmentation.cpp:416</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_ab021610d3ddf3fab7eee983fe5de8e6a"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#ab021610d3ddf3fab7eee983fe5de8e6a">bitpit::LevelSet::setPropagateValue</a></div><div class="ttdeci">void setPropagateValue(bool)</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00328">levelSet.cpp:328</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSet_xhtml_a33ea4d6c4efd868df48067d52bed77d1"><div class="ttname"><a href="classbitpit_1_1LevelSet.xhtml#a33ea4d6c4efd868df48067d52bed77d1">bitpit::LevelSet::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8cpp_source.xhtml#l00167">levelSet.cpp:167</a></div></div>
<div class="ttc" id="structbitpit_1_1LevelSetKernel_1_1LSInfo_xhtml_abb7663f39862227420f82665fa03c883"><div class="ttname"><a href="structbitpit_1_1LevelSetKernel_1_1LSInfo.xhtml#abb7663f39862227420f82665fa03c883">bitpit::LevelSetKernel::LSInfo::gradient</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; gradient</div><div class="ttdef"><b>Definition:</b> <a href="levelSet_8hpp_source.xhtml#l00121">levelSet.hpp:121</a></div></div>
<div class="ttc" id="classbitpit_1_1LevelSetKernel_xhtml_a27ab641eb7b79b49331c6dc8844bfb13"><div class="ttname"><a href="classbitpit_1_1LevelSetKernel.xhtml#a27ab641eb7b79b49331c6dc8844bfb13">bitpit::LevelSetKernel::getGradient</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; getGradient(const long &amp;) const </div><div class="ttdef"><b>Definition:</b> <a href="levelSetKernel_8cpp_source.xhtml#l00118">levelSetKernel.cpp:118</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

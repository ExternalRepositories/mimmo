
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/patchkernel/patch_kernel.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_9dc7aa6b5c138a40bfa86c6dff2965ac.xhtml">patchkernel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">patch_kernel.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#   include &lt;mpi.h&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;bitpit_SA.hpp&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;patch_kernel.hpp&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classbitpit_1_1IndexGenerator.xhtml#ac2e3f60956058736cfdebef0d5afba4f">   55</a></span>&#160;<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#ac2e3f60956058736cfdebef0d5afba4f">IndexGenerator::IndexGenerator</a>()</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    : m_id(-1)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classbitpit_1_1IndexGenerator.xhtml#a1dbb5aa5dd858ea4acea4815d186a16f">   69</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a1dbb5aa5dd858ea4acea4815d186a16f">IndexGenerator::generateId</a>()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// If the trash is empty generate a new id</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">if</span> (m_trash.empty()) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        assert(m_id &lt; <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::numeric_limits&lt;long&gt;::max</a>());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">return</span> ++m_id;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// If there are ids in the trash recycle te first id in the list</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">long</span> <span class="keywordtype">id</span> = m_trash.front();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    m_trash.pop_front();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classbitpit_1_1IndexGenerator.xhtml#abbae2e22e3a5c65141f8fe70312b211f">   89</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1IndexGenerator.xhtml#abbae2e22e3a5c65141f8fe70312b211f">IndexGenerator::getLastId</a>()</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> m_id;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classbitpit_1_1IndexGenerator.xhtml#ae8b6a5913402478d4b5c59d28cc97184">  101</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1IndexGenerator.xhtml#ae8b6a5913402478d4b5c59d28cc97184">IndexGenerator::trashId</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;{</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    m_trash.push_back(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classbitpit_1_1IndexGenerator.xhtml#a8868b27e37b8d60a50c2139f866e5e0a">  109</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a8868b27e37b8d60a50c2139f866e5e0a">IndexGenerator::reset</a>()</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    m_id = -1;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    m_trash.clear();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#abe04a664c0338472ed6bc58b08766162">  135</a></span>&#160;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#abe04a664c0338472ed6bc58b08766162">PatchKernel::PatchKernel</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dimension, <span class="keywordtype">bool</span> expert)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    : m_nInternals(0), m_nGhosts(0),</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      m_lastInternalId(<a class="code" href="classbitpit_1_1Element.xhtml">Element</a>::NULL_ID),</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      m_firstGhostId(<a class="code" href="classbitpit_1_1Element.xhtml">Element</a>::NULL_ID),</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      m_boxFrozen(false), m_boxDirty(true),</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      m_adaptionDirty(true), m_expert(expert), m_hasCustomTolerance(false),</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      m_rank(0), m_nProcessors(1)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;#if BITPIT_ENABLE_MPI==1</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      , m_communicator(MPI_COMM_NULL)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;#endif</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    setId(<span class="keywordtype">id</span>) ;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    setDimension(dimension);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// Initialize the geometrical tolerance to a default value</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">_setTol</a>(DEFAULT_TOLERANCE);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// Initializes the bounding box</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4cee1aaca004bf6f3af1f11af40ef5a4">setBoundingBoxFrozen</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a7bd96cdfcd6ce1cddee04252824cd512">clearBoundingBox</a>();</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// Set VTK information</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    std::ostringstream convert;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    convert &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5e2f16d4863f9ca097ce5274e4257874">getId</a>();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#adf7ef2f36ba699143a50f003dd359f82">setName</a>(convert.str());</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#a8954c7c8e3f3737c2d932a3c57866414">setCodex</a>(VTKFormat::APPENDED);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// Get VTK data types</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="group__VTKEnums.xhtml#ga442bde5dd01b348dd5667ca73f5ffa73">VTKDataType</a> vtkInt    = <a class="code" href="classbitpit_1_1VTKTypes.xhtml#ab356047e1133452a2cc65f44d23b75aa">VTKTypes::whichType</a>(<span class="keywordtype">int</span>());</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="group__VTKEnums.xhtml#ga442bde5dd01b348dd5667ca73f5ffa73">VTKDataType</a> vtkLong   = <a class="code" href="classbitpit_1_1VTKTypes.xhtml#ab356047e1133452a2cc65f44d23b75aa">VTKTypes::whichType</a>(<span class="keywordtype">long</span>());</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="group__VTKEnums.xhtml#ga442bde5dd01b348dd5667ca73f5ffa73">VTKDataType</a> vtkDouble = <a class="code" href="classbitpit_1_1VTKTypes.xhtml#ab356047e1133452a2cc65f44d23b75aa">VTKTypes::whichType</a>(<span class="keywordtype">double</span>());</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="comment">// Set VTK Geom Data</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTKUnstructuredGrid.xhtml#af95f22002fd7e55272361624e23649ed">setGeomData</a>(VTKUnstructuredField::POINTS, vtkDouble, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTKUnstructuredGrid.xhtml#af95f22002fd7e55272361624e23649ed">setGeomData</a>(VTKUnstructuredField::OFFSETS, vtkInt, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTKUnstructuredGrid.xhtml#af95f22002fd7e55272361624e23649ed">setGeomData</a>(VTKUnstructuredField::TYPES, vtkInt, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTKUnstructuredGrid.xhtml#af95f22002fd7e55272361624e23649ed">setGeomData</a>(VTKUnstructuredField::CONNECTIVITY, vtkLong, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// Add VTK basic patch data</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#a2a81a8c03fb2fc6be546fb1ad3a7cab9">addData</a>(<span class="stringliteral">&quot;cellIndex&quot;</span>, VTKFieldType::SCALAR, VTKLocation::CELL, vtkLong, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#a2a81a8c03fb2fc6be546fb1ad3a7cab9">addData</a>(<span class="stringliteral">&quot;PID&quot;</span>, VTKFieldType::SCALAR, VTKLocation::CELL, vtkInt, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#a2a81a8c03fb2fc6be546fb1ad3a7cab9">addData</a>(<span class="stringliteral">&quot;vertexIndex&quot;</span>, VTKFieldType::SCALAR, VTKLocation::POINT, vtkLong, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor"></span>    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#a2a81a8c03fb2fc6be546fb1ad3a7cab9">addData</a>(<span class="stringliteral">&quot;rank&quot;</span>, VTKFieldType::SCALAR, VTKLocation::CELL, vtkInt, <span class="keyword">this</span>);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab0fda03aae770bcc500dcc219ad46c34">  186</a></span>&#160;<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0fda03aae770bcc500dcc219ad46c34">PatchKernel::~PatchKernel</a>()</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9">reset</a>();</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a815b41b014cbdcbb235ad243a434826f">freeCommunicator</a>();</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a73ed4cfe15a0fdfb4328e0c646776de2">  201</a></span>&#160;<span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a73ed4cfe15a0fdfb4328e0c646776de2">PatchKernel::update</a>(<span class="keywordtype">bool</span> trackAdaption)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; adaptionInfo = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af7320e75f9351b430bee6ee6f5b91553">updateAdaption</a>(trackAdaption);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a">updateBoundingBox</a>();</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> adaptionInfo;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af7320e75f9351b430bee6ee6f5b91553">  216</a></span>&#160;<span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af7320e75f9351b430bee6ee6f5b91553">PatchKernel::updateAdaption</a>(<span class="keywordtype">bool</span> trackAdaption)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::vector&lt;adaption::Info&gt; adaptionInfo;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#abd98477469c550cfb7bb440ca3f3f8d7">isAdaptionDirty</a>(<span class="keyword">true</span>)) {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> adaptionInfo;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    adaptionInfo = _updateAdaption(trackAdaption);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    m_cells.flush();</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    m_interfaces.flush();</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    m_vertices.flush();</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">setAdaptionDirty</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> adaptionInfo;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ac305e1c89cc6ac669a2b6481098af77d">  239</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac305e1c89cc6ac669a2b6481098af77d">PatchKernel::markCellForRefinement</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">bool</span> updated = _markCellForRefinement(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">if</span> (updated) {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">setAdaptionDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;}</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a4c116a309c0bb6738343f860e58fd38e">  253</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4c116a309c0bb6738343f860e58fd38e">PatchKernel::markCellForCoarsening</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordtype">bool</span> updated = _markCellForCoarsening(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">if</span> (updated) {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">setAdaptionDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9465abd8e172d89c86820c9a32c5a6cf">  268</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9465abd8e172d89c86820c9a32c5a6cf">PatchKernel::enableCellBalancing</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enabled)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordtype">bool</span> updated = _enableCellBalancing(<span class="keywordtype">id</span>, enabled);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <span class="keywordflow">if</span> (updated) {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">setAdaptionDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9">  280</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9">PatchKernel::reset</a>()</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9598f5c2bbc862b32b1e0a281ab8340c">resetVertices</a>();</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af94247665b7beb507a303148a514ed0b">resetCells</a>();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">resetInterfaces</a>();</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9598f5c2bbc862b32b1e0a281ab8340c">  290</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9598f5c2bbc862b32b1e0a281ab8340c">PatchKernel::resetVertices</a>()</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;{</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    m_vertices.clear();</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Vertex&gt;</a>().swap(m_vertices);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    m_vertexIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a8868b27e37b8d60a50c2139f866e5e0a">reset</a>();</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        cell.unsetConnect();</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af94247665b7beb507a303148a514ed0b">  304</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af94247665b7beb507a303148a514ed0b">PatchKernel::resetCells</a>()</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    m_cells.clear();</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Cell&gt;</a>().swap(m_cells);</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    m_cellIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a8868b27e37b8d60a50c2139f866e5e0a">reset</a>();</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    m_nInternals = 0;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    m_nGhosts = 0;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;interface : m_interfaces) {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        interface.unsetNeigh();</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        interface.unsetOwner();</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;}</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">  321</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">PatchKernel::resetInterfaces</a>()</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;{</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    m_interfaces.clear();</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Interface&gt;</a>().swap(m_interfaces);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    m_interfaceIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a8868b27e37b8d60a50c2139f866e5e0a">reset</a>();</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        cell.resetInterfaces();</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;}</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">  345</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">PatchKernel::reserveVertices</a>(<span class="keywordtype">size_t</span> nVertices)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    m_vertices.reserve(nVertices);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;}</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">  368</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">PatchKernel::reserveCells</a>(<span class="keywordtype">size_t</span> nCells)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;{</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    m_cells.reserve(nCells);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;}</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a812c95760d351bda0045daa63955c002">  393</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a812c95760d351bda0045daa63955c002">PatchKernel::reserveInterfaces</a>(<span class="keywordtype">size_t</span> nInterfaces)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;{</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    m_interfaces.reserve(nInterfaces);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;}</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab0b53c58cf2cf70e38904fce3a6caac1">  409</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2f95af18c9325379489d6f5805dc1ef5">PatchKernel::write</a>(std::string filename)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    std::string oldFilename = m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#acdc7e63ee8bd40711e169cf9e5578cae">getName</a>();</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#adf7ef2f36ba699143a50f003dd359f82">setName</a>(filename);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2f95af18c9325379489d6f5805dc1ef5">write</a>();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#adf7ef2f36ba699143a50f003dd359f82">setName</a>(oldFilename);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a2f95af18c9325379489d6f5805dc1ef5">  421</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2f95af18c9325379489d6f5805dc1ef5">PatchKernel::write</a>()</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;{</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="comment">// Set thedimensinos of the mesh</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordtype">long</span> connectSize = 0;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        connectSize += cell.getInfo().nVertices;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTKUnstructuredGrid.xhtml#a35a2d26dac12929027dcf6fbaff48c4f">setDimensions</a>(m_cells.size(), m_vertices.size(), connectSize);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="comment">// Write the mesh</span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    m_vtk.<a class="code" href="classbitpit_1_1VTK.xhtml#a4c125da69aaf4c7fa07aa410b587b50b">write</a>();</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">  441</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">PatchKernel::setAdaptionDirty</a>(<span class="keywordtype">bool</span> dirty)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;{</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">if</span> (m_adaptionDirty == dirty) {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    m_adaptionDirty = dirty;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;}</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#abd98477469c550cfb7bb440ca3f3f8d7">  456</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#abd98477469c550cfb7bb440ca3f3f8d7">PatchKernel::isAdaptionDirty</a>(<span class="keywordtype">bool</span> global)<span class="keyword"> const</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">isDirty</a> = m_adaptionDirty;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (global &amp;&amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9c1b9c557d6e2c90eb5fb0ef6aa14dbe">isCommunicatorSet</a>()) {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;communicator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a801bc85779cba6906e87a5a3191b5263">getCommunicator</a>();</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        MPI_Allreduce(const_cast&lt;bool *&gt;(&amp;m_adaptionDirty), &amp;isDirty, 1, MPI_C_BOOL, MPI_LOR, communicator);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="preprocessor"></span>    BITPIT_UNUSED(global);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">isDirty</a>;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">  478</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">PatchKernel::isDirty</a>(<span class="keywordtype">bool</span> global)<span class="keyword"> const</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#abd98477469c550cfb7bb440ca3f3f8d7">isAdaptionDirty</a>(global) || <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">isBoundingBoxDirty</a>(global));</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;}</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">  492</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">PatchKernel::setExpert</a>(<span class="keywordtype">bool</span> expert)</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;{</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>() == expert) {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    m_expert = expert;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;}</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00511"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">  511</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">PatchKernel::isExpert</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">return</span> m_expert;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;}</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;<span class="keywordtype">void</span> PatchKernel::setId(<span class="keywordtype">int</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;{</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    m_id = id;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;}</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a5e2f16d4863f9ca097ce5274e4257874">  531</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5e2f16d4863f9ca097ce5274e4257874">PatchKernel::getId</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">return</span> m_id;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="keywordtype">void</span> PatchKernel::setDimension(<span class="keywordtype">int</span> dimension)</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;{</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    m_dimension = dimension;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;}</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">  551</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">PatchKernel::getDimension</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keywordflow">return</span> m_dimension;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;}</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00562"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">  562</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">PatchKernel::isThreeDimensional</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">return</span> (m_dimension == 3);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;}</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00572"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">  572</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">PatchKernel::getVertexCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">return</span> m_vertices.size();</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;}</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a582cb4dd83458721c323aa0518157400">  582</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Vertex&gt;</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a582cb4dd83458721c323aa0518157400">PatchKernel::getVertices</a>()</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;{</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keywordflow">return</span> m_vertices;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;}</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div>
<div class="line"><a name="l00593"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">  593</a></span>&#160;<a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">PatchKernel::getVertex</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;{</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">return</span> m_vertices[id];</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;}</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00604"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aaed245d0e5d4bd899d7d86c84723e405">  604</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">PatchKernel::getVertex</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">return</span> m_vertices[id];</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div>
<div class="line"><a name="l00614"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a0dd10739cfaa2b6b74b330a3c743a45e">  614</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a0dd10739cfaa2b6b74b330a3c743a45e">PatchKernel::getVertexIterator</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;{</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    <span class="keywordflow">return</span> m_vertices.getIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;}</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">  624</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">PatchKernel::vertexBegin</a>()</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;{</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">return</span> m_vertices.begin();</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;}</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">  634</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">PatchKernel::vertexEnd</a>()</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;{</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">return</span> m_vertices.end();</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;}</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9cd3eeb6d54f3a29dbc21eb92ded8dc6">  644</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9cd3eeb6d54f3a29dbc21eb92ded8dc6">PatchKernel::generateVertexId</a>()</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;{</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        <span class="keywordflow">return</span> Vertex::NULL_ID;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">return</span> m_vertexIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a1dbb5aa5dd858ea4acea4815d186a16f">generateId</a>();</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;}</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> PatchKernel::createVertex(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;coords, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;{</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keywordtype">id</span> = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9cd3eeb6d54f3a29dbc21eb92ded8dc6">generateVertexId</a>();</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    }</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="comment">// Add the vertex</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    PiercedVector&lt;Vertex&gt;::iterator iterator = m_vertices.reclaim(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    iterator-&gt;setId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    iterator-&gt;setCoords(coords);</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="comment">// Update the bounding box</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a363f9828e1cebc66f9da634640f3d92c">addPointToBoundingBox</a>(iterator-&gt;getCoords());</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;}</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">  685</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">PatchKernel::addVertex</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;coords, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;{</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">vertexEnd</a>();</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keywordflow">return</span> createVertex(coords, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;}</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div>
<div class="line"><a name="l00702"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a40c7ed94a8d6b764273dbcbf1a4ff97e">  702</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">PatchKernel::addVertex</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;source, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;{</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">vertexEnd</a>();</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    }</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a> iterator = createVertex(source.<a class="code" href="classbitpit_1_1Vertex.xhtml#a3352a00d79e6364e2fb3d8e81c64bd21">getCoords</a>(), id);</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex = (*iterator);</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;    <span class="keywordtype">id</span> = vertex.<a class="code" href="classbitpit_1_1Vertex.xhtml#a1b4f5221489120f2dd64643071b2f0e4">getId</a>();</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    vertex = source;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    vertex.<a class="code" href="classbitpit_1_1Vertex.xhtml#ac4d94a605657de0491eeee7befdf7577">setId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;}</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af563b352c4e3a8d71d16724d570e061f">  725</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::VertexIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">PatchKernel::addVertex</a>(<a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;&amp;source, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;{</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">vertexEnd</a>();</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    }</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <span class="keywordtype">id</span> = source.getId();</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    }</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a> iterator = createVertex(source.getCoords(), id);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex = (*iterator);</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordtype">id</span> = vertex.<a class="code" href="classbitpit_1_1Vertex.xhtml#a1b4f5221489120f2dd64643071b2f0e4">getId</a>();</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    vertex = std::move(source);</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    vertex.setId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;}</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00750"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#afd674220b1f6a8dd4b24ee90e742e97c">  750</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afd674220b1f6a8dd4b24ee90e742e97c">PatchKernel::deleteVertex</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;{</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    }</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="comment">// Update the bounding box</span></div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae537aa5bafa444ca55d0a1ab0f446b59">removePointFromBoundingBox</a>(m_vertices[<span class="keywordtype">id</span>].getCoords(), delayed);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="comment">// Delete the vertex</span></div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    m_vertices.erase(<span class="keywordtype">id</span>, delayed);</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    m_vertexIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#ae8b6a5913402478d4b5c59d28cc97184">trashId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    <span class="comment">// If there are no more vertices reset them</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    <span class="keywordflow">if</span> (m_vertices.size() == 0) {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9598f5c2bbc862b32b1e0a281ab8340c">resetVertices</a>();</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;}</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div>
<div class="line"><a name="l00777"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab4be2b88640dbc8a2d774c2677227db7">  777</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab4be2b88640dbc8a2d774c2677227db7">PatchKernel::deleteVertices</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;ids, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;{</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    std::vector&lt;long&gt;::const_iterator end = ids.cend();</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    <span class="keywordflow">for</span> (std::vector&lt;long&gt;::const_iterator i = ids.cbegin(); i != end; ++i) {</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afd674220b1f6a8dd4b24ee90e742e97c">deleteVertex</a>(*i, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    }</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keywordflow">if</span> (!delayed) {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        m_vertices.flush();</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a">updateBoundingBox</a>();</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    }</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;}</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;</div>
<div class="line"><a name="l00803"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a5f95d54d53b7566455fe364e39fe73df">  803</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5f95d54d53b7566455fe364e39fe73df">PatchKernel::countFreeVertices</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    std::unordered_set&lt;long&gt; freeVertices;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordtype">int</span> nCellFaces = cell.getFaceCount();</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            <span class="keywordflow">if</span> (!cell.isFaceBorder(i)) {</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            }</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            std::vector&lt;int&gt; faceLocalConnect = cell.getFaceLocalConnect(i);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; faceLocalConnect.size(); ++j) {</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                freeVertices.insert(cell.getVertex(faceLocalConnect[j]));</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            }</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        }</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    }</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keywordflow">return</span> freeVertices.size();</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;}</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a2468e31c9c405646bfe87349777c5319">  830</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2468e31c9c405646bfe87349777c5319">PatchKernel::countOrphanVertices</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;    std::unordered_set&lt;long&gt; usedVertices;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellVertices; ++i) {</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;            usedVertices.insert(cell.getVertex(i));</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        }</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    }</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    <span class="keywordflow">return</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>() - usedVertices.size());</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;}</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aecee21b4934e8a0d98a60c8cc1768240">  850</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aecee21b4934e8a0d98a60c8cc1768240">PatchKernel::findOrphanVertices</a>()</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;{</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    <span class="comment">// Add all the vertices to the list</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    std::unordered_set&lt;long&gt; vertexSet;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        vertexSet.insert(vertex.getId());</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    }</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">// Remove used vertices</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellVertices; ++i) {</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            vertexSet.erase(cell.getVertex(i));</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        }</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    }</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="comment">// Build a list</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    std::vector&lt;long&gt; vertexList;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    vertexList.reserve(vertexSet.size());</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span> : vertexSet) {</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        vertexList.emplace_back();</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        <span class="keywordtype">long</span> &amp;lastId = vertexList.back();</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        lastId = id;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    <span class="keywordflow">return</span> vertexList;</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;}</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;</div>
<div class="line"><a name="l00881"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#abec9536084e41fefd7ff72e28981bb9c">  881</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#abec9536084e41fefd7ff72e28981bb9c">PatchKernel::deleteOrphanVertices</a>()</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;{</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    }</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    std::vector&lt;long&gt; list = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aecee21b4934e8a0d98a60c8cc1768240">findOrphanVertices</a>();</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab4be2b88640dbc8a2d774c2677227db7">deleteVertices</a>(list);</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;}</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;</div>
<div class="line"><a name="l00901"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af34ade24608c03659f8abc18de88a099">  901</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af34ade24608c03659f8abc18de88a099">PatchKernel::collapseCoincidentVertices</a>(<span class="keywordtype">int</span> nBins)</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;{</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    std::vector&lt;long&gt; collapsedVertices;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        <span class="keywordflow">return</span> collapsedVertices;</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    }</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    std::vector&lt;std::vector&lt;std::array&lt;long, 2&gt; &gt; &gt; bins;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    <span class="comment">// INITIALIZE LOCAL VARIABLES                                             //</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="comment">// Random number generator</span></div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    srand(1223145611);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    <span class="comment">// Resize variables</span></div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    bins.resize(nBins * nBins * nBins);</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="comment">// SORT VERTICES ON BINS                                                  //</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="comment">// Sort vertices</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    std::unordered_map&lt;long, long&gt; bin_index = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a795e15153ffc0b6cbb6f837842750a18">binSortVertex</a>(nBins);</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="comment">// Sort cells</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    std::array&lt;long, 2&gt; binEntry;</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nCellVertices; ++j) {</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;            binEntry[0] = cell.getId();</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;            binEntry[1] = j;</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;            <span class="keywordtype">long</span> vertexId = cell.getVertex(j);</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;            <span class="keywordtype">long</span> binId = bin_index[vertexId];</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;            bins[binId].push_back(binEntry);</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        }</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    }</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    <span class="comment">// Free memory</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    bin_index.clear();</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    <span class="comment">// COLLAPSE DOUBLE VERTICES                                               //</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    <span class="keywordtype">long</span> collapsedVertexId;</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    std::vector&lt;bool&gt; flag(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>(), <span class="keyword">false</span>);</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;bin : bins) {</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        <span class="keywordtype">int</span> nBinCells = bin.size();</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        <span class="keywordflow">if</span> (nBinCells &gt; 0) {</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;            <span class="comment">// Randomize vertex insertion</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            std::vector&lt;int&gt; list;</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;            <a class="code" href="group__commonUtils.xhtml#gaa23e28742c346e3492aa57b4e2975033">utils::extractWithoutReplacement</a>(nBinCells, nBinCells - 1, list);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;            <span class="comment">// Vertex insertion</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            <a class="code" href="classbitpit_1_1KdTree.xhtml">KdTree&lt;3, Vertex, long&gt;</a> kd(nBinCells);</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nBinCells; ++j) {</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                <span class="keywordtype">long</span> cellId = bin[list[j]][0];</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell  = m_cells[cellId];</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                <span class="keywordtype">long</span> k         = bin[list[j]][1];</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                <span class="keywordtype">long</span> vertexId  = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(k);</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;                <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex = m_vertices[vertexId];</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                <span class="keywordflow">if</span> (kd.<a class="code" href="classbitpit_1_1KdTree.xhtml#a6d88c6710964d480c0a82edeb7daee0b">exist</a>(&amp;vertex, collapsedVertexId) &gt;= 0) {</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                    cell.<a class="code" href="classbitpit_1_1Element.xhtml#af6fa1001174a82ebab7b0d0003af4c77">setVertex</a>(k, collapsedVertexId);</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                    <span class="keywordflow">if</span> (!flag[vertexId]) {</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                        flag[vertexId] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;                        collapsedVertices.push_back(vertexId);</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;                    }</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;                    flag[vertexId] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                    kd.<a class="code" href="classbitpit_1_1KdTree.xhtml#a28f4913ee19bcc98f97b2f1da6a138a8">insert</a>(&amp;vertex, vertexId);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                }</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;            }</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;        }</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    }</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    <span class="keywordflow">return</span> collapsedVertices;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;}</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;</div>
<div class="line"><a name="l00989"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#afd9a5dd5da94a8357691f6aaacc9b812">  989</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afd9a5dd5da94a8357691f6aaacc9b812">PatchKernel::deleteCoincidentVertices</a>(<span class="keywordtype">int</span> nBins)</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;{</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    }</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    std::vector&lt;long&gt; verticesToDelete = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af34ade24608c03659f8abc18de88a099">collapseCoincidentVertices</a>(nBins);</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab4be2b88640dbc8a2d774c2677227db7">deleteVertices</a>(verticesToDelete);</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div>
<div class="line"><a name="l01007"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3"> 1007</a></span>&#160;<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">PatchKernel::getVertexCoords</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">getVertex</a>(<span class="keywordtype">id</span>).<a class="code" href="classbitpit_1_1Vertex.xhtml#a3352a00d79e6364e2fb3d8e81c64bd21">getCoords</a>();</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;}</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;</div>
<div class="line"><a name="l01017"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea"> 1017</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">PatchKernel::getCellCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    <span class="keywordflow">return</span> m_cells.size();</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;}</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;</div>
<div class="line"><a name="l01027"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af50016bc86a8f5a82a656adabc2a6173"> 1027</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af50016bc86a8f5a82a656adabc2a6173">PatchKernel::getInternalCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    <span class="keywordflow">return</span> m_nInternals;</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;}</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;</div>
<div class="line"><a name="l01037"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a2a451518a613e97edfed788b4a35fb22"> 1037</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2a451518a613e97edfed788b4a35fb22">PatchKernel::getGhostCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    <span class="keywordflow">return</span> m_nGhosts;</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;}</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;</div>
<div class="line"><a name="l01047"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe"> 1047</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Cell&gt;</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">PatchKernel::getCells</a>()</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;{</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;    <span class="keywordflow">return</span> m_cells;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;}</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;</div>
<div class="line"><a name="l01058"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d"> 1058</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">PatchKernel::getCell</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;{</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;    <span class="keywordflow">return</span> m_cells[id];</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;}</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;</div>
<div class="line"><a name="l01069"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a24c000afe3d4216f028ce82fe68010a9"> 1069</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">PatchKernel::getCell</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    <span class="keywordflow">return</span> m_cells[id];</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;}</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div>
<div class="line"><a name="l01080"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a57c9e86bcf9367baafdbd5b4e425e675"> 1080</a></span>&#160;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a57c9e86bcf9367baafdbd5b4e425e675">PatchKernel::getCellType</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    <span class="keywordflow">return</span> m_cells[id].getType();</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;}</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;</div>
<div class="line"><a name="l01090"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a8af0f162377b3f7fdc6cddaf384a9295"> 1090</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8af0f162377b3f7fdc6cddaf384a9295">PatchKernel::getLastInternal</a>()</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;{</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;    <span class="keywordflow">return</span> m_cells[m_lastInternalId];</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;}</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div>
<div class="line"><a name="l01100"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aa9e312fa7c7a6d3d58771b7f87da2df9"> 1100</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8af0f162377b3f7fdc6cddaf384a9295">PatchKernel::getLastInternal</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keywordflow">return</span> m_cells[m_lastInternalId];</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;}</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;</div>
<div class="line"><a name="l01110"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a72ac836a1918b575d55f79c5c25f507e"> 1110</a></span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a72ac836a1918b575d55f79c5c25f507e">PatchKernel::getFirstGhost</a>()</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;{</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;    <span class="keywordflow">return</span> m_cells[m_firstGhostId];</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;}</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;</div>
<div class="line"><a name="l01120"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ae6cc444d60d56638c09a2fce33414513"> 1120</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a72ac836a1918b575d55f79c5c25f507e">PatchKernel::getFirstGhost</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <span class="keywordflow">return</span> m_cells[m_firstGhostId];</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;}</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div>
<div class="line"><a name="l01130"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ad83a08e659d130288b1b4a94b52dfce9"> 1130</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad83a08e659d130288b1b4a94b52dfce9">PatchKernel::getCellIterator</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;{</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    <span class="keywordflow">return</span> m_cells.getIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;}</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div>
<div class="line"><a name="l01140"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c"> 1140</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c">PatchKernel::cellBegin</a>()</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;{</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    <span class="keywordflow">return</span> m_cells.begin();</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;}</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div>
<div class="line"><a name="l01150"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4"> 1150</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">PatchKernel::cellEnd</a>()</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;{</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;    <span class="keywordflow">return</span> m_cells.end();</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;}</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;</div>
<div class="line"><a name="l01160"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a0b4f43e8c99cbb30c128e4b1392a77c2"> 1160</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a0b4f43e8c99cbb30c128e4b1392a77c2">PatchKernel::internalBegin</a>()</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;{</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordflow">return</span> m_cells.begin();</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;}</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;</div>
<div class="line"><a name="l01170"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aa1070753551cb033cdc13d1e727bb6da"> 1170</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aa1070753551cb033cdc13d1e727bb6da">PatchKernel::internalEnd</a>()</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;{</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;    <span class="keywordflow">return</span> ++m_cells.getIterator(m_lastInternalId);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;}</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div>
<div class="line"><a name="l01180"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a5fa140da5f45334d6d61ddf6bd3179de"> 1180</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5fa140da5f45334d6d61ddf6bd3179de">PatchKernel::ghostBegin</a>()</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;{</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;    <span class="keywordflow">return</span> m_cells.getIterator(m_firstGhostId);</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;}</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;</div>
<div class="line"><a name="l01190"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a35a212d743e782d66e9f6372b96869f3"> 1190</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a35a212d743e782d66e9f6372b96869f3">PatchKernel::ghostEnd</a>()</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;{</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="keywordflow">return</span> m_cells.end();</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;}</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;</div>
<div class="line"><a name="l01200"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aea97ac3fbd77f09ae7ce903a630d19e7"> 1200</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aea97ac3fbd77f09ae7ce903a630d19e7">PatchKernel::generateCellId</a>()</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;{</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        <span class="keywordflow">return</span> Element::NULL_ID;</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    }</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    <span class="keywordflow">return</span> m_cellIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a1dbb5aa5dd858ea4acea4815d186a16f">generateId</a>();</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;}</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> PatchKernel::createCell(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">bool</span> interior, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;{</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;        <span class="keywordtype">id</span> = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aea97ac3fbd77f09ae7ce903a630d19e7">generateCellId</a>();</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    }</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="keyword">const</span> ElementInfo &amp;cellTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(type);</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <span class="keywordflow">if</span> (cellTypeInfo.dimension &gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>()) {</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    }</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    PiercedVector&lt;Cell&gt;::iterator iterator;</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;    <span class="keywordflow">if</span> (interior) {</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        <span class="comment">// Create an internal cell</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;        <span class="comment">// If there are ghosts cells, the internal cell should be inserted</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;        <span class="comment">// before the first ghost cell.</span></div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        <span class="keywordflow">if</span> (m_firstGhostId &lt; 0) {</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;            iterator = m_cells.reclaim(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;            iterator = m_cells.reclaimBefore(m_firstGhostId, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;        }</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;        m_nInternals++;</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        <span class="comment">// Update the id of the last internal cell</span></div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        <span class="keywordflow">if</span> (m_lastInternalId &lt; 0) {</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;            m_lastInternalId = id;</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_cells.rawIndex(m_lastInternalId) &lt; m_cells.rawIndex(<span class="keywordtype">id</span>)) {</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;            m_lastInternalId = id;</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        }</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        <span class="comment">// Create a ghost cell</span></div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        <span class="comment">// If there are internal cells, the ghost cell should be inserted</span></div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        <span class="comment">// after the last internal cell.</span></div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;        <span class="keywordflow">if</span> (m_lastInternalId &lt; 0) {</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;            iterator = m_cells.reclaim(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;            iterator = m_cells.reclaimAfter(m_lastInternalId, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        }</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;        m_nGhosts++;</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        <span class="comment">// Update the id of the first ghost cell</span></div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <span class="keywordflow">if</span> (m_firstGhostId &lt; 0) {</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;            m_firstGhostId = id;</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_cells.rawIndex(m_firstGhostId) &gt; m_cells.rawIndex(<span class="keywordtype">id</span>)) {</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;            m_firstGhostId = id;</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;        }</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    }</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    iterator-&gt;setId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;}</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;</div>
<div class="line"><a name="l01279"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242"> 1279</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">PatchKernel::addCell</a>(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;{</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    }</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;    <span class="keywordflow">return</span> createCell(type, <span class="keyword">true</span>, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;}</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;</div>
<div class="line"><a name="l01298"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a378f23b7445c76a866c346db200f2e1a"> 1298</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">PatchKernel::addCell</a>(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">bool</span> interior, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;{</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    }</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = createCell(type, interior, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = (*iterator);</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;    cell.<a class="code" href="classbitpit_1_1Cell.xhtml#acdce9c67696da61a59d7fdf2a469ba01">initialize</a>(type, interior);</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;}</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;</div>
<div class="line"><a name="l01322"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a29d3ac7c010d635da7702b07cf948a74"> 1322</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">PatchKernel::addCell</a>(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">bool</span> interior,</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;                                   std::unique_ptr&lt;<span class="keywordtype">long</span>[]&gt; &amp;&amp;connect, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;{</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;    }</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">addCell</a>(type, interior, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = (*iterator);</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;    cell.<a class="code" href="classbitpit_1_1Element.xhtml#adef671037ca88ed95c297e74d911f4c4">setConnect</a>(std::move(connect));</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;}</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;</div>
<div class="line"><a name="l01347"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ad4cc0ce0fd8c89fdee5d68d642783d66"> 1347</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">PatchKernel::addCell</a>(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">bool</span> interior,</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                                   <span class="keyword">const</span> std::vector&lt;long&gt; &amp;connect, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;{</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    }</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;    <span class="comment">// Add the cell</span></div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">addCell</a>(type, interior, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="comment">// Set the connectivity</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = (*iterator);</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <span class="keywordtype">int</span> nCellVertices = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>();</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    std::unique_ptr&lt;long[]&gt; cellConnect = std::unique_ptr&lt;long[]&gt;(<span class="keyword">new</span> <span class="keywordtype">long</span>[nCellVertices]);</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    std::copy(connect.data(), connect.data() + nCellVertices, cellConnect.get());</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;    cell.<a class="code" href="classbitpit_1_1Element.xhtml#adef671037ca88ed95c297e74d911f4c4">setConnect</a>(std::move(cellConnect));</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;}</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;</div>
<div class="line"><a name="l01376"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a621d4750d78d97fb104d69a3e51ec987"> 1376</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">PatchKernel::addCell</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;source, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;{</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;    }</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = createCell(source.<a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>(), source.<a class="code" href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">isInterior</a>(), id);</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = (*iterator);</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;    <span class="keywordtype">id</span> = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>();</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    cell = source;</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    cell.<a class="code" href="classbitpit_1_1Element.xhtml#a2c9f47001976ae86bc79707fe15fd7ce">setId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;}</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;</div>
<div class="line"><a name="l01399"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a825d1c1cf6a679a36c317e131e53fe9c"> 1399</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">PatchKernel::addCell</a>(<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;&amp;source, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;{</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    }</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="keywordtype">id</span> = source.getId();</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    }</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = createCell(source.getType(), source.isInterior(), id);</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = (*iterator);</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <span class="keywordtype">id</span> = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>();</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;    cell = std::move(source);</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    cell.setId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;}</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;</div>
<div class="line"><a name="l01426"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a67d8ab97043866d9acf98923a9aebe15"> 1426</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a67d8ab97043866d9acf98923a9aebe15">PatchKernel::deleteCell</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> updateNeighs, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;{</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    }</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;    <span class="comment">// Update neighbours</span></div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    <span class="keywordflow">if</span> (updateNeighs) {</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_cells[id];</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;        <span class="keywordtype">int</span> nCellFaces = m_cells[id].getFaceCount();</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;            <span class="comment">// Update adjacency of the neighbours</span></div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;            <span class="keywordtype">int</span> nFaceAdjacencies = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(i);</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nFaceAdjacencies; ++k) {</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;                <span class="keywordtype">long</span> neighId = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(i,k);</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;                <span class="keywordflow">if</span> (neighId &gt;= 0) {</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;                    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;neigh = m_cells[neighId];</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;                    <span class="keywordtype">int</span> neighFace, adjacencyId;</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;                    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a56a95140e35ba70293d910837e63849d">findFaceNeighCell</a>(neighId, <span class="keywordtype">id</span>, neighFace, adjacencyId);</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                    <span class="keywordflow">if</span> (neighFace &gt;= 0) {</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                        neigh.<a class="code" href="classbitpit_1_1Cell.xhtml#a8b3bf978bde8640c4da2f25bd5d537e4">deleteAdjacency</a>(neighFace, adjacencyId);</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                    }</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                }</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;            } <span class="comment">//next k</span></div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;            <span class="comment">// Update interface</span></div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;            <span class="keywordtype">int</span> nFaceInterfaces = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>(i);</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nFaceInterfaces; ++k) {</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;                <span class="keywordtype">long</span> interfaceId = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(i,k);</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;                <span class="keywordflow">if</span> (interfaceId &gt;= 0) {</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;                    <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= m_interfaces[interfaceId];</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;                    <span class="keywordflow">if</span> (interface.getOwner() == id) {</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;                            interface.unsetOwner();</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;                    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;                            interface.unsetNeigh();</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;                    }</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;                }</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;            } <span class="comment">//next k</span></div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;        }</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    }</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    <span class="comment">// Delete cell</span></div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keywordtype">bool</span> isInternal = m_cells.at(<span class="keywordtype">id</span>).isInterior();</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    m_cells.erase(<span class="keywordtype">id</span>, delayed);</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    m_cellIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#ae8b6a5913402478d4b5c59d28cc97184">trashId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="keywordflow">if</span> (isInternal) {</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        m_nInternals--;</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        <span class="keywordflow">if</span> (m_nInternals == 0) {</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;            m_lastInternalId = Element::NULL_ID;</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="keywordtype">id</span> == m_lastInternalId) {</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;            m_lastInternalId = m_cells.getSizeMarker(m_nInternals - 1, Element::NULL_ID);</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        }</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;        m_nGhosts--;</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> == m_firstGhostId) {</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;            <span class="keywordflow">if</span> (m_nGhosts == 0) {</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;                m_firstGhostId = Element::NULL_ID;</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_nInternals == 0) {</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;                m_firstGhostId = m_cells.getSizeMarker(m_nInternals, Element::NULL_ID);</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;                <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> first_ghost_iterator = ++m_cells.getIterator(m_lastInternalId);</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;                m_firstGhostId = first_ghost_iterator-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;            }</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;        }</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;    }</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    <span class="comment">// If there are no more cells reset them</span></div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;    <span class="keywordflow">if</span> (m_cells.size() == 0) {</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af94247665b7beb507a303148a514ed0b">resetCells</a>();</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;    }</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;}</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;</div>
<div class="line"><a name="l01509"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a2fb2344cb9c6a51a36605f067652c620"> 1509</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2fb2344cb9c6a51a36605f067652c620">PatchKernel::deleteCells</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;ids, <span class="keywordtype">bool</span> updateNeighs, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;{</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    }</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    std::vector&lt;long&gt;::const_iterator end = ids.cend();</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keywordflow">for</span> (std::vector&lt;long&gt;::const_iterator i = ids.cbegin(); i != end; ++i) {</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a67d8ab97043866d9acf98923a9aebe15">deleteCell</a>(*i, updateNeighs, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    }</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    <span class="keywordflow">if</span> (!delayed) {</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;        m_cells.flush();</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    }</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;}</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;</div>
<div class="line"><a name="l01533"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aadb08afb43e5e05056985084551f8f61"> 1533</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aadb08afb43e5e05056985084551f8f61">PatchKernel::setCellInternal</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> isInternal)</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;{</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    }</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    <span class="keywordflow">if</span> (m_cells[<span class="keywordtype">id</span>].isInterior() == isInternal) {</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (isInternal) {</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6ff6ae6c0524e095368df721b89fcca0">moveGhost2Internal</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a09f05bd39b2c35bb1afc2f193719144c">moveInternal2Ghost</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    }</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;}</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div>
<div class="line"><a name="l01555"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a09f05bd39b2c35bb1afc2f193719144c"> 1555</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a09f05bd39b2c35bb1afc2f193719144c">PatchKernel::moveInternal2Ghost</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;{</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;        <span class="keywordflow">return</span> m_cells.end();</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    }</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    <span class="comment">// Swap the element with the last internal cell</span></div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> != m_lastInternalId) {</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;        m_cells.swap(<span class="keywordtype">id</span>, m_lastInternalId);</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;    }</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    <span class="comment">// Get the iterator pointing to the updated position of the element</span></div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = m_cells.getIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    <span class="comment">// Update the interior flag</span></div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    iterator-&gt;setInterior(<span class="keyword">false</span>);</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;    <span class="comment">// Update cell counters</span></div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;    --m_nInternals;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    ++m_nGhosts;</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;    <span class="comment">// Update the last internal and first ghost markers</span></div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;    m_firstGhostId = id;</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;    <span class="keywordflow">if</span> (m_nInternals == 0) {</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;        m_lastInternalId = Element::NULL_ID;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;        m_lastInternalId = m_cells.getSizeMarker(m_nInternals - 1, Element::NULL_ID);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    }</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <span class="comment">// Return the iterator to the new position</span></div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;}</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;</div>
<div class="line"><a name="l01593"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a6ff6ae6c0524e095368df721b89fcca0"> 1593</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::CellIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6ff6ae6c0524e095368df721b89fcca0">PatchKernel::moveGhost2Internal</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;{</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;        <span class="keywordflow">return</span> m_cells.end();</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    }</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    <span class="comment">// Swap the cell with the first ghost</span></div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> != m_firstGhostId) {</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;        m_cells.swap(<span class="keywordtype">id</span>, m_firstGhostId);</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    }</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;    <span class="comment">// Get the iterator pointing to the updated position of the element</span></div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> iterator = m_cells.getIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;    <span class="comment">// Update the interior flag</span></div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;    iterator-&gt;setInterior(<span class="keyword">true</span>);</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;    <span class="comment">// Update cell counters</span></div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;    ++m_nInternals;</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    --m_nGhosts;</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    <span class="comment">// Update the last internal and first ghost markers</span></div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;    m_lastInternalId = id;</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    <span class="keywordflow">if</span> (m_nGhosts == 0) {</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;        m_firstGhostId = Element::NULL_ID;</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;        <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> firstGhostIterator = iterator;</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;        ++firstGhostIterator;</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;        m_firstGhostId = firstGhostIterator-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    }</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    <span class="comment">// Return the iterator to the new position</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;}</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;</div>
<div class="line"><a name="l01635"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a3b64649db5ab7ff05006db39933358e7"> 1635</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3b64649db5ab7ff05006db39933358e7">PatchKernel::countFreeCells</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;    <span class="keywordtype">double</span> nFreeCells = 0;</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;        <span class="keywordtype">int</span> nCellFaces = cell.getFaceCount();</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;            <span class="keywordflow">if</span> (cell.isFaceBorder(i)) {</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;                ++nFreeCells;</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;            }</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;        }</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    }</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <span class="keywordflow">return</span> nFreeCells;</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;}</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;</div>
<div class="line"><a name="l01659"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a15fb6ad8bef51c0e50feb13bc34f9c3c"> 1659</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a15fb6ad8bef51c0e50feb13bc34f9c3c">PatchKernel::countOrphanCells</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;    <span class="comment">// Compute vertex valence</span></div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;    std::unordered_map&lt;long, short&gt; vertexValence;</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nCellVertices; j++) {</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;            vertexValence[cell.getVertex(j)] += 1;</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;        }</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    }</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    <span class="comment">// Loop over cells</span></div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;    <span class="keywordtype">long</span> nOrphanCells = 0;</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;        <span class="keywordtype">long</span> isIsolated = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nCellVertices; j++) {</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;            <span class="keywordtype">long</span> vertexId = cell.getVertex(j);</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;            <span class="keywordflow">if</span> (vertexValence[vertexId] &gt; 1) {</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;                isIsolated = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;            }</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;        }</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;        <span class="keywordflow">if</span> (isIsolated) {</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;            ++nOrphanCells;</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;        }</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;        }</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;    <span class="keywordflow">return</span> nOrphanCells;</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;}</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;</div>
<div class="line"><a name="l01697"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af283d082cfa2a50064ccd44493539403"> 1697</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af283d082cfa2a50064ccd44493539403">PatchKernel::findCellNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f">findCellVertexNeighs</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;}</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;</div>
<div class="line"><a name="l01719"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a3e5ba285ee3fa831da4109f5744269f7"> 1719</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af283d082cfa2a50064ccd44493539403">PatchKernel::findCellNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">int</span> codimension, <span class="keywordtype">bool</span> complete)<span class="keyword"> const</span></div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;    assert(codimension &gt;= 1 &amp;&amp; codimension &lt;= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>());</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;    <span class="keywordflow">if</span> (codimension == 1) {</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (codimension == <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>()) {</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f">findCellVertexNeighs</a>(<span class="keywordtype">id</span>, complete);</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (codimension == 2) {</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a90dea5713f8fb884c0d08c78300818c4">findCellEdgeNeighs</a>(<span class="keywordtype">id</span>, complete);</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;long&gt;();</div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;    }</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;}</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;</div>
<div class="line"><a name="l01740"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f"> 1740</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">PatchKernel::findCellFaceNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;    <span class="comment">// Some patches can work (at least partially) without initializing the</span></div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;    <span class="comment">// cell list. To handle those patches, if there are no cells the face</span></div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;    <span class="comment">// count is evaluated using the ElementInfo associated to the cell.</span></div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;    <span class="keywordtype">int</span> nCellFaces;</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;    <span class="keywordflow">if</span> (m_cells.size() == 0) {</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;        <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a57c9e86bcf9367baafdbd5b4e425e675">getCellType</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml">ElementInfo</a> &amp;cellTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(cellType);</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;        nCellFaces = cellTypeInfo.nFaces;</div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;        nCellFaces = cell.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;    }</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;    <span class="comment">// Get the neighbours</span></div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;        std::vector&lt;long&gt; faceNeighs = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">_findCellFaceNeighs</a>(<span class="keywordtype">id</span>, i, std::vector&lt;long&gt;());</div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;neighId : faceNeighs) {</div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neighId, neighs);</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;        }</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;    }</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;}</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;</div>
<div class="line"><a name="l01774"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1edafd637d2693b4d26f9497e63f78e3"> 1774</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">PatchKernel::findCellFaceNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face)<span class="keyword"> const</span></div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">_findCellFaceNeighs</a>(<span class="keywordtype">id</span>, face, std::vector&lt;long&gt;());</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;}</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;</div>
<div class="line"><a name="l01787"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646"> 1787</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">PatchKernel::_findCellFaceNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; cell.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(face); ++i) {</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;        <span class="keywordtype">long</span> neighId = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(face, i);</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;        <span class="keywordflow">if</span> (neighId &lt; 0) {</div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;        }</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;        <span class="keywordflow">if</span> (std::find(blackList.begin(), blackList.end(), neighId) == blackList.end()) {</div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neighId, neighs);</div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;        }</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;    }</div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;</div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;}</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;</div>
<div class="line"><a name="l01816"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a90dea5713f8fb884c0d08c78300818c4"> 1816</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a90dea5713f8fb884c0d08c78300818c4">PatchKernel::findCellEdgeNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> complete)<span class="keyword"> const</span></div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;    assert(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>());</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;long&gt;();</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;    }</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;    <span class="comment">// Some patches can work (at least partially) without initializing the</span></div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;    <span class="comment">// cell list. To handle those patches, if there are no cells the edge</span></div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;    <span class="comment">// count is evaluated using the ElementInfo associated to the cell.</span></div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    <span class="keywordtype">int</span> nCellEdges;</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;    <span class="keywordflow">if</span> (m_cells.size() == 0) {</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;        <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a57c9e86bcf9367baafdbd5b4e425e675">getCellType</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml">ElementInfo</a> &amp;cellTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(cellType);</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;        nCellEdges = cellTypeInfo.nEdges;</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        nCellEdges = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a6d1f37fa9f5ef449e1a52c2e94ccb38e">getEdgeCount</a>();</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;    }</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;    <span class="comment">// Get the neighbours</span></div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;    std::vector&lt;long&gt; blackList;</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;    <span class="keywordflow">if</span> (!complete) {</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;        blackList = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;    }</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;</div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellEdges; ++i) {</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;neigh : <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aab8ba2ed4252554552276e8ebd772b05">_findCellEdgeNeighs</a>(<span class="keywordtype">id</span>, i, blackList)) {</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neigh, neighs);</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;        }</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;    }</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;}</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;</div>
<div class="line"><a name="l01861"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1f9f413c00492ae4b74a758f22104e25"> 1861</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a90dea5713f8fb884c0d08c78300818c4">PatchKernel::findCellEdgeNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;edge)<span class="keyword"> const</span></div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aab8ba2ed4252554552276e8ebd772b05">_findCellEdgeNeighs</a>(<span class="keywordtype">id</span>, edge, std::vector&lt;long&gt;());</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;}</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;</div>
<div class="line"><a name="l01876"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aab8ba2ed4252554552276e8ebd772b05"> 1876</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aab8ba2ed4252554552276e8ebd772b05">PatchKernel::_findCellEdgeNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;edge, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;    assert(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>());</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;        <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;    }</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;    std::vector&lt;int&gt; edgeVertices = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a4780b9dbd457df6ff0ec35d26a63cd54">getEdgeLocalConnect</a>(edge);</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;    std::size_t nEdgeVertices = edgeVertices.size();</div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;    <span class="keywordflow">if</span> (nEdgeVertices &lt; 2) {</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;        <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01889"></a><span class="lineno"> 1889</span>&#160;    }</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;</div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;    <span class="comment">// The neighbours of the edge are the cells that share all the edge vertices</span></div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;    std::vector&lt;long&gt; firstVertexNeighs = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28">_findCellVertexNeighs</a>(<span class="keywordtype">id</span>, edgeVertices[0], blackList);</div>
<div class="line"><a name="l01893"></a><span class="lineno"> 1893</span>&#160;    <span class="keywordflow">for</span> (std::size_t k = 1; k &lt; nEdgeVertices; ++k) {</div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;        std::vector&lt;long&gt; vertexNeighs = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28">_findCellVertexNeighs</a>(<span class="keywordtype">id</span>, edgeVertices[k], blackList);</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;neighId : vertexNeighs) {</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;            <span class="keywordflow">if</span> (utils::findInOrderedVector&lt;long&gt;(neighId, firstVertexNeighs) != firstVertexNeighs.end()) {</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;                <span class="keywordflow">if</span> (std::find(blackList.begin(), blackList.end(), neighId) == blackList.end()) {</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;                    utils::addToOrderedVector&lt;long&gt;(neighId, neighs);</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;                }</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;            }</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;        }</div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    }</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;</div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;}</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;</div>
<div class="line"><a name="l01916"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f"> 1916</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f">PatchKernel::findCellVertexNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> complete)<span class="keyword"> const</span></div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="comment">// Some patches can work (at least partially) without initializing the</span></div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    <span class="comment">// cell list. To handle those patches, if there are no cells the vertex</span></div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;    <span class="comment">// count is evaluated using the ElementInfo associated to the cell.</span></div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;    <span class="keywordtype">int</span> nCellVertices;</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;    <span class="keywordflow">if</span> (m_cells.size() == 0) {</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;        <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a57c9e86bcf9367baafdbd5b4e425e675">getCellType</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml">ElementInfo</a> &amp;cellTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(cellType);</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;        nCellVertices = cellTypeInfo.nVertices;</div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;        nCellVertices = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>();</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;    }</div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;    <span class="comment">// Get the neighbours</span></div>
<div class="line"><a name="l01932"></a><span class="lineno"> 1932</span>&#160;    std::vector&lt;long&gt; blackList;</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;    <span class="keywordflow">if</span> (!complete) {</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;            blackList = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a90dea5713f8fb884c0d08c78300818c4">findCellEdgeNeighs</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;            blackList = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">findCellFaceNeighs</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;        }</div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;    }</div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;</div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellVertices; ++i) {</div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;neigh : <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28">_findCellVertexNeighs</a>(<span class="keywordtype">id</span>, i, blackList)) {</div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neigh, neighs);</div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;        }</div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;    }</div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;}</div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;</div>
<div class="line"><a name="l01958"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1592792c20f2cf7780da6a148f8bca00"> 1958</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f">PatchKernel::findCellVertexNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;vertex)<span class="keyword"> const</span></div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28">_findCellVertexNeighs</a>(<span class="keywordtype">id</span>, vertex, std::vector&lt;long&gt;());</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;}</div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;</div>
<div class="line"><a name="l01985"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28"> 1985</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28">PatchKernel::_findCellVertexNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;vertex, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;    <span class="keywordtype">long</span> vertexId = cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(vertex);</div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;</div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    std::unordered_set&lt;long&gt; scanQueue;</div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    std::unordered_set&lt;long&gt; alreadyScan;</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;    scanQueue.insert(cell.<a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>());</div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    <span class="keywordflow">while</span> (!scanQueue.empty()) {</div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;        <span class="comment">// Pop a cell to process</span></div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;        <span class="keywordtype">long</span> scanId = *(scanQueue.begin());</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;scanCell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(scanId);</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;</div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;        scanQueue.erase(scanId);</div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;        alreadyScan.insert(scanId);</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;</div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;        <span class="comment">// Info on the cell</span></div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;        <span class="keyword">const</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml">ElementInfo</a> &amp;cellTypeInfo = scanCell.<a class="code" href="classbitpit_1_1Element.xhtml#acd875d8ac29b6d292b99d1779041176f">getInfo</a>();</div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;        <span class="keyword">const</span> std::vector&lt;std::vector&lt;int&gt;&gt; &amp;cellLocalFaceConnect = cellTypeInfo.faceConnect;</div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">long</span> *scanCellConnect = scanCell.<a class="code" href="classbitpit_1_1Element.xhtml#ad03999c3d3b66840cb72ea6f65901722">getConnect</a>();</div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;</div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;        <span class="comment">// Find the faces that share the vertex</span></div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;        std::vector&lt;long&gt; faceList;</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; scanCell.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>(); ++i) {</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;            <span class="comment">// Info on the face</span></div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;            <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> faceType = scanCell.<a class="code" href="classbitpit_1_1Element.xhtml#ae8ed2f8193fced9e84cd379e8b0934de">getFaceType</a>(i);</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;            <span class="keyword">const</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml">ElementInfo</a> &amp;faceTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(faceType);</div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;            <span class="keyword">const</span> std::vector&lt;int&gt; &amp;faceLocalConnect = cellLocalFaceConnect[i];</div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;</div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;            <span class="comment">// Check if the face shares the vertex</span></div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; faceTypeInfo.nVertices; ++k) {</div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;                <span class="keywordtype">long</span> faceVertexId = scanCellConnect[faceLocalConnect[k]];</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;                <span class="keywordflow">if</span> (faceVertexId == vertexId) {</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;                    faceList.push_back(i);</div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;                }</div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;            }</div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;        }</div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;</div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;        <span class="comment">// If there are no faces that share the vertices go to the next cell</span></div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;        <span class="keywordflow">if</span> (faceList.empty()) {</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;        }</div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;</div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;        <span class="comment">// Add the current cell to the neighoburs</span></div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;        <span class="keywordflow">if</span> (scanId != <span class="keywordtype">id</span> &amp;&amp; std::find(blackList.begin(), blackList.end(), scanId) == blackList.end()) {</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;            utils::addToOrderedVector&lt;long&gt;(scanId, neighs);</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;        }</div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;</div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;        <span class="comment">// Add the neighbours of the faces to the scan list</span></div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;face : faceList) {</div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;            <span class="keywordtype">int</span> nFaceNeighs = scanCell.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(face);</div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nFaceNeighs; ++k) {</div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;                <span class="keywordtype">long</span> neighId = scanCell.<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(face, k);</div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;                <span class="keywordflow">if</span> (neighId &gt;= 0 &amp;&amp; alreadyScan.count(neighId) == 0) {</div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;                    scanQueue.insert(neighId);</div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;                }</div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;            }</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;        }</div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;    }</div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;</div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;}</div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;</div>
<div class="line"><a name="l02057"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a237a1ebd36c7c5f92b88498e4b96aa2a"> 2057</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a237a1ebd36c7c5f92b88498e4b96aa2a">PatchKernel::findCellVertexOneRing</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;vertex)<span class="keyword"> const</span></div>
<div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;    std::vector&lt;long&gt; oneRing = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f">findCellVertexNeighs</a>(<span class="keywordtype">id</span>, vertex);</div>
<div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;    utils::addToOrderedVector&lt;long&gt;(id, oneRing);</div>
<div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;</div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;    <span class="keywordflow">return</span> oneRing;</div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;}</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;</div>
<div class="line"><a name="l02080"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a56a95140e35ba70293d910837e63849d"> 2080</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a56a95140e35ba70293d910837e63849d">PatchKernel::findFaceNeighCell</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;cell_idx, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;neigh_idx, <span class="keywordtype">int</span> &amp;face_loc_idx, <span class="keywordtype">int</span> &amp;intf_loc_idx)</div>
<div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;{</div>
<div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;    <span class="keywordtype">bool</span>                        loop_continue = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;    <span class="keywordtype">int</span>                         n_faces, n_adj;</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;    <span class="keywordtype">int</span>                         j, k;</div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a>                       &amp;cell_ = m_cells[cell_idx];</div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;</div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;    <span class="comment">// LOOP OVER ADJACENCIES                                                  //</span></div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;    n_faces = cell_.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;    j = 0;</div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;    <span class="keywordflow">while</span> ( loop_continue &amp;&amp; (j &lt; n_faces) ) {</div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;        n_adj = cell_.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(j);</div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;        k = 0;</div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;        <span class="keywordflow">while</span> ( loop_continue &amp;&amp; (k &lt; n_adj) ) {</div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;            loop_continue = ( cell_.<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>( j, k ) != neigh_idx );</div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;            ++k;</div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;        } <span class="comment">//next k</span></div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;        ++j;</div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;    } <span class="comment">//next j</span></div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;</div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;    <span class="keywordflow">if</span> ( loop_continue) { face_loc_idx = intf_loc_idx = -1; }</div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;    <span class="keywordflow">else</span>                { face_loc_idx = --j; intf_loc_idx = --k; }</div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;</div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;}</div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;</div>
<div class="line"><a name="l02116"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab11021d0a2272ebc31a78484dbe97762"> 2116</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab11021d0a2272ebc31a78484dbe97762">PatchKernel::getInterfaceCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;    <span class="keywordflow">return</span> m_interfaces.size();</div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;}</div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;</div>
<div class="line"><a name="l02126"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#adf4d225aea41f83c02f6a5860c2c48a9"> 2126</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Interface&gt;</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#adf4d225aea41f83c02f6a5860c2c48a9">PatchKernel::getInterfaces</a>()</div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;{</div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;    <span class="keywordflow">return</span> m_interfaces;</div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;}</div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;</div>
<div class="line"><a name="l02137"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ac52e8a82183a83aaff80e06a636d4e43"> 2137</a></span>&#160;<a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac52e8a82183a83aaff80e06a636d4e43">PatchKernel::getInterface</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;{</div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;    <span class="keywordflow">return</span> m_interfaces[id];</div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;}</div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;</div>
<div class="line"><a name="l02148"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a83e6d954052738fd2e4cdb27480cf280"> 2148</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac52e8a82183a83aaff80e06a636d4e43">PatchKernel::getInterface</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;    <span class="keywordflow">return</span> m_interfaces[id];</div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;}</div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;</div>
<div class="line"><a name="l02159"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9f0cfabaa79f3af75b85eeba1bb4cffd"> 2159</a></span>&#160;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f0cfabaa79f3af75b85eeba1bb4cffd">PatchKernel::getInterfaceType</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;    <span class="keywordflow">return</span> m_interfaces[id].getType();</div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;}</div>
<div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;</div>
<div class="line"><a name="l02169"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a71be4c5d6d1ce3a44f261c8211372b0d"> 2169</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a71be4c5d6d1ce3a44f261c8211372b0d">PatchKernel::getInterfaceIterator</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;{</div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;    <span class="keywordflow">return</span> m_interfaces.getIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;}</div>
<div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;</div>
<div class="line"><a name="l02179"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a16663957ccb84a697cfee3d6c6dba132"> 2179</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a16663957ccb84a697cfee3d6c6dba132">PatchKernel::interfaceBegin</a>()</div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;{</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;    <span class="keywordflow">return</span> m_interfaces.begin();</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;}</div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;</div>
<div class="line"><a name="l02189"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0"> 2189</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0">PatchKernel::interfaceEnd</a>()</div>
<div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;{</div>
<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;    <span class="keywordflow">return</span> m_interfaces.end();</div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;}</div>
<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;</div>
<div class="line"><a name="l02199"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9a8cc445dcef8ca7c9993fd16b7c703a"> 2199</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a8cc445dcef8ca7c9993fd16b7c703a">PatchKernel::generateInterfaceId</a>()</div>
<div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;{</div>
<div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;        <span class="keywordflow">return</span> Element::NULL_ID;</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;    }</div>
<div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;</div>
<div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;    <span class="keywordflow">return</span> m_interfaceIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#a1dbb5aa5dd858ea4acea4815d186a16f">generateId</a>();</div>
<div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;}</div>
<div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;</div>
<div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> PatchKernel::createInterface(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;{</div>
<div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;        <span class="keywordtype">id</span> = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a8cc445dcef8ca7c9993fd16b7c703a">generateInterfaceId</a>();</div>
<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;    }</div>
<div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;</div>
<div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;    <span class="keyword">const</span> ElementInfo &amp;cellTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(type);</div>
<div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;    <span class="keywordflow">if</span> (cellTypeInfo.dimension &gt; (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() - 1)) {</div>
<div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0">interfaceEnd</a>();</div>
<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;    }</div>
<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;</div>
<div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;    PiercedVector&lt;Interface&gt;::iterator iterator = m_interfaces.reclaim(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;    iterator-&gt;setId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;</div>
<div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;}</div>
<div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;</div>
<div class="line"><a name="l02240"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0"> 2240</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">PatchKernel::addInterface</a>(<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> type, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;{</div>
<div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0">interfaceEnd</a>();</div>
<div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;    }</div>
<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;</div>
<div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">InterfaceIterator</a> iterator = createInterface(type, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;    <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= (*iterator);</div>
<div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;    interface.<a class="code" href="classbitpit_1_1Element.xhtml#acf15fb27c03597b6d1708343e92b4a28">initialize</a>(type);</div>
<div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;</div>
<div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;}</div>
<div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;</div>
<div class="line"><a name="l02261"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a23ec5604cd3fdd0eaa8a65c6628e01b8"> 2261</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">PatchKernel::addInterface</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;source, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;{</div>
<div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0">interfaceEnd</a>();</div>
<div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;    }</div>
<div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;</div>
<div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">InterfaceIterator</a> iterator = createInterface(source.<a class="code" href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">getType</a>(), id);</div>
<div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;    <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= (*iterator);</div>
<div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;    <span class="keywordtype">id</span> = interface.<a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>();</div>
<div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;    <span class="keyword">interface </span>= source;</div>
<div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;    interface.<a class="code" href="classbitpit_1_1Element.xhtml#a2c9f47001976ae86bc79707fe15fd7ce">setId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;</div>
<div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;}</div>
<div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;</div>
<div class="line"><a name="l02284"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ad0cd57ef77f12e2fea8f284b8219f643"> 2284</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PatchKernel::InterfaceIterator</a> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">PatchKernel::addInterface</a>(<a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;&amp;source, <span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;{</div>
<div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0">interfaceEnd</a>();</div>
<div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;    }</div>
<div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;</div>
<div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;        <span class="keywordtype">id</span> = source.getId();</div>
<div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;    }</div>
<div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;</div>
<div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">InterfaceIterator</a> iterator = createInterface(source.getType(), id);</div>
<div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;    <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= (*iterator);</div>
<div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;    <span class="keywordtype">id</span> = interface.<a class="code" href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">getId</a>();</div>
<div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;    <span class="keyword">interface </span>= std::move(source);</div>
<div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;    interface.setId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;</div>
<div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;    <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;}</div>
<div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;</div>
<div class="line"><a name="l02311"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a8d2ddea450eb53fb4c1d19695836f1f8"> 2311</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8d2ddea450eb53fb4c1d19695836f1f8">PatchKernel::deleteInterface</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> updateNeighs, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;{</div>
<div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;    }</div>
<div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;</div>
<div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;    <span class="comment">// Update neighbours</span></div>
<div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;    <span class="keywordflow">if</span> (updateNeighs) {</div>
<div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;        <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= m_interfaces[id];</div>
<div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;</div>
<div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;        <span class="comment">// Update owner</span></div>
<div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;        <span class="keywordtype">long</span> ownerId = interface.getOwner();</div>
<div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;        <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;owner = m_cells[ownerId];</div>
<div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;        <span class="keywordtype">int</span> ownerFace = interface.getOwnerFace();</div>
<div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;</div>
<div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;        <span class="keywordtype">int</span> ownerInterfaceId = 0;</div>
<div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;        <span class="keywordflow">while</span> (owner.<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(ownerFace, ownerInterfaceId) != id) {</div>
<div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;            ++ownerInterfaceId;</div>
<div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;        }</div>
<div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;        owner.<a class="code" href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">deleteInterface</a>(ownerFace, ownerInterfaceId);</div>
<div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;</div>
<div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;        <span class="comment">// Update neighbour</span></div>
<div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;        <span class="keywordtype">long</span> neighId = interface.getNeigh();</div>
<div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;        <span class="keywordflow">if</span> (neighId &gt;= 0) {</div>
<div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;            <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;neigh = m_cells[neighId];</div>
<div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;            <span class="keywordtype">int</span> neighFace = interface.getNeighFace();</div>
<div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;</div>
<div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;            <span class="keywordtype">int</span> neighInterfaceId = 0;</div>
<div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;            <span class="keywordflow">while</span> (neigh.<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(neighFace, neighInterfaceId) != id) {</div>
<div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;                ++neighInterfaceId;</div>
<div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;            }</div>
<div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;            neigh.<a class="code" href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">deleteInterface</a>(neighFace, neighInterfaceId);</div>
<div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;        }</div>
<div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;    }</div>
<div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;</div>
<div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;    <span class="comment">// Delete interface</span></div>
<div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;    m_interfaces.erase(<span class="keywordtype">id</span>, delayed);</div>
<div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;    m_interfaceIdGenerator.<a class="code" href="classbitpit_1_1IndexGenerator.xhtml#ae8b6a5913402478d4b5c59d28cc97184">trashId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;</div>
<div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;    <span class="comment">// If there are no more interfaces reset them</span></div>
<div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;    <span class="keywordflow">if</span> (m_interfaces.size() == 0) {</div>
<div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">resetInterfaces</a>();</div>
<div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;    }</div>
<div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;</div>
<div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;}</div>
<div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;</div>
<div class="line"><a name="l02366"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#afcc1b2472ed8b5dcfb631475b091c07e"> 2366</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afcc1b2472ed8b5dcfb631475b091c07e">PatchKernel::deleteInterfaces</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;ids, <span class="keywordtype">bool</span> updateNeighs, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;{</div>
<div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;    }</div>
<div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;</div>
<div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;    std::vector&lt;long&gt;::const_iterator end = ids.cend();</div>
<div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;    <span class="keywordflow">for</span> (std::vector&lt;long&gt;::const_iterator i = ids.cbegin(); i != end; ++i) {</div>
<div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8d2ddea450eb53fb4c1d19695836f1f8">deleteInterface</a>(*i, updateNeighs, <span class="keyword">true</span>);</div>
<div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;    }</div>
<div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;</div>
<div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;    <span class="keywordflow">if</span> (!delayed) {</div>
<div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;        m_cells.flush();</div>
<div class="line"><a name="l02379"></a><span class="lineno"> 2379</span>&#160;    }</div>
<div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;</div>
<div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;}</div>
<div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;</div>
<div class="line"><a name="l02391"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ae25823f089b13969c12bc13632e740b5"> 2391</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae25823f089b13969c12bc13632e740b5">PatchKernel::countFreeInterfaces</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;    <span class="keywordtype">long</span> nFreeInterfaces = 0;</div>
<div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;interface : m_interfaces) {</div>
<div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;        <span class="keywordflow">if</span> (interface.getNeigh() &lt; 0) {</div>
<div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;            ++nFreeInterfaces;</div>
<div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;        }</div>
<div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;        }</div>
<div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;</div>
<div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;    <span class="keywordflow">return</span> nFreeInterfaces;</div>
<div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;}</div>
<div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;</div>
<div class="line"><a name="l02410"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a899db6a2ab62fc2102386bb52b0dc49d"> 2410</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a899db6a2ab62fc2102386bb52b0dc49d">PatchKernel::countOrphanInterfaces</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;    <span class="keywordtype">long</span> nOrphanInterfaces = 0;</div>
<div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;interface : m_interfaces) {</div>
<div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;        <span class="keywordflow">if</span> (interface.getOwner() &lt; 0 &amp;&amp; interface.getNeigh() &lt; 0) {</div>
<div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;            ++nOrphanInterfaces;</div>
<div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;        }</div>
<div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;        }</div>
<div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;</div>
<div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;    <span class="keywordflow">return</span> nOrphanInterfaces;</div>
<div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;}</div>
<div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;</div>
<div class="line"><a name="l02427"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a4a727482a16bcd0a45800bc96f02be25"> 2427</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4a727482a16bcd0a45800bc96f02be25">PatchKernel::countFaces</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;    <span class="keywordtype">double</span> nFaces = 0;</div>
<div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;        <span class="keywordtype">int</span> nCellFaces = cell.getFaceCount();</div>
<div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;            <span class="keywordflow">if</span> (!cell.isFaceBorder(i)) {</div>
<div class="line"><a name="l02434"></a><span class="lineno"> 2434</span>&#160;                nFaces += 1. / (cell.getAdjacencyCount(i) + 1);</div>
<div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;                nFaces += 1.;</div>
<div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;            }</div>
<div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;        }</div>
<div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;    }</div>
<div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;</div>
<div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;    <span class="keywordflow">return</span> ((<span class="keywordtype">long</span>) round(nFaces));</div>
<div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;}</div>
<div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;</div>
<div class="line"><a name="l02451"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a73f20bde12f1178ae67ba0b73e055583"> 2451</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a73f20bde12f1178ae67ba0b73e055583">PatchKernel::countFreeFaces</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;    <span class="keywordtype">double</span> nFreeFaces = 0;</div>
<div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;        <span class="keywordtype">int</span> nCellFaces = cell.getFaceCount();</div>
<div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;            <span class="keywordflow">if</span> (cell.isFaceBorder(i)) {</div>
<div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;                ++nFreeFaces;</div>
<div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;            }</div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;        }</div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;    }</div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;</div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;    <span class="keywordflow">return</span> nFreeFaces;</div>
<div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;}</div>
<div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;</div>
<div class="line"><a name="l02469"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ad50f29b65ceaca72615cc41864ee9d43"> 2469</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad50f29b65ceaca72615cc41864ee9d43">PatchKernel::sortVertices</a>()</div>
<div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;{</div>
<div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;    }</div>
<div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;</div>
<div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;    m_vertices.sort();</div>
<div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;</div>
<div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;}</div>
<div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;</div>
<div class="line"><a name="l02483"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aee1708585bb5ba3bb51cd9603a6d4792"> 2483</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aee1708585bb5ba3bb51cd9603a6d4792">PatchKernel::sortCells</a>()</div>
<div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;{</div>
<div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;    }</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;</div>
<div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;    m_cells.sort();</div>
<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;</div>
<div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;}</div>
<div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;</div>
<div class="line"><a name="l02497"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a720b7a1720f7e8fa1b95d04b4bc9c9d9"> 2497</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a720b7a1720f7e8fa1b95d04b4bc9c9d9">PatchKernel::sortInterfaces</a>()</div>
<div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;{</div>
<div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;    }</div>
<div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;</div>
<div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;    m_interfaces.sort();</div>
<div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;</div>
<div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;}</div>
<div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;</div>
<div class="line"><a name="l02512"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af7c24df4698b377686cefc6b82be72e7"> 2512</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af7c24df4698b377686cefc6b82be72e7">PatchKernel::sort</a>()</div>
<div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;{</div>
<div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;    <span class="keywordtype">bool</span> status = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad50f29b65ceaca72615cc41864ee9d43">sortVertices</a>();</div>
<div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;    status |= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aee1708585bb5ba3bb51cd9603a6d4792">sortCells</a>();</div>
<div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;    status |= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a720b7a1720f7e8fa1b95d04b4bc9c9d9">sortInterfaces</a>();</div>
<div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;</div>
<div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;    <span class="keywordflow">return</span> status;</div>
<div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;}</div>
<div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;</div>
<div class="line"><a name="l02528"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab4149b21cfa6ffac893a648202e574e9"> 2528</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab4149b21cfa6ffac893a648202e574e9">PatchKernel::squeezeVertices</a>()</div>
<div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;{</div>
<div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;    }</div>
<div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;</div>
<div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;    m_vertices.squeeze();</div>
<div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;</div>
<div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;}</div>
<div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;</div>
<div class="line"><a name="l02546"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a436decff7071770170b5fd73be2608f0"> 2546</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a436decff7071770170b5fd73be2608f0">PatchKernel::squeezeCells</a>()</div>
<div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;{</div>
<div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;    }</div>
<div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;</div>
<div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;    m_cells.squeeze();</div>
<div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;</div>
<div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;}</div>
<div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;</div>
<div class="line"><a name="l02564"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ac2e364db3ad530203cf8fa322fb2c768"> 2564</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac2e364db3ad530203cf8fa322fb2c768">PatchKernel::squeezeInterfaces</a>()</div>
<div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;{</div>
<div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">isExpert</a>()) {</div>
<div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;    }</div>
<div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;</div>
<div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;    m_interfaces.squeeze();</div>
<div class="line"><a name="l02571"></a><span class="lineno"> 2571</span>&#160;</div>
<div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;}</div>
<div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;</div>
<div class="line"><a name="l02582"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aac4de5dd0284696d6d11e91a7aa02d97"> 2582</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aac4de5dd0284696d6d11e91a7aa02d97">PatchKernel::squeeze</a>()</div>
<div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;{</div>
<div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;    <span class="keywordtype">bool</span> status = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab4149b21cfa6ffac893a648202e574e9">squeezeVertices</a>();</div>
<div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;    status |= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a436decff7071770170b5fd73be2608f0">squeezeCells</a>();</div>
<div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;    status |= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac2e364db3ad530203cf8fa322fb2c768">squeezeInterfaces</a>();</div>
<div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;</div>
<div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;    <span class="keywordflow">return</span> status;</div>
<div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;}</div>
<div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;</div>
<div class="line"><a name="l02597"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb"> 2597</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">PatchKernel::evalCellCentroid</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;{</div>
<div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">getCell</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;</div>
<div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;    <span class="keywordflow">return</span> evalElementCentroid(cell);</div>
<div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;}</div>
<div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;</div>
<div class="line"><a name="l02610"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ada7af97e14dd51fdc6c71a9c6deb3b3d"> 2610</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ada7af97e14dd51fdc6c71a9c6deb3b3d">PatchKernel::evalInterfaceCentroid</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;{</div>
<div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;    <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= getInterface(id);</div>
<div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;</div>
<div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160;    <span class="keywordflow">return</span> evalElementCentroid(interface);</div>
<div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;}</div>
<div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;</div>
<div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;std::array&lt;double, 3&gt; PatchKernel::evalElementCentroid(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Element.xhtml">Element</a> &amp;element)</div>
<div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;{</div>
<div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span> *elementConnect = element.<a class="code" href="classbitpit_1_1Element.xhtml#ad03999c3d3b66840cb72ea6f65901722">getConnect</a>();</div>
<div class="line"><a name="l02629"></a><span class="lineno"> 2629</span>&#160;    <span class="keywordtype">int</span> nElementVertices = element.<a class="code" href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">getVertexCount</a>();</div>
<div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;</div>
<div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160;    std::array&lt;double, 3&gt; centroid = {{0., 0., 0.}};</div>
<div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nElementVertices; ++i) {</div>
<div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;        Vertex &amp;vertex = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">getVertex</a>(elementConnect[i]);</div>
<div class="line"><a name="l02634"></a><span class="lineno"> 2634</span>&#160;        centroid += vertex.getCoords();</div>
<div class="line"><a name="l02635"></a><span class="lineno"> 2635</span>&#160;    }</div>
<div class="line"><a name="l02636"></a><span class="lineno"> 2636</span>&#160;    centroid /= (double) nElementVertices;</div>
<div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;</div>
<div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;    <span class="keywordflow">return</span> centroid;</div>
<div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;}</div>
<div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;</div>
<div class="line"><a name="l02653"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf"> 2653</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">PatchKernel::locatePoint</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;y, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;z)</div>
<div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;{</div>
<div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">locatePoint</a>({{x, y, z}});</div>
<div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;}</div>
<div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;</div>
<div class="line"><a name="l02669"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#abb9bab18d7c154892b8b0c145e6b96eb"> 2669</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#abb9bab18d7c154892b8b0c145e6b96eb">PatchKernel::isSameFace</a>(</div>
<div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>                  &amp;cell_1,</div>
<div class="line"><a name="l02671"></a><span class="lineno"> 2671</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                   &amp;i,</div>
<div class="line"><a name="l02672"></a><span class="lineno"> 2672</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">long</span>                  &amp;cell_2,</div>
<div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span>                   &amp;j</div>
<div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;) {</div>
<div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;</div>
<div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                      //</span></div>
<div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;</div>
<div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;<span class="comment">// Local variables</span></div>
<div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;<span class="keywordtype">bool</span>                            check = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;std::vector&lt;int&gt;                face_loc_connect_A, face_loc_connect_B;</div>
<div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a>                            *cell_1_ = &amp;m_cells[cell_1], *cell_2_ = &amp;m_cells[cell_2];</div>
<div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;</div>
<div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;<span class="keywordtype">size_t</span>                          k;</div>
<div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;</div>
<div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;<span class="comment">// CHECK FOR COINCIDENT FACES                                                 //</span></div>
<div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;<span class="comment">// ========================================================================== //</span></div>
<div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;face_loc_connect_A = cell_1_-&gt;<a class="code" href="classbitpit_1_1Element.xhtml#a73d45283655d18a2a0ca10545883b2e2">getFaceLocalConnect</a>(i);</div>
<div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;face_loc_connect_B = cell_2_-&gt;getFaceLocalConnect(j);</div>
<div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;<span class="keywordflow">if</span> (face_loc_connect_A.size() == face_loc_connect_B.size()) {</div>
<div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;    <span class="keywordflow">for</span> (k = 0; k &lt; face_loc_connect_A.size(); ++k) {</div>
<div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;        face_loc_connect_A[k] = cell_1_-&gt;<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(face_loc_connect_A[k]);</div>
<div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;    } <span class="comment">//next i</span></div>
<div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;    <span class="keywordflow">for</span> (k = 0; k &lt; face_loc_connect_B.size(); ++k) {</div>
<div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;        face_loc_connect_B[k] = cell_2_-&gt;getVertex(face_loc_connect_B[k]);</div>
<div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;    } <span class="comment">//next i</span></div>
<div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;    std::sort(face_loc_connect_A.begin(), face_loc_connect_A.end());</div>
<div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;    std::sort(face_loc_connect_B.begin(), face_loc_connect_B.end());</div>
<div class="line"><a name="l02702"></a><span class="lineno"> 2702</span>&#160;    check = (face_loc_connect_A == face_loc_connect_B);</div>
<div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;}</div>
<div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160;</div>
<div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;<span class="keywordflow">return</span>(check);</div>
<div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;    </div>
<div class="line"><a name="l02707"></a><span class="lineno"> 2707</span>&#160;};</div>
<div class="line"><a name="l02708"></a><span class="lineno"> 2708</span>&#160;</div>
<div class="line"><a name="l02715"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a0732408c076655779356e283b1913a47"> 2715</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a0732408c076655779356e283b1913a47">PatchKernel::buildAdjacencies</a>(<span class="keywordtype">bool</span> resetAdjacencies)</div>
<div class="line"><a name="l02716"></a><span class="lineno"> 2716</span>&#160;{</div>
<div class="line"><a name="l02717"></a><span class="lineno"> 2717</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab1faa2bb8bf968d425d3cd30260b4d66">updateAdjacencies</a>(m_cells.getIds(<span class="keyword">false</span>), resetAdjacencies);</div>
<div class="line"><a name="l02718"></a><span class="lineno"> 2718</span>&#160;}</div>
<div class="line"><a name="l02719"></a><span class="lineno"> 2719</span>&#160;</div>
<div class="line"><a name="l02730"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab1faa2bb8bf968d425d3cd30260b4d66"> 2730</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ab1faa2bb8bf968d425d3cd30260b4d66">PatchKernel::updateAdjacencies</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;cellIds, <span class="keywordtype">bool</span> resetAdjacencies)</div>
<div class="line"><a name="l02731"></a><span class="lineno"> 2731</span>&#160;{</div>
<div class="line"><a name="l02732"></a><span class="lineno"> 2732</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02733"></a><span class="lineno"> 2733</span>&#160;    <span class="comment">// Reset adjacency info</span></div>
<div class="line"><a name="l02734"></a><span class="lineno"> 2734</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02735"></a><span class="lineno"> 2735</span>&#160;    <span class="keywordflow">if</span> (resetAdjacencies) {</div>
<div class="line"><a name="l02736"></a><span class="lineno"> 2736</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : cellIds) {</div>
<div class="line"><a name="l02737"></a><span class="lineno"> 2737</span>&#160;            m_cells[cellId].resetAdjacencies();</div>
<div class="line"><a name="l02738"></a><span class="lineno"> 2738</span>&#160;        }</div>
<div class="line"><a name="l02739"></a><span class="lineno"> 2739</span>&#160;    }</div>
<div class="line"><a name="l02740"></a><span class="lineno"> 2740</span>&#160;</div>
<div class="line"><a name="l02741"></a><span class="lineno"> 2741</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02742"></a><span class="lineno"> 2742</span>&#160;    <span class="comment">// Build vertex-&gt;cell connectivity</span></div>
<div class="line"><a name="l02743"></a><span class="lineno"> 2743</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02744"></a><span class="lineno"> 2744</span>&#160;    std::unordered_map&lt;long, std::vector&lt;long&gt;&gt; vertexToCellsMap;</div>
<div class="line"><a name="l02745"></a><span class="lineno"> 2745</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l02746"></a><span class="lineno"> 2746</span>&#160;        <span class="keywordtype">long</span> cellId = cell.getId();</div>
<div class="line"><a name="l02747"></a><span class="lineno"> 2747</span>&#160;</div>
<div class="line"><a name="l02748"></a><span class="lineno"> 2748</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l02749"></a><span class="lineno"> 2749</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellVertices; ++k) {</div>
<div class="line"><a name="l02750"></a><span class="lineno"> 2750</span>&#160;            <span class="keywordtype">long</span> vertexId = cell.getVertex(k);</div>
<div class="line"><a name="l02751"></a><span class="lineno"> 2751</span>&#160;            vertexToCellsMap[vertexId].push_back(cellId);</div>
<div class="line"><a name="l02752"></a><span class="lineno"> 2752</span>&#160;        }</div>
<div class="line"><a name="l02753"></a><span class="lineno"> 2753</span>&#160;    }</div>
<div class="line"><a name="l02754"></a><span class="lineno"> 2754</span>&#160;</div>
<div class="line"><a name="l02755"></a><span class="lineno"> 2755</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02756"></a><span class="lineno"> 2756</span>&#160;    <span class="comment">// Update adjacencies</span></div>
<div class="line"><a name="l02757"></a><span class="lineno"> 2757</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02758"></a><span class="lineno"> 2758</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : cellIds) {</div>
<div class="line"><a name="l02759"></a><span class="lineno"> 2759</span>&#160;        <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_cells[cellId];</div>
<div class="line"><a name="l02760"></a><span class="lineno"> 2760</span>&#160;</div>
<div class="line"><a name="l02761"></a><span class="lineno"> 2761</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> nCellFaces = cell.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l02762"></a><span class="lineno"> 2762</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> face = 0; face &lt; nCellFaces; face++) {</div>
<div class="line"><a name="l02763"></a><span class="lineno"> 2763</span>&#160;            <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> faceType = cell.<a class="code" href="classbitpit_1_1Element.xhtml#ae8ed2f8193fced9e84cd379e8b0934de">getFaceType</a>(face);</div>
<div class="line"><a name="l02764"></a><span class="lineno"> 2764</span>&#160;            <span class="keywordtype">int</span> nFaceVertices = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(faceType).nVertices;</div>
<div class="line"><a name="l02765"></a><span class="lineno"> 2765</span>&#160;</div>
<div class="line"><a name="l02766"></a><span class="lineno"> 2766</span>&#160;            <span class="comment">// Build face connectivity</span></div>
<div class="line"><a name="l02767"></a><span class="lineno"> 2767</span>&#160;            std::vector&lt;long&gt; faceConnect;</div>
<div class="line"><a name="l02768"></a><span class="lineno"> 2768</span>&#160;            faceConnect.reserve(nFaceVertices);</div>
<div class="line"><a name="l02769"></a><span class="lineno"> 2769</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">int</span> localVertexId : cell.<a class="code" href="classbitpit_1_1Element.xhtml#a73d45283655d18a2a0ca10545883b2e2">getFaceLocalConnect</a>(face)) {</div>
<div class="line"><a name="l02770"></a><span class="lineno"> 2770</span>&#160;                faceConnect.push_back(cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(localVertexId));</div>
<div class="line"><a name="l02771"></a><span class="lineno"> 2771</span>&#160;            }</div>
<div class="line"><a name="l02772"></a><span class="lineno"> 2772</span>&#160;</div>
<div class="line"><a name="l02773"></a><span class="lineno"> 2773</span>&#160;            <span class="comment">// Build list of neighbour candidates</span></div>
<div class="line"><a name="l02774"></a><span class="lineno"> 2774</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l02775"></a><span class="lineno"> 2775</span>&#160;            <span class="comment">// Consider all the cells that shares the same vertices of the</span></div>
<div class="line"><a name="l02776"></a><span class="lineno"> 2776</span>&#160;            <span class="comment">// current face, but discard the cells that are already adjacencies</span></div>
<div class="line"><a name="l02777"></a><span class="lineno"> 2777</span>&#160;            <span class="comment">// for this face.</span></div>
<div class="line"><a name="l02778"></a><span class="lineno"> 2778</span>&#160;            <span class="keywordtype">long</span> firstVertexId = faceConnect[0];</div>
<div class="line"><a name="l02779"></a><span class="lineno"> 2779</span>&#160;            std::vector&lt;long&gt; candidates = vertexToCellsMap[firstVertexId];</div>
<div class="line"><a name="l02780"></a><span class="lineno"> 2780</span>&#160;            <a class="code" href="namespacebitpit_1_1utils.xhtml#af1decd85ef09fca51526234dd9093663">utils::eraseValue</a>(candidates, cellId);</div>
<div class="line"><a name="l02781"></a><span class="lineno"> 2781</span>&#160;</div>
<div class="line"><a name="l02782"></a><span class="lineno"> 2782</span>&#160;            <span class="keywordtype">int</span> j = 1;</div>
<div class="line"><a name="l02783"></a><span class="lineno"> 2783</span>&#160;            <span class="keywordflow">while</span> (candidates.size() &gt; 0 &amp;&amp; j &lt; nFaceVertices) {</div>
<div class="line"><a name="l02784"></a><span class="lineno"> 2784</span>&#160;                <span class="keywordtype">long</span> vertexId = faceConnect[j];</div>
<div class="line"><a name="l02785"></a><span class="lineno"> 2785</span>&#160;                candidates = <a class="code" href="namespacebitpit_1_1utils.xhtml#a32d0b7a8f7e2b6e8e6290085c3538c79">utils::intersectionVector</a>(candidates, vertexToCellsMap[vertexId]);</div>
<div class="line"><a name="l02786"></a><span class="lineno"> 2786</span>&#160;                j++;</div>
<div class="line"><a name="l02787"></a><span class="lineno"> 2787</span>&#160;            }</div>
<div class="line"><a name="l02788"></a><span class="lineno"> 2788</span>&#160;</div>
<div class="line"><a name="l02789"></a><span class="lineno"> 2789</span>&#160;            <span class="keywordtype">int</span> nFaceAdjacencies = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(face);</div>
<div class="line"><a name="l02790"></a><span class="lineno"> 2790</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nFaceAdjacencies; ++k) {</div>
<div class="line"><a name="l02791"></a><span class="lineno"> 2791</span>&#160;                <span class="keywordtype">long</span> adjacencyId = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(face, k);</div>
<div class="line"><a name="l02792"></a><span class="lineno"> 2792</span>&#160;                <span class="keywordflow">if</span> (adjacencyId &gt;= 0) {</div>
<div class="line"><a name="l02793"></a><span class="lineno"> 2793</span>&#160;                    <a class="code" href="namespacebitpit_1_1utils.xhtml#af1decd85ef09fca51526234dd9093663">utils::eraseValue</a>(candidates, adjacencyId);</div>
<div class="line"><a name="l02794"></a><span class="lineno"> 2794</span>&#160;                }</div>
<div class="line"><a name="l02795"></a><span class="lineno"> 2795</span>&#160;            }</div>
<div class="line"><a name="l02796"></a><span class="lineno"> 2796</span>&#160;</div>
<div class="line"><a name="l02797"></a><span class="lineno"> 2797</span>&#160;            <span class="comment">// Find the real neighoburs and update the adjacencies</span></div>
<div class="line"><a name="l02798"></a><span class="lineno"> 2798</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">long</span> candidateId : candidates) {</div>
<div class="line"><a name="l02799"></a><span class="lineno"> 2799</span>&#160;                <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;candidate = m_cells[candidateId];</div>
<div class="line"><a name="l02800"></a><span class="lineno"> 2800</span>&#160;                <span class="keywordtype">int</span> nCandidateFaces = candidate.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l02801"></a><span class="lineno"> 2801</span>&#160;</div>
<div class="line"><a name="l02802"></a><span class="lineno"> 2802</span>&#160;                <span class="comment">// Consider only real neighbours</span></div>
<div class="line"><a name="l02803"></a><span class="lineno"> 2803</span>&#160;                <span class="keywordtype">int</span> candidateFace = -1;</div>
<div class="line"><a name="l02804"></a><span class="lineno"> 2804</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCandidateFaces; ++k) {</div>
<div class="line"><a name="l02805"></a><span class="lineno"> 2805</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#abb9bab18d7c154892b8b0c145e6b96eb">isSameFace</a>(cellId, face, candidateId, k)) {</div>
<div class="line"><a name="l02806"></a><span class="lineno"> 2806</span>&#160;                        candidateFace = k;</div>
<div class="line"><a name="l02807"></a><span class="lineno"> 2807</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02808"></a><span class="lineno"> 2808</span>&#160;                    }</div>
<div class="line"><a name="l02809"></a><span class="lineno"> 2809</span>&#160;                }</div>
<div class="line"><a name="l02810"></a><span class="lineno"> 2810</span>&#160;</div>
<div class="line"><a name="l02811"></a><span class="lineno"> 2811</span>&#160;                <span class="keywordflow">if</span> (candidateFace &lt; 0) {</div>
<div class="line"><a name="l02812"></a><span class="lineno"> 2812</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02813"></a><span class="lineno"> 2813</span>&#160;                }</div>
<div class="line"><a name="l02814"></a><span class="lineno"> 2814</span>&#160;</div>
<div class="line"><a name="l02815"></a><span class="lineno"> 2815</span>&#160;                <span class="comment">// If the candidate is a real neighbout update the adjacencies</span></div>
<div class="line"><a name="l02816"></a><span class="lineno"> 2816</span>&#160;                cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">pushAdjacency</a>(face, candidateId);</div>
<div class="line"><a name="l02817"></a><span class="lineno"> 2817</span>&#160;                candidate.<a class="code" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">pushAdjacency</a>(candidateFace, cellId);</div>
<div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;            }</div>
<div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;        }</div>
<div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;    }</div>
<div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160;}</div>
<div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;</div>
<div class="line"><a name="l02830"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ae0773bd212cf300bf82d2f666508b927"> 2830</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae0773bd212cf300bf82d2f666508b927">PatchKernel::buildInterfaces</a>(<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">resetInterfaces</a>)</div>
<div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;{</div>
<div class="line"><a name="l02832"></a><span class="lineno"> 2832</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5a23374e8cac5ebfe46acf6e6b3400e8">updateInterfaces</a>(m_cells.getIds(<span class="keyword">false</span>), <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">resetInterfaces</a>);</div>
<div class="line"><a name="l02833"></a><span class="lineno"> 2833</span>&#160;}</div>
<div class="line"><a name="l02834"></a><span class="lineno"> 2834</span>&#160;</div>
<div class="line"><a name="l02843"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a5a23374e8cac5ebfe46acf6e6b3400e8"> 2843</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5a23374e8cac5ebfe46acf6e6b3400e8">PatchKernel::updateInterfaces</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;cellIds, <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">resetInterfaces</a>)</div>
<div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;{</div>
<div class="line"><a name="l02845"></a><span class="lineno"> 2845</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02846"></a><span class="lineno"> 2846</span>&#160;    <span class="comment">// Reset existing interfaces</span></div>
<div class="line"><a name="l02847"></a><span class="lineno"> 2847</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02848"></a><span class="lineno"> 2848</span>&#160;    <span class="keywordflow">if</span> (resetInterfaces) {</div>
<div class="line"><a name="l02849"></a><span class="lineno"> 2849</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : cellIds) {</div>
<div class="line"><a name="l02850"></a><span class="lineno"> 2850</span>&#160;            m_cells[cellId].resetInterfaces();</div>
<div class="line"><a name="l02851"></a><span class="lineno"> 2851</span>&#160;        }</div>
<div class="line"><a name="l02852"></a><span class="lineno"> 2852</span>&#160;    }</div>
<div class="line"><a name="l02853"></a><span class="lineno"> 2853</span>&#160;</div>
<div class="line"><a name="l02854"></a><span class="lineno"> 2854</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160;    <span class="comment">// Update interfaces</span></div>
<div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160;    <span class="comment">// Adjacencies and interfaces are paired: the i-th adjacency correspondes</span></div>
<div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;    <span class="comment">// to the i-th interface. Moreover if we loop through the adjacencies of</span></div>
<div class="line"><a name="l02859"></a><span class="lineno"> 2859</span>&#160;    <span class="comment">// a face, the adjacencies that have an interface are always listed first.</span></div>
<div class="line"><a name="l02860"></a><span class="lineno"> 2860</span>&#160;    <span class="comment">// This meas that, to update the interfaces, we can count the interfaces</span></div>
<div class="line"><a name="l02861"></a><span class="lineno"> 2861</span>&#160;    <span class="comment">// already associated to a face and loop only on the adjacencies which</span></div>
<div class="line"><a name="l02862"></a><span class="lineno"> 2862</span>&#160;    <span class="comment">// have an index past the one of the last interface.</span></div>
<div class="line"><a name="l02863"></a><span class="lineno"> 2863</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : cellIds) {</div>
<div class="line"><a name="l02864"></a><span class="lineno"> 2864</span>&#160;        <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_cells[cellId];</div>
<div class="line"><a name="l02865"></a><span class="lineno"> 2865</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> nCellFaces = cell.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l02866"></a><span class="lineno"> 2866</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> face = 0; face &lt; nCellFaces; face++) {</div>
<div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;            <span class="keywordtype">int</span> nFaceAdjacencies = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(face);</div>
<div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;</div>
<div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;            <span class="comment">// Find the range of adjacencies that need an interface</span></div>
<div class="line"><a name="l02870"></a><span class="lineno"> 2870</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l02871"></a><span class="lineno"> 2871</span>&#160;            <span class="comment">// Each face has always an interface, but this interface might be</span></div>
<div class="line"><a name="l02872"></a><span class="lineno"> 2872</span>&#160;            <span class="comment">// just a placholder. If this is the case, the update has to</span></div>
<div class="line"><a name="l02873"></a><span class="lineno"> 2873</span>&#160;            <span class="comment">// begin from the first adjacency.</span></div>
<div class="line"><a name="l02874"></a><span class="lineno"> 2874</span>&#160;            <span class="keywordtype">int</span> updateEnd   = nFaceAdjacencies;</div>
<div class="line"><a name="l02875"></a><span class="lineno"> 2875</span>&#160;            <span class="keywordtype">int</span> updateBegin = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>(face);</div>
<div class="line"><a name="l02876"></a><span class="lineno"> 2876</span>&#160;            <span class="keywordflow">if</span> (updateBegin == 1) {</div>
<div class="line"><a name="l02877"></a><span class="lineno"> 2877</span>&#160;                <span class="keywordtype">long</span> interfaceId = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">getInterface</a>(face, 0);</div>
<div class="line"><a name="l02878"></a><span class="lineno"> 2878</span>&#160;                <span class="keywordflow">if</span> (interfaceId &lt; 0) {</div>
<div class="line"><a name="l02879"></a><span class="lineno"> 2879</span>&#160;                    updateBegin = 0;</div>
<div class="line"><a name="l02880"></a><span class="lineno"> 2880</span>&#160;                }</div>
<div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;            }</div>
<div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;</div>
<div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;            <span class="keywordflow">if</span> (updateBegin == updateEnd) {</div>
<div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;            }</div>
<div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;</div>
<div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;            <span class="comment">// Build an interface for every adjacency</span></div>
<div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160;            <span class="comment">// Interface and adjacencies are aligned:</span></div>
<div class="line"><a name="l02890"></a><span class="lineno"> 2890</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = updateBegin; k &lt; updateEnd; ++k) {</div>
<div class="line"><a name="l02891"></a><span class="lineno"> 2891</span>&#160;                <span class="comment">// Do not create the interfaces between two ghost cells or</span></div>
<div class="line"><a name="l02892"></a><span class="lineno"> 2892</span>&#160;                <span class="comment">// on ghost border faces.</span></div>
<div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;                <span class="keywordtype">long</span> neighId = cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(face, k);</div>
<div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;                <span class="keywordflow">if</span> (neighId &lt; 0 &amp;&amp; !cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">isInterior</a>()) {</div>
<div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;                }</div>
<div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;</div>
<div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;                <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> *neigh   = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;                <span class="keywordtype">int</span> neighFace = -1;</div>
<div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;                <span class="keywordflow">if</span> (neighId &gt;= 0) {</div>
<div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;                    neigh = &amp;m_cells[neighId];</div>
<div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;                    <span class="keywordflow">if</span> (!neigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">isInterior</a>()) {</div>
<div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;                        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;                    }</div>
<div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;</div>
<div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;                    neighFace = findAdjoinNeighFace(cellId, neighId);</div>
<div class="line"><a name="l02907"></a><span class="lineno"> 2907</span>&#160;                }</div>
<div class="line"><a name="l02908"></a><span class="lineno"> 2908</span>&#160;</div>
<div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160;                <span class="comment">// Owner and neighbour of the interface</span></div>
<div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;                <span class="comment">//</span></div>
<div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;                <span class="comment">// The interface is owned by the cell that has only one</span></div>
<div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;                <span class="comment">// adjacency, i.e., by the cell that owns the smallest of</span></div>
<div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;                <span class="comment">// the two faces.</span></div>
<div class="line"><a name="l02914"></a><span class="lineno"> 2914</span>&#160;                <span class="keywordtype">long</span> intrOwnerId;</div>
<div class="line"><a name="l02915"></a><span class="lineno"> 2915</span>&#160;                <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> *intrOwner;</div>
<div class="line"><a name="l02916"></a><span class="lineno"> 2916</span>&#160;                <span class="keywordtype">int</span> intrOwnerFace;</div>
<div class="line"><a name="l02917"></a><span class="lineno"> 2917</span>&#160;</div>
<div class="line"><a name="l02918"></a><span class="lineno"> 2918</span>&#160;                <span class="keywordtype">long</span> intrNeighId;</div>
<div class="line"><a name="l02919"></a><span class="lineno"> 2919</span>&#160;                <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> *intrNeigh = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l02920"></a><span class="lineno"> 2920</span>&#160;                <span class="keywordtype">int</span> intrNeighFace = -1;</div>
<div class="line"><a name="l02921"></a><span class="lineno"> 2921</span>&#160;</div>
<div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;                <span class="keywordflow">if</span> (nFaceAdjacencies == 1 || neighId &lt; 0) {</div>
<div class="line"><a name="l02923"></a><span class="lineno"> 2923</span>&#160;                    intrOwnerId   = cellId;</div>
<div class="line"><a name="l02924"></a><span class="lineno"> 2924</span>&#160;                    intrOwner     = &amp;cell;</div>
<div class="line"><a name="l02925"></a><span class="lineno"> 2925</span>&#160;                    intrOwnerFace = face;</div>
<div class="line"><a name="l02926"></a><span class="lineno"> 2926</span>&#160;</div>
<div class="line"><a name="l02927"></a><span class="lineno"> 2927</span>&#160;                    intrNeighId = neighId;</div>
<div class="line"><a name="l02928"></a><span class="lineno"> 2928</span>&#160;                    <span class="keywordflow">if</span> (intrNeighId &gt;= 0) {</div>
<div class="line"><a name="l02929"></a><span class="lineno"> 2929</span>&#160;                        intrNeigh     = &amp;m_cells[intrNeighId];</div>
<div class="line"><a name="l02930"></a><span class="lineno"> 2930</span>&#160;                        intrNeighFace = neighFace;</div>
<div class="line"><a name="l02931"></a><span class="lineno"> 2931</span>&#160;                    }</div>
<div class="line"><a name="l02932"></a><span class="lineno"> 2932</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02933"></a><span class="lineno"> 2933</span>&#160;                    intrOwnerId   = neighId;</div>
<div class="line"><a name="l02934"></a><span class="lineno"> 2934</span>&#160;                    intrOwner     = &amp;m_cells[intrOwnerId];</div>
<div class="line"><a name="l02935"></a><span class="lineno"> 2935</span>&#160;                    intrOwnerFace = neighFace;</div>
<div class="line"><a name="l02936"></a><span class="lineno"> 2936</span>&#160;</div>
<div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;                    intrNeighId   = cellId;</div>
<div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;                    intrNeigh     = &amp;cell;</div>
<div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160;                    intrNeighFace = face;</div>
<div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;                }</div>
<div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;</div>
<div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;                <span class="comment">// Create a new interface</span></div>
<div class="line"><a name="l02943"></a><span class="lineno"> 2943</span>&#160;                <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> interfaceType = intrOwner-&gt;<a class="code" href="classbitpit_1_1Element.xhtml#ae8ed2f8193fced9e84cd379e8b0934de">getFaceType</a>(intrOwnerFace);</div>
<div class="line"><a name="l02944"></a><span class="lineno"> 2944</span>&#160;                <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">InterfaceIterator</a> interfaceIterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">addInterface</a>(interfaceType);</div>
<div class="line"><a name="l02945"></a><span class="lineno"> 2945</span>&#160;                <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= *interfaceIterator;</div>
<div class="line"><a name="l02946"></a><span class="lineno"> 2946</span>&#160;                <span class="keywordtype">long</span> interfaceId = interface.<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l02947"></a><span class="lineno"> 2947</span>&#160;</div>
<div class="line"><a name="l02948"></a><span class="lineno"> 2948</span>&#160;                <span class="comment">// Set owner and neighbour</span></div>
<div class="line"><a name="l02949"></a><span class="lineno"> 2949</span>&#160;                interface.setOwner(intrOwnerId, intrOwnerFace);</div>
<div class="line"><a name="l02950"></a><span class="lineno"> 2950</span>&#160;                <span class="keywordflow">if</span> (intrNeighId &gt;= 0) {</div>
<div class="line"><a name="l02951"></a><span class="lineno"> 2951</span>&#160;                    interface.setNeigh(intrNeighId, intrNeighFace);</div>
<div class="line"><a name="l02952"></a><span class="lineno"> 2952</span>&#160;                }</div>
<div class="line"><a name="l02953"></a><span class="lineno"> 2953</span>&#160;</div>
<div class="line"><a name="l02954"></a><span class="lineno"> 2954</span>&#160;                <span class="comment">// Set connectivity</span></div>
<div class="line"><a name="l02955"></a><span class="lineno"> 2955</span>&#160;                <span class="keywordtype">int</span> nInterfaceVertices = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(interfaceType).nVertices;</div>
<div class="line"><a name="l02956"></a><span class="lineno"> 2956</span>&#160;                std::unique_ptr&lt;long[]&gt; interfaceConnect = std::unique_ptr&lt;long[]&gt;(<span class="keyword">new</span> <span class="keywordtype">long</span>[nInterfaceVertices]);</div>
<div class="line"><a name="l02957"></a><span class="lineno"> 2957</span>&#160;                std::vector&lt;int&gt; faceLocalConnect = intrOwner-&gt;<a class="code" href="classbitpit_1_1Element.xhtml#a73d45283655d18a2a0ca10545883b2e2">getFaceLocalConnect</a>(intrOwnerFace);</div>
<div class="line"><a name="l02958"></a><span class="lineno"> 2958</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nInterfaceVertices; ++k) {</div>
<div class="line"><a name="l02959"></a><span class="lineno"> 2959</span>&#160;                    <span class="keywordtype">long</span> localVertexId = faceLocalConnect[k];</div>
<div class="line"><a name="l02960"></a><span class="lineno"> 2960</span>&#160;                    <span class="keywordtype">long</span> vertexId = intrOwner-&gt;<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(localVertexId);</div>
<div class="line"><a name="l02961"></a><span class="lineno"> 2961</span>&#160;                    interfaceConnect[k] = vertexId;</div>
<div class="line"><a name="l02962"></a><span class="lineno"> 2962</span>&#160;                }</div>
<div class="line"><a name="l02963"></a><span class="lineno"> 2963</span>&#160;</div>
<div class="line"><a name="l02964"></a><span class="lineno"> 2964</span>&#160;                interface.setConnect(std::move(interfaceConnect));</div>
<div class="line"><a name="l02965"></a><span class="lineno"> 2965</span>&#160;</div>
<div class="line"><a name="l02966"></a><span class="lineno"> 2966</span>&#160;                <span class="comment">// Update owner and neighbour cell data</span></div>
<div class="line"><a name="l02967"></a><span class="lineno"> 2967</span>&#160;                intrOwner-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">pushInterface</a>(intrOwnerFace, interfaceId);</div>
<div class="line"><a name="l02968"></a><span class="lineno"> 2968</span>&#160;                <span class="keywordflow">if</span> (intrNeighId &gt;= 0) {</div>
<div class="line"><a name="l02969"></a><span class="lineno"> 2969</span>&#160;                    intrNeigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">pushInterface</a>(intrNeighFace, interfaceId);</div>
<div class="line"><a name="l02970"></a><span class="lineno"> 2970</span>&#160;                }</div>
<div class="line"><a name="l02971"></a><span class="lineno"> 2971</span>&#160;</div>
<div class="line"><a name="l02972"></a><span class="lineno"> 2972</span>&#160;                <span class="comment">// The position of the interface has to be the same of the</span></div>
<div class="line"><a name="l02973"></a><span class="lineno"> 2973</span>&#160;                <span class="comment">// related adjacency, moreover the adjacencies associated to</span></div>
<div class="line"><a name="l02974"></a><span class="lineno"> 2974</span>&#160;                <span class="comment">// an interface has to be listed first. This is certainly</span></div>
<div class="line"><a name="l02975"></a><span class="lineno"> 2975</span>&#160;                <span class="comment">// tru for the curretn cell (because we are adding the</span></div>
<div class="line"><a name="l02976"></a><span class="lineno"> 2976</span>&#160;                <span class="comment">// interfaces in the proper order), we need to check if the</span></div>
<div class="line"><a name="l02977"></a><span class="lineno"> 2977</span>&#160;                <span class="comment">// it is true also for the the neighbour.</span></div>
<div class="line"><a name="l02978"></a><span class="lineno"> 2978</span>&#160;                <span class="keywordflow">if</span> (neighId &gt;= 0) {</div>
<div class="line"><a name="l02979"></a><span class="lineno"> 2979</span>&#160;                    <span class="keywordtype">int</span> neighInterfaceIndex   = neigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">getInterfaceCount</a>(neighFace) - 1;</div>
<div class="line"><a name="l02980"></a><span class="lineno"> 2980</span>&#160;                    <span class="keywordtype">long</span> neighPairedAdjacency = neigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">getAdjacency</a>(neighFace, neighInterfaceIndex);</div>
<div class="line"><a name="l02981"></a><span class="lineno"> 2981</span>&#160;                    <span class="keywordflow">if</span> (neighPairedAdjacency != cellId) {</div>
<div class="line"><a name="l02982"></a><span class="lineno"> 2982</span>&#160;                        <span class="keywordtype">int</span> neighCellAdjacencyIndex = neigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">findAdjacency</a>(neighFace, cellId);</div>
<div class="line"><a name="l02983"></a><span class="lineno"> 2983</span>&#160;                        neigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">setAdjacency</a>(neighFace, neighInterfaceIndex, cellId);</div>
<div class="line"><a name="l02984"></a><span class="lineno"> 2984</span>&#160;                        neigh-&gt;<a class="code" href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">setAdjacency</a>(neighFace, neighCellAdjacencyIndex, neighPairedAdjacency);</div>
<div class="line"><a name="l02985"></a><span class="lineno"> 2985</span>&#160;                    }</div>
<div class="line"><a name="l02986"></a><span class="lineno"> 2986</span>&#160;                }</div>
<div class="line"><a name="l02987"></a><span class="lineno"> 2987</span>&#160;            }</div>
<div class="line"><a name="l02988"></a><span class="lineno"> 2988</span>&#160;        }</div>
<div class="line"><a name="l02989"></a><span class="lineno"> 2989</span>&#160;    }</div>
<div class="line"><a name="l02990"></a><span class="lineno"> 2990</span>&#160;}</div>
<div class="line"><a name="l02991"></a><span class="lineno"> 2991</span>&#160;</div>
<div class="line"><a name="l03002"></a><span class="lineno"> 3002</span>&#160;<span class="keywordtype">int</span> PatchKernel::findAdjoinNeighFace(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;cellId, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;neighId)<span class="keyword"> const</span></div>
<div class="line"><a name="l03003"></a><span class="lineno"> 3003</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03004"></a><span class="lineno"> 3004</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;neigh = m_cells[neighId];</div>
<div class="line"><a name="l03005"></a><span class="lineno"> 3005</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> nNeighFaces = neigh.<a class="code" href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">getFaceCount</a>();</div>
<div class="line"><a name="l03006"></a><span class="lineno"> 3006</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> face = 0; face &lt; nNeighFaces; face++) {</div>
<div class="line"><a name="l03007"></a><span class="lineno"> 3007</span>&#160;        <span class="keywordtype">int</span> nFaceAdjacencies = neigh.<a class="code" href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">getAdjacencyCount</a>(face);</div>
<div class="line"><a name="l03008"></a><span class="lineno"> 3008</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">long</span> *faceAdjacencies = neigh.<a class="code" href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">getAdjacencies</a>(face);</div>
<div class="line"><a name="l03009"></a><span class="lineno"> 3009</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nFaceAdjacencies; ++k) {</div>
<div class="line"><a name="l03010"></a><span class="lineno"> 3010</span>&#160;            <span class="keywordtype">long</span> geussId = faceAdjacencies[k];</div>
<div class="line"><a name="l03011"></a><span class="lineno"> 3011</span>&#160;            <span class="keywordflow">if</span> (geussId == cellId) {</div>
<div class="line"><a name="l03012"></a><span class="lineno"> 3012</span>&#160;                <span class="keywordflow">return</span> face;</div>
<div class="line"><a name="l03013"></a><span class="lineno"> 3013</span>&#160;            }</div>
<div class="line"><a name="l03014"></a><span class="lineno"> 3014</span>&#160;        }</div>
<div class="line"><a name="l03015"></a><span class="lineno"> 3015</span>&#160;    }</div>
<div class="line"><a name="l03016"></a><span class="lineno"> 3016</span>&#160;</div>
<div class="line"><a name="l03017"></a><span class="lineno"> 3017</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l03018"></a><span class="lineno"> 3018</span>&#160;}</div>
<div class="line"><a name="l03019"></a><span class="lineno"> 3019</span>&#160;</div>
<div class="line"><a name="l03025"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a7bd96cdfcd6ce1cddee04252824cd512"> 3025</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a7bd96cdfcd6ce1cddee04252824cd512">PatchKernel::clearBoundingBox</a>()</div>
<div class="line"><a name="l03026"></a><span class="lineno"> 3026</span>&#160;{</div>
<div class="line"><a name="l03027"></a><span class="lineno"> 3027</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 3; ++k) {</div>
<div class="line"><a name="l03028"></a><span class="lineno"> 3028</span>&#160;        m_boxMinPoint[k]   =   <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::numeric_limits&lt;double&gt;::max</a>();</div>
<div class="line"><a name="l03029"></a><span class="lineno"> 3029</span>&#160;        m_boxMinCounter[k] = 0;</div>
<div class="line"><a name="l03030"></a><span class="lineno"> 3030</span>&#160;</div>
<div class="line"><a name="l03031"></a><span class="lineno"> 3031</span>&#160;        m_boxMaxPoint[k]   = - <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::numeric_limits&lt;double&gt;::max</a>();</div>
<div class="line"><a name="l03032"></a><span class="lineno"> 3032</span>&#160;        m_boxMaxCounter[k] = 0;</div>
<div class="line"><a name="l03033"></a><span class="lineno"> 3033</span>&#160;    }</div>
<div class="line"><a name="l03034"></a><span class="lineno"> 3034</span>&#160;</div>
<div class="line"><a name="l03035"></a><span class="lineno"> 3035</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>() &gt; 0);</div>
<div class="line"><a name="l03036"></a><span class="lineno"> 3036</span>&#160;}</div>
<div class="line"><a name="l03037"></a><span class="lineno"> 3037</span>&#160;</div>
<div class="line"><a name="l03046"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a"> 3046</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a">PatchKernel::setBoundingBox</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;minPoint, <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;maxPoint)</div>
<div class="line"><a name="l03047"></a><span class="lineno"> 3047</span>&#160;{</div>
<div class="line"><a name="l03048"></a><span class="lineno"> 3048</span>&#160;    m_boxMinPoint = minPoint;</div>
<div class="line"><a name="l03049"></a><span class="lineno"> 3049</span>&#160;    m_boxMaxPoint = maxPoint;</div>
<div class="line"><a name="l03050"></a><span class="lineno"> 3050</span>&#160;</div>
<div class="line"><a name="l03051"></a><span class="lineno"> 3051</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l03052"></a><span class="lineno"> 3052</span>&#160;</div>
<div class="line"><a name="l03053"></a><span class="lineno"> 3053</span>&#160;    <span class="comment">// Update geometrical tolerance</span></div>
<div class="line"><a name="l03054"></a><span class="lineno"> 3054</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#aebc446887158556566ded86f91d440a2">isTolCustomized</a>()) {</div>
<div class="line"><a name="l03055"></a><span class="lineno"> 3055</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1bbac26fd3071ef417afdd4998a95f59">resetTol</a>();</div>
<div class="line"><a name="l03056"></a><span class="lineno"> 3056</span>&#160;    }</div>
<div class="line"><a name="l03057"></a><span class="lineno"> 3057</span>&#160;}</div>
<div class="line"><a name="l03058"></a><span class="lineno"> 3058</span>&#160;</div>
<div class="line"><a name="l03065"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d"> 3065</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d">PatchKernel::getBoundingBox</a>(std::array&lt;double, 3&gt; &amp;minPoint, std::array&lt;double, 3&gt; &amp;maxPoint)</div>
<div class="line"><a name="l03066"></a><span class="lineno"> 3066</span>&#160;{</div>
<div class="line"><a name="l03067"></a><span class="lineno"> 3067</span>&#160;    minPoint = m_boxMinPoint;</div>
<div class="line"><a name="l03068"></a><span class="lineno"> 3068</span>&#160;    maxPoint = m_boxMaxPoint;</div>
<div class="line"><a name="l03069"></a><span class="lineno"> 3069</span>&#160;}</div>
<div class="line"><a name="l03070"></a><span class="lineno"> 3070</span>&#160;</div>
<div class="line"><a name="l03076"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8"> 3076</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">PatchKernel::isBoundingBoxFrozen</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l03077"></a><span class="lineno"> 3077</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03078"></a><span class="lineno"> 3078</span>&#160;    <span class="keywordflow">return</span> m_boxFrozen;</div>
<div class="line"><a name="l03079"></a><span class="lineno"> 3079</span>&#160;}</div>
<div class="line"><a name="l03080"></a><span class="lineno"> 3080</span>&#160;</div>
<div class="line"><a name="l03091"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a4cee1aaca004bf6f3af1f11af40ef5a4"> 3091</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4cee1aaca004bf6f3af1f11af40ef5a4">PatchKernel::setBoundingBoxFrozen</a>(<span class="keywordtype">bool</span> frozen)</div>
<div class="line"><a name="l03092"></a><span class="lineno"> 3092</span>&#160;{</div>
<div class="line"><a name="l03093"></a><span class="lineno"> 3093</span>&#160;    m_boxFrozen = frozen;</div>
<div class="line"><a name="l03094"></a><span class="lineno"> 3094</span>&#160;}</div>
<div class="line"><a name="l03095"></a><span class="lineno"> 3095</span>&#160;</div>
<div class="line"><a name="l03101"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5"> 3101</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">PatchKernel::isBoundingBoxDirty</a>(<span class="keywordtype">bool</span> global)<span class="keyword"> const</span></div>
<div class="line"><a name="l03102"></a><span class="lineno"> 3102</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03103"></a><span class="lineno"> 3103</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">isDirty</a> = m_boxDirty;</div>
<div class="line"><a name="l03104"></a><span class="lineno"> 3104</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l03105"></a><span class="lineno"> 3105</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (global &amp;&amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9c1b9c557d6e2c90eb5fb0ef6aa14dbe">isCommunicatorSet</a>()) {</div>
<div class="line"><a name="l03106"></a><span class="lineno"> 3106</span>&#160;        <span class="keyword">const</span> <span class="keyword">auto</span> &amp;communicator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a801bc85779cba6906e87a5a3191b5263">getCommunicator</a>();</div>
<div class="line"><a name="l03107"></a><span class="lineno"> 3107</span>&#160;        MPI_Allreduce(const_cast&lt;bool *&gt;(&amp;m_boxDirty), &amp;isDirty, 1, MPI_C_BOOL, MPI_LOR, communicator);</div>
<div class="line"><a name="l03108"></a><span class="lineno"> 3108</span>&#160;    }</div>
<div class="line"><a name="l03109"></a><span class="lineno"> 3109</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l03110"></a><span class="lineno"> 3110</span>&#160;<span class="preprocessor"></span>    BITPIT_UNUSED(global);</div>
<div class="line"><a name="l03111"></a><span class="lineno"> 3111</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03112"></a><span class="lineno"> 3112</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03113"></a><span class="lineno"> 3113</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">isDirty</a>;</div>
<div class="line"><a name="l03114"></a><span class="lineno"> 3114</span>&#160;}</div>
<div class="line"><a name="l03115"></a><span class="lineno"> 3115</span>&#160;</div>
<div class="line"><a name="l03121"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8"> 3121</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">PatchKernel::setBoundingBoxDirty</a>(<span class="keywordtype">bool</span> dirty)</div>
<div class="line"><a name="l03122"></a><span class="lineno"> 3122</span>&#160;{</div>
<div class="line"><a name="l03123"></a><span class="lineno"> 3123</span>&#160;    m_boxDirty = dirty;</div>
<div class="line"><a name="l03124"></a><span class="lineno"> 3124</span>&#160;}</div>
<div class="line"><a name="l03125"></a><span class="lineno"> 3125</span>&#160;</div>
<div class="line"><a name="l03129"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a"> 3129</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a">PatchKernel::updateBoundingBox</a>(<span class="keywordtype">bool</span> forcedUpdated)</div>
<div class="line"><a name="l03130"></a><span class="lineno"> 3130</span>&#160;{</div>
<div class="line"><a name="l03131"></a><span class="lineno"> 3131</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">isBoundingBoxFrozen</a>()) {</div>
<div class="line"><a name="l03132"></a><span class="lineno"> 3132</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03133"></a><span class="lineno"> 3133</span>&#160;    }</div>
<div class="line"><a name="l03134"></a><span class="lineno"> 3134</span>&#160;</div>
<div class="line"><a name="l03135"></a><span class="lineno"> 3135</span>&#160;    <span class="comment">// Check if the bounding box is dirty</span></div>
<div class="line"><a name="l03136"></a><span class="lineno"> 3136</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">isBoundingBoxDirty</a>() &amp;&amp; !forcedUpdated) {</div>
<div class="line"><a name="l03137"></a><span class="lineno"> 3137</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03138"></a><span class="lineno"> 3138</span>&#160;    }</div>
<div class="line"><a name="l03139"></a><span class="lineno"> 3139</span>&#160;</div>
<div class="line"><a name="l03140"></a><span class="lineno"> 3140</span>&#160;    <span class="comment">// Initialize bounding box</span></div>
<div class="line"><a name="l03141"></a><span class="lineno"> 3141</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a7bd96cdfcd6ce1cddee04252824cd512">clearBoundingBox</a>();</div>
<div class="line"><a name="l03142"></a><span class="lineno"> 3142</span>&#160;</div>
<div class="line"><a name="l03143"></a><span class="lineno"> 3143</span>&#160;    <span class="comment">// Unset the dirty flag in order to be able to update the bounding box</span></div>
<div class="line"><a name="l03144"></a><span class="lineno"> 3144</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l03145"></a><span class="lineno"> 3145</span>&#160;</div>
<div class="line"><a name="l03146"></a><span class="lineno"> 3146</span>&#160;    <span class="comment">// Compute bounding box</span></div>
<div class="line"><a name="l03147"></a><span class="lineno"> 3147</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l03148"></a><span class="lineno"> 3148</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a363f9828e1cebc66f9da634640f3d92c">addPointToBoundingBox</a>(vertex.getCoords());</div>
<div class="line"><a name="l03149"></a><span class="lineno"> 3149</span>&#160;    }</div>
<div class="line"><a name="l03150"></a><span class="lineno"> 3150</span>&#160;}</div>
<div class="line"><a name="l03151"></a><span class="lineno"> 3151</span>&#160;</div>
<div class="line"><a name="l03160"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a363f9828e1cebc66f9da634640f3d92c"> 3160</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a363f9828e1cebc66f9da634640f3d92c">PatchKernel::addPointToBoundingBox</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l03161"></a><span class="lineno"> 3161</span>&#160;{</div>
<div class="line"><a name="l03162"></a><span class="lineno"> 3162</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">isBoundingBoxFrozen</a>() || <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">isBoundingBoxDirty</a>()) {</div>
<div class="line"><a name="l03163"></a><span class="lineno"> 3163</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03164"></a><span class="lineno"> 3164</span>&#160;    }</div>
<div class="line"><a name="l03165"></a><span class="lineno"> 3165</span>&#160;</div>
<div class="line"><a name="l03166"></a><span class="lineno"> 3166</span>&#160;    <span class="keywordtype">bool</span> boxUpdated = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03167"></a><span class="lineno"> 3167</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; point.size(); ++k) {</div>
<div class="line"><a name="l03168"></a><span class="lineno"> 3168</span>&#160;        <span class="keywordtype">double</span> value = point[k];</div>
<div class="line"><a name="l03169"></a><span class="lineno"> 3169</span>&#160;</div>
<div class="line"><a name="l03170"></a><span class="lineno"> 3170</span>&#160;        <span class="comment">// Update maximum value</span></div>
<div class="line"><a name="l03171"></a><span class="lineno"> 3171</span>&#160;        <span class="keywordflow">if</span> (value &gt; (m_boxMaxPoint[k] + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>())) {</div>
<div class="line"><a name="l03172"></a><span class="lineno"> 3172</span>&#160;            m_boxMaxPoint[k]   = value;</div>
<div class="line"><a name="l03173"></a><span class="lineno"> 3173</span>&#160;            m_boxMaxCounter[k] = 1;</div>
<div class="line"><a name="l03174"></a><span class="lineno"> 3174</span>&#160;</div>
<div class="line"><a name="l03175"></a><span class="lineno"> 3175</span>&#160;            boxUpdated = <span class="keyword">true</span>;</div>
<div class="line"><a name="l03176"></a><span class="lineno"> 3176</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(value - m_boxMaxPoint[k]) &lt;= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>()) {</div>
<div class="line"><a name="l03177"></a><span class="lineno"> 3177</span>&#160;            ++m_boxMaxCounter[k];</div>
<div class="line"><a name="l03178"></a><span class="lineno"> 3178</span>&#160;        }</div>
<div class="line"><a name="l03179"></a><span class="lineno"> 3179</span>&#160;</div>
<div class="line"><a name="l03180"></a><span class="lineno"> 3180</span>&#160;        <span class="comment">// Update minimum value</span></div>
<div class="line"><a name="l03181"></a><span class="lineno"> 3181</span>&#160;        <span class="keywordflow">if</span> (value &lt; (m_boxMinPoint[k] - <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>())) {</div>
<div class="line"><a name="l03182"></a><span class="lineno"> 3182</span>&#160;            m_boxMinPoint[k]   = value;</div>
<div class="line"><a name="l03183"></a><span class="lineno"> 3183</span>&#160;            m_boxMinCounter[k] = 1;</div>
<div class="line"><a name="l03184"></a><span class="lineno"> 3184</span>&#160;</div>
<div class="line"><a name="l03185"></a><span class="lineno"> 3185</span>&#160;            boxUpdated = <span class="keyword">true</span>;</div>
<div class="line"><a name="l03186"></a><span class="lineno"> 3186</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(value - m_boxMinPoint[k]) &lt;= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>()) {</div>
<div class="line"><a name="l03187"></a><span class="lineno"> 3187</span>&#160;            ++m_boxMinCounter[k];</div>
<div class="line"><a name="l03188"></a><span class="lineno"> 3188</span>&#160;        }</div>
<div class="line"><a name="l03189"></a><span class="lineno"> 3189</span>&#160;    }</div>
<div class="line"><a name="l03190"></a><span class="lineno"> 3190</span>&#160;</div>
<div class="line"><a name="l03191"></a><span class="lineno"> 3191</span>&#160;    <span class="comment">// Update geometrical tolerance</span></div>
<div class="line"><a name="l03192"></a><span class="lineno"> 3192</span>&#160;    <span class="keywordflow">if</span> (boxUpdated &amp;&amp; !<a class="code" href="classbitpit_1_1PatchKernel.xhtml#aebc446887158556566ded86f91d440a2">isTolCustomized</a>()) {</div>
<div class="line"><a name="l03193"></a><span class="lineno"> 3193</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1bbac26fd3071ef417afdd4998a95f59">resetTol</a>();</div>
<div class="line"><a name="l03194"></a><span class="lineno"> 3194</span>&#160;    }</div>
<div class="line"><a name="l03195"></a><span class="lineno"> 3195</span>&#160;}</div>
<div class="line"><a name="l03196"></a><span class="lineno"> 3196</span>&#160;</div>
<div class="line"><a name="l03209"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ae537aa5bafa444ca55d0a1ab0f446b59"> 3209</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae537aa5bafa444ca55d0a1ab0f446b59">PatchKernel::removePointFromBoundingBox</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l03210"></a><span class="lineno"> 3210</span>&#160;{</div>
<div class="line"><a name="l03211"></a><span class="lineno"> 3211</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">isBoundingBoxFrozen</a>() || <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">isBoundingBoxDirty</a>()) {</div>
<div class="line"><a name="l03212"></a><span class="lineno"> 3212</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l03213"></a><span class="lineno"> 3213</span>&#160;    }</div>
<div class="line"><a name="l03214"></a><span class="lineno"> 3214</span>&#160;</div>
<div class="line"><a name="l03215"></a><span class="lineno"> 3215</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; point.size(); ++k) {</div>
<div class="line"><a name="l03216"></a><span class="lineno"> 3216</span>&#160;        <span class="keywordtype">double</span> value = point[k];</div>
<div class="line"><a name="l03217"></a><span class="lineno"> 3217</span>&#160;</div>
<div class="line"><a name="l03218"></a><span class="lineno"> 3218</span>&#160;        <span class="comment">// Check if maximum value is still valid</span></div>
<div class="line"><a name="l03219"></a><span class="lineno"> 3219</span>&#160;        assert(value &lt;= (m_boxMaxPoint[k] + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>()));</div>
<div class="line"><a name="l03220"></a><span class="lineno"> 3220</span>&#160;        <span class="keywordflow">if</span> (value &gt; (m_boxMaxPoint[k] - <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>())) {</div>
<div class="line"><a name="l03221"></a><span class="lineno"> 3221</span>&#160;            <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l03222"></a><span class="lineno"> 3222</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(value - m_boxMaxPoint[k]) &lt;= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>()) {</div>
<div class="line"><a name="l03223"></a><span class="lineno"> 3223</span>&#160;            --m_boxMaxCounter[k];</div>
<div class="line"><a name="l03224"></a><span class="lineno"> 3224</span>&#160;            <span class="keywordflow">if</span> (m_boxMaxCounter[k] == 0) {</div>
<div class="line"><a name="l03225"></a><span class="lineno"> 3225</span>&#160;                <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l03226"></a><span class="lineno"> 3226</span>&#160;            }</div>
<div class="line"><a name="l03227"></a><span class="lineno"> 3227</span>&#160;        }</div>
<div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;</div>
<div class="line"><a name="l03229"></a><span class="lineno"> 3229</span>&#160;        <span class="comment">// Update minimum value</span></div>
<div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;        assert(value &gt;= (m_boxMinPoint[k] - <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>()));</div>
<div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;        <span class="keywordflow">if</span> (value &lt; (m_boxMinPoint[k] + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>())) {</div>
<div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;            <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l03233"></a><span class="lineno"> 3233</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(value - m_boxMinPoint[k]) &lt;= <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>()) {</div>
<div class="line"><a name="l03234"></a><span class="lineno"> 3234</span>&#160;            --m_boxMinCounter[k];</div>
<div class="line"><a name="l03235"></a><span class="lineno"> 3235</span>&#160;            <span class="keywordflow">if</span> (m_boxMinCounter[k] == 0) {</div>
<div class="line"><a name="l03236"></a><span class="lineno"> 3236</span>&#160;                <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">setBoundingBoxDirty</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l03237"></a><span class="lineno"> 3237</span>&#160;            }</div>
<div class="line"><a name="l03238"></a><span class="lineno"> 3238</span>&#160;        }</div>
<div class="line"><a name="l03239"></a><span class="lineno"> 3239</span>&#160;    }</div>
<div class="line"><a name="l03240"></a><span class="lineno"> 3240</span>&#160;</div>
<div class="line"><a name="l03241"></a><span class="lineno"> 3241</span>&#160;    <span class="comment">// Bounding box update</span></div>
<div class="line"><a name="l03242"></a><span class="lineno"> 3242</span>&#160;    <span class="keywordflow">if</span> (!delayed) {</div>
<div class="line"><a name="l03243"></a><span class="lineno"> 3243</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a">updateBoundingBox</a>();</div>
<div class="line"><a name="l03244"></a><span class="lineno"> 3244</span>&#160;    }</div>
<div class="line"><a name="l03245"></a><span class="lineno"> 3245</span>&#160;}</div>
<div class="line"><a name="l03246"></a><span class="lineno"> 3246</span>&#160;</div>
<div class="line"><a name="l03254"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a16a6cb6811671aa1af3b843e31684f62"> 3254</a></span>&#160;std::unordered_map&lt;long, long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a795e15153ffc0b6cbb6f837842750a18">PatchKernel::binSortVertex</a>(<span class="keywordtype">int</span> nBins)</div>
<div class="line"><a name="l03255"></a><span class="lineno"> 3255</span>&#160;{</div>
<div class="line"><a name="l03256"></a><span class="lineno"> 3256</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a795e15153ffc0b6cbb6f837842750a18">PatchKernel::binSortVertex</a>(m_vertices, nBins);</div>
<div class="line"><a name="l03257"></a><span class="lineno"> 3257</span>&#160;}</div>
<div class="line"><a name="l03258"></a><span class="lineno"> 3258</span>&#160;</div>
<div class="line"><a name="l03267"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a795e15153ffc0b6cbb6f837842750a18"> 3267</a></span>&#160;std::unordered_map&lt;long, long&gt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a795e15153ffc0b6cbb6f837842750a18">PatchKernel::binSortVertex</a>(<a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;Vertex&gt;</a> vertices, <span class="keywordtype">int</span> nBins)</div>
<div class="line"><a name="l03268"></a><span class="lineno"> 3268</span>&#160;{</div>
<div class="line"><a name="l03269"></a><span class="lineno"> 3269</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03270"></a><span class="lineno"> 3270</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l03271"></a><span class="lineno"> 3271</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03272"></a><span class="lineno"> 3272</span>&#160;</div>
<div class="line"><a name="l03273"></a><span class="lineno"> 3273</span>&#160;    <span class="comment">// Local variables</span></div>
<div class="line"><a name="l03274"></a><span class="lineno"> 3274</span>&#160;    <span class="keywordtype">double</span>                              dx, dy, dz;</div>
<div class="line"><a name="l03275"></a><span class="lineno"> 3275</span>&#160;</div>
<div class="line"><a name="l03276"></a><span class="lineno"> 3276</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l03277"></a><span class="lineno"> 3277</span>&#160;    <span class="keywordtype">long</span>                                i, j, k;</div>
<div class="line"><a name="l03278"></a><span class="lineno"> 3278</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;Vertex&gt;::iterator</a>     V, E = vertices.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">end</a>();</div>
<div class="line"><a name="l03279"></a><span class="lineno"> 3279</span>&#160;</div>
<div class="line"><a name="l03280"></a><span class="lineno"> 3280</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03281"></a><span class="lineno"> 3281</span>&#160;    <span class="comment">// ASSOCIATE EACH VERTEX WITH A BIN                                       //</span></div>
<div class="line"><a name="l03282"></a><span class="lineno"> 3282</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03283"></a><span class="lineno"> 3283</span>&#160;</div>
<div class="line"><a name="l03284"></a><span class="lineno"> 3284</span>&#160;    <span class="comment">// Update bounding box</span></div>
<div class="line"><a name="l03285"></a><span class="lineno"> 3285</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a">updateBoundingBox</a>();</div>
<div class="line"><a name="l03286"></a><span class="lineno"> 3286</span>&#160;</div>
<div class="line"><a name="l03287"></a><span class="lineno"> 3287</span>&#160;    <span class="comment">// Bin&#39;s spacing</span></div>
<div class="line"><a name="l03288"></a><span class="lineno"> 3288</span>&#160;    dx = <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a>(1.0e-12, m_boxMaxPoint[0] - m_boxMinPoint[0]) / ((double) nBins);</div>
<div class="line"><a name="l03289"></a><span class="lineno"> 3289</span>&#160;    dy = <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a>(1.0e-12, m_boxMaxPoint[1] - m_boxMinPoint[1]) / ((double) nBins);</div>
<div class="line"><a name="l03290"></a><span class="lineno"> 3290</span>&#160;    dz = <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a>(1.0e-12, m_boxMaxPoint[2] - m_boxMinPoint[2]) / ((double) nBins);</div>
<div class="line"><a name="l03291"></a><span class="lineno"> 3291</span>&#160;</div>
<div class="line"><a name="l03292"></a><span class="lineno"> 3292</span>&#160;    <span class="comment">// Loop over vertices</span></div>
<div class="line"><a name="l03293"></a><span class="lineno"> 3293</span>&#160;    std::unordered_map&lt;long, long&gt; bin_index;</div>
<div class="line"><a name="l03294"></a><span class="lineno"> 3294</span>&#160;    <span class="keywordflow">for</span> (V = vertices.<a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">begin</a>(); V != E; ++V) {</div>
<div class="line"><a name="l03295"></a><span class="lineno"> 3295</span>&#160;        i = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>(nBins - 1L, <span class="keywordtype">long</span>((V-&gt;getCoords()[0] - m_boxMinPoint[0]) / dx));</div>
<div class="line"><a name="l03296"></a><span class="lineno"> 3296</span>&#160;        j = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>(nBins - 1L, <span class="keywordtype">long</span>((V-&gt;getCoords()[1] - m_boxMinPoint[1]) / dy));</div>
<div class="line"><a name="l03297"></a><span class="lineno"> 3297</span>&#160;        k = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>(nBins - 1L, <span class="keywordtype">long</span>((V-&gt;getCoords()[2] - m_boxMinPoint[2]) / dz));</div>
<div class="line"><a name="l03298"></a><span class="lineno"> 3298</span>&#160;        bin_index[V-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>()] = nBins * nBins * k + nBins * j + i;</div>
<div class="line"><a name="l03299"></a><span class="lineno"> 3299</span>&#160;    }</div>
<div class="line"><a name="l03300"></a><span class="lineno"> 3300</span>&#160;</div>
<div class="line"><a name="l03301"></a><span class="lineno"> 3301</span>&#160;    <span class="keywordflow">return</span> bin_index;</div>
<div class="line"><a name="l03302"></a><span class="lineno"> 3302</span>&#160;}</div>
<div class="line"><a name="l03303"></a><span class="lineno"> 3303</span>&#160;</div>
<div class="line"><a name="l03309"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583"> 3309</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">PatchKernel::translate</a>(std::array&lt;double, 3&gt; translation)</div>
<div class="line"><a name="l03310"></a><span class="lineno"> 3310</span>&#160;{</div>
<div class="line"><a name="l03311"></a><span class="lineno"> 3311</span>&#160;    <span class="comment">// Translate the patch</span></div>
<div class="line"><a name="l03312"></a><span class="lineno"> 3312</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l03313"></a><span class="lineno"> 3313</span>&#160;        vertex.translate(translation);</div>
<div class="line"><a name="l03314"></a><span class="lineno"> 3314</span>&#160;    }</div>
<div class="line"><a name="l03315"></a><span class="lineno"> 3315</span>&#160;</div>
<div class="line"><a name="l03316"></a><span class="lineno"> 3316</span>&#160;    <span class="comment">// Update the bounding box</span></div>
<div class="line"><a name="l03317"></a><span class="lineno"> 3317</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">isBoundingBoxFrozen</a>() || <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">isBoundingBoxDirty</a>()) {</div>
<div class="line"><a name="l03318"></a><span class="lineno"> 3318</span>&#160;        m_boxMinPoint += translation;</div>
<div class="line"><a name="l03319"></a><span class="lineno"> 3319</span>&#160;        m_boxMaxPoint += translation;</div>
<div class="line"><a name="l03320"></a><span class="lineno"> 3320</span>&#160;    }</div>
<div class="line"><a name="l03321"></a><span class="lineno"> 3321</span>&#160;}</div>
<div class="line"><a name="l03322"></a><span class="lineno"> 3322</span>&#160;</div>
<div class="line"><a name="l03330"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ade4be962dcde5afef2fdf6c8836a02a6"> 3330</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">PatchKernel::translate</a>(<span class="keywordtype">double</span> sx, <span class="keywordtype">double</span> sy, <span class="keywordtype">double</span> sz)</div>
<div class="line"><a name="l03331"></a><span class="lineno"> 3331</span>&#160;{</div>
<div class="line"><a name="l03332"></a><span class="lineno"> 3332</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">translate</a>({{sx, sy, sz}});</div>
<div class="line"><a name="l03333"></a><span class="lineno"> 3333</span>&#160;}</div>
<div class="line"><a name="l03334"></a><span class="lineno"> 3334</span>&#160;</div>
<div class="line"><a name="l03342"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804"> 3342</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">PatchKernel::scale</a>(std::array&lt;double, 3&gt; scaling)</div>
<div class="line"><a name="l03343"></a><span class="lineno"> 3343</span>&#160;{</div>
<div class="line"><a name="l03344"></a><span class="lineno"> 3344</span>&#160;    <span class="comment">// Scale the patch</span></div>
<div class="line"><a name="l03345"></a><span class="lineno"> 3345</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l03346"></a><span class="lineno"> 3346</span>&#160;        vertex.scale(scaling, m_boxMinPoint);</div>
<div class="line"><a name="l03347"></a><span class="lineno"> 3347</span>&#160;    }</div>
<div class="line"><a name="l03348"></a><span class="lineno"> 3348</span>&#160;</div>
<div class="line"><a name="l03349"></a><span class="lineno"> 3349</span>&#160;    <span class="comment">// Update the bounding box</span></div>
<div class="line"><a name="l03350"></a><span class="lineno"> 3350</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">isBoundingBoxFrozen</a>() || <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">isBoundingBoxDirty</a>()) {</div>
<div class="line"><a name="l03351"></a><span class="lineno"> 3351</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 3; ++k) {</div>
<div class="line"><a name="l03352"></a><span class="lineno"> 3352</span>&#160;            m_boxMaxPoint[k] = m_boxMinPoint[k] + scaling[k] * (m_boxMaxPoint[k] - m_boxMinPoint[k]);</div>
<div class="line"><a name="l03353"></a><span class="lineno"> 3353</span>&#160;        }</div>
<div class="line"><a name="l03354"></a><span class="lineno"> 3354</span>&#160;    }</div>
<div class="line"><a name="l03355"></a><span class="lineno"> 3355</span>&#160;}</div>
<div class="line"><a name="l03356"></a><span class="lineno"> 3356</span>&#160;</div>
<div class="line"><a name="l03364"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a972e1d64c3c06696477bb2d1d8f0ae6a"> 3364</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">PatchKernel::scale</a>(<span class="keywordtype">double</span> scaling)</div>
<div class="line"><a name="l03365"></a><span class="lineno"> 3365</span>&#160;{</div>
<div class="line"><a name="l03366"></a><span class="lineno"> 3366</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">scale</a>({{scaling, scaling, scaling}});</div>
<div class="line"><a name="l03367"></a><span class="lineno"> 3367</span>&#160;}</div>
<div class="line"><a name="l03368"></a><span class="lineno"> 3368</span>&#160;</div>
<div class="line"><a name="l03376"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ab7cf5450652e29540641d59216de262d"> 3376</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">PatchKernel::scale</a>(<span class="keywordtype">double</span> sx, <span class="keywordtype">double</span> sy, <span class="keywordtype">double</span> sz)</div>
<div class="line"><a name="l03377"></a><span class="lineno"> 3377</span>&#160;{</div>
<div class="line"><a name="l03378"></a><span class="lineno"> 3378</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">scale</a>({{sx, sy, sz}});</div>
<div class="line"><a name="l03379"></a><span class="lineno"> 3379</span>&#160;}</div>
<div class="line"><a name="l03380"></a><span class="lineno"> 3380</span>&#160;</div>
<div class="line"><a name="l03387"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a74e36ccf62ed8806d0d94d453402f593"> 3387</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a74e36ccf62ed8806d0d94d453402f593">PatchKernel::setTol</a>(<span class="keywordtype">double</span> tolerance)</div>
<div class="line"><a name="l03388"></a><span class="lineno"> 3388</span>&#160;{</div>
<div class="line"><a name="l03389"></a><span class="lineno"> 3389</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">_setTol</a>(tolerance);</div>
<div class="line"><a name="l03390"></a><span class="lineno"> 3390</span>&#160;</div>
<div class="line"><a name="l03391"></a><span class="lineno"> 3391</span>&#160;    m_hasCustomTolerance = <span class="keyword">true</span>;</div>
<div class="line"><a name="l03392"></a><span class="lineno"> 3392</span>&#160;}</div>
<div class="line"><a name="l03393"></a><span class="lineno"> 3393</span>&#160;</div>
<div class="line"><a name="l03400"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f"> 3400</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">PatchKernel::_setTol</a>(<span class="keywordtype">double</span> tolerance)</div>
<div class="line"><a name="l03401"></a><span class="lineno"> 3401</span>&#160;{</div>
<div class="line"><a name="l03402"></a><span class="lineno"> 3402</span>&#160;    m_tolerance = tolerance;</div>
<div class="line"><a name="l03403"></a><span class="lineno"> 3403</span>&#160;}</div>
<div class="line"><a name="l03404"></a><span class="lineno"> 3404</span>&#160;</div>
<div class="line"><a name="l03410"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1"> 3410</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">PatchKernel::getTol</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l03411"></a><span class="lineno"> 3411</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03412"></a><span class="lineno"> 3412</span>&#160;    <span class="keywordflow">return</span> m_tolerance;</div>
<div class="line"><a name="l03413"></a><span class="lineno"> 3413</span>&#160;}</div>
<div class="line"><a name="l03414"></a><span class="lineno"> 3414</span>&#160;</div>
<div class="line"><a name="l03418"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a1bbac26fd3071ef417afdd4998a95f59"> 3418</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1bbac26fd3071ef417afdd4998a95f59">PatchKernel::resetTol</a>()</div>
<div class="line"><a name="l03419"></a><span class="lineno"> 3419</span>&#160;{</div>
<div class="line"><a name="l03420"></a><span class="lineno"> 3420</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#abda063fad64469d0f918fbd985c91955">_resetTol</a>();</div>
<div class="line"><a name="l03421"></a><span class="lineno"> 3421</span>&#160;</div>
<div class="line"><a name="l03422"></a><span class="lineno"> 3422</span>&#160;    m_hasCustomTolerance = <span class="keyword">false</span>;</div>
<div class="line"><a name="l03423"></a><span class="lineno"> 3423</span>&#160;}</div>
<div class="line"><a name="l03424"></a><span class="lineno"> 3424</span>&#160;</div>
<div class="line"><a name="l03428"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#abda063fad64469d0f918fbd985c91955"> 3428</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#abda063fad64469d0f918fbd985c91955">PatchKernel::_resetTol</a>()</div>
<div class="line"><a name="l03429"></a><span class="lineno"> 3429</span>&#160;{</div>
<div class="line"><a name="l03430"></a><span class="lineno"> 3430</span>&#160;    m_tolerance = 1;</div>
<div class="line"><a name="l03431"></a><span class="lineno"> 3431</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 3; ++k) {</div>
<div class="line"><a name="l03432"></a><span class="lineno"> 3432</span>&#160;        m_tolerance = <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::max</a>(m_boxMaxPoint[k] - m_boxMinPoint[k], m_tolerance);</div>
<div class="line"><a name="l03433"></a><span class="lineno"> 3433</span>&#160;    }</div>
<div class="line"><a name="l03434"></a><span class="lineno"> 3434</span>&#160;    m_tolerance *= DEFAULT_TOLERANCE;</div>
<div class="line"><a name="l03435"></a><span class="lineno"> 3435</span>&#160;}</div>
<div class="line"><a name="l03436"></a><span class="lineno"> 3436</span>&#160;</div>
<div class="line"><a name="l03443"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aebc446887158556566ded86f91d440a2"> 3443</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aebc446887158556566ded86f91d440a2">PatchKernel::isTolCustomized</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l03444"></a><span class="lineno"> 3444</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03445"></a><span class="lineno"> 3445</span>&#160;    <span class="keywordflow">return</span> m_hasCustomTolerance;</div>
<div class="line"><a name="l03446"></a><span class="lineno"> 3446</span>&#160;}</div>
<div class="line"><a name="l03447"></a><span class="lineno"> 3447</span>&#160;</div>
<div class="line"><a name="l03456"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#aa3129889fa87122716437af6de7f6f2d"> 3456</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aa3129889fa87122716437af6de7f6f2d">PatchKernel::extractEnvelope</a>(<a class="code" href="classbitpit_1_1PatchKernel.xhtml">PatchKernel</a> &amp;envelope)<span class="keyword"> const</span></div>
<div class="line"><a name="l03457"></a><span class="lineno"> 3457</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03458"></a><span class="lineno"> 3458</span>&#160;</div>
<div class="line"><a name="l03459"></a><span class="lineno"> 3459</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03460"></a><span class="lineno"> 3460</span>&#160;    <span class="comment">// RESIZE DATA STRUCTURES                                                 //</span></div>
<div class="line"><a name="l03461"></a><span class="lineno"> 3461</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03462"></a><span class="lineno"> 3462</span>&#160;    envelope.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">reserveVertices</a>(envelope.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>() + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5f95d54d53b7566455fe364e39fe73df">countFreeVertices</a>());</div>
<div class="line"><a name="l03463"></a><span class="lineno"> 3463</span>&#160;    envelope.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">reserveCells</a>(envelope.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>() + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a73f20bde12f1178ae67ba0b73e055583">countFreeFaces</a>());</div>
<div class="line"><a name="l03464"></a><span class="lineno"> 3464</span>&#160;</div>
<div class="line"><a name="l03465"></a><span class="lineno"> 3465</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03466"></a><span class="lineno"> 3466</span>&#160;    <span class="comment">// LOOP OVER CELLS                                                        //</span></div>
<div class="line"><a name="l03467"></a><span class="lineno"> 3467</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03468"></a><span class="lineno"> 3468</span>&#160;    std::unordered_map&lt;long, long&gt; vertexMap;</div>
<div class="line"><a name="l03469"></a><span class="lineno"> 3469</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03470"></a><span class="lineno"> 3470</span>&#160;        <span class="keywordtype">int</span> nCellFaces = cell.getFaceCount();</div>
<div class="line"><a name="l03471"></a><span class="lineno"> 3471</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nCellFaces; ++i) {</div>
<div class="line"><a name="l03472"></a><span class="lineno"> 3472</span>&#160;            <span class="keywordflow">if</span> (!cell.isFaceBorder(i)) {</div>
<div class="line"><a name="l03473"></a><span class="lineno"> 3473</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l03474"></a><span class="lineno"> 3474</span>&#160;            }</div>
<div class="line"><a name="l03475"></a><span class="lineno"> 3475</span>&#160;</div>
<div class="line"><a name="l03476"></a><span class="lineno"> 3476</span>&#160;            <span class="comment">// Add face vertices to the envelope and get face</span></div>
<div class="line"><a name="l03477"></a><span class="lineno"> 3477</span>&#160;            <span class="comment">// connectivity in the envelope</span></div>
<div class="line"><a name="l03478"></a><span class="lineno"> 3478</span>&#160;            std::vector&lt;int&gt; faceLocalConnect = cell.getFaceLocalConnect(i);</div>
<div class="line"><a name="l03479"></a><span class="lineno"> 3479</span>&#160;            <span class="keywordtype">int</span> nFaceVertices = faceLocalConnect.size();</div>
<div class="line"><a name="l03480"></a><span class="lineno"> 3480</span>&#160;</div>
<div class="line"><a name="l03481"></a><span class="lineno"> 3481</span>&#160;            std::unique_ptr&lt;long[]&gt; faceEnvelopeConnect = std::unique_ptr&lt;long[]&gt;(<span class="keyword">new</span> <span class="keywordtype">long</span>[nFaceVertices]);</div>
<div class="line"><a name="l03482"></a><span class="lineno"> 3482</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nFaceVertices; ++j) {</div>
<div class="line"><a name="l03483"></a><span class="lineno"> 3483</span>&#160;                <span class="keywordtype">long</span> vertexId = cell.getVertex(faceLocalConnect[j]);</div>
<div class="line"><a name="l03484"></a><span class="lineno"> 3484</span>&#160;</div>
<div class="line"><a name="l03485"></a><span class="lineno"> 3485</span>&#160;                <span class="comment">// If the vertex is not yet in the envelope</span></div>
<div class="line"><a name="l03486"></a><span class="lineno"> 3486</span>&#160;                <span class="comment">// add it.</span></div>
<div class="line"><a name="l03487"></a><span class="lineno"> 3487</span>&#160;                <span class="keywordflow">if</span> (vertexMap.count(vertexId) == 0) {</div>
<div class="line"><a name="l03488"></a><span class="lineno"> 3488</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">getVertex</a>(vertexId);</div>
<div class="line"><a name="l03489"></a><span class="lineno"> 3489</span>&#160;                    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a> envelopeVertex = envelope.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">addVertex</a>(vertex);</div>
<div class="line"><a name="l03490"></a><span class="lineno"> 3490</span>&#160;                    vertexMap[vertexId] = envelopeVertex-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l03491"></a><span class="lineno"> 3491</span>&#160;                }</div>
<div class="line"><a name="l03492"></a><span class="lineno"> 3492</span>&#160;</div>
<div class="line"><a name="l03493"></a><span class="lineno"> 3493</span>&#160;                <span class="comment">// Update face ace connectivity in the envelope</span></div>
<div class="line"><a name="l03494"></a><span class="lineno"> 3494</span>&#160;                faceEnvelopeConnect[j] = vertexMap.at(vertexId);</div>
<div class="line"><a name="l03495"></a><span class="lineno"> 3495</span>&#160;            }</div>
<div class="line"><a name="l03496"></a><span class="lineno"> 3496</span>&#160;</div>
<div class="line"><a name="l03497"></a><span class="lineno"> 3497</span>&#160;            <span class="comment">// Add face to envelope</span></div>
<div class="line"><a name="l03498"></a><span class="lineno"> 3498</span>&#160;            <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> faceType = cell.getFaceType(i);</div>
<div class="line"><a name="l03499"></a><span class="lineno"> 3499</span>&#160;            envelope.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">addCell</a>(faceType, <span class="keyword">true</span>, std::move(faceEnvelopeConnect));</div>
<div class="line"><a name="l03500"></a><span class="lineno"> 3500</span>&#160;        }</div>
<div class="line"><a name="l03501"></a><span class="lineno"> 3501</span>&#160;    }</div>
<div class="line"><a name="l03502"></a><span class="lineno"> 3502</span>&#160;}</div>
<div class="line"><a name="l03503"></a><span class="lineno"> 3503</span>&#160;</div>
<div class="line"><a name="l03511"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a9ca829ceca02a4615db90d8e28071695"> 3511</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9ca829ceca02a4615db90d8e28071695">PatchKernel::displayTopologyStats</a>(std::ostream &amp;out, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padding)<span class="keyword"> const</span></div>
<div class="line"><a name="l03512"></a><span class="lineno"> 3512</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03513"></a><span class="lineno"> 3513</span>&#160;    std::string indent = std::string(padding, <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l03514"></a><span class="lineno"> 3514</span>&#160;</div>
<div class="line"><a name="l03515"></a><span class="lineno"> 3515</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03516"></a><span class="lineno"> 3516</span>&#160;    <span class="comment">// VERTEX STATS                                                           //</span></div>
<div class="line"><a name="l03517"></a><span class="lineno"> 3517</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03518"></a><span class="lineno"> 3518</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;Vertices --------------------------------&quot;</span>     &lt;&lt; endl;</div>
<div class="line"><a name="l03519"></a><span class="lineno"> 3519</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # vertices        &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>()      &lt;&lt; endl;</div>
<div class="line"><a name="l03520"></a><span class="lineno"> 3520</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # orphan vertices &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a2468e31c9c405646bfe87349777c5319">countOrphanVertices</a>() &lt;&lt; endl;</div>
<div class="line"><a name="l03521"></a><span class="lineno"> 3521</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # free vertices   &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5f95d54d53b7566455fe364e39fe73df">countFreeVertices</a>()   &lt;&lt; endl;</div>
<div class="line"><a name="l03522"></a><span class="lineno"> 3522</span>&#160;        <span class="comment">//out &lt;&lt; indent&lt;&lt; &quot;  # free vertices   &quot; &lt;&lt; countDoubleVertices()   &lt;&lt; endl;</span></div>
<div class="line"><a name="l03523"></a><span class="lineno"> 3523</span>&#160;</div>
<div class="line"><a name="l03524"></a><span class="lineno"> 3524</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03525"></a><span class="lineno"> 3525</span>&#160;    <span class="comment">// FACE STATS                                                             //</span></div>
<div class="line"><a name="l03526"></a><span class="lineno"> 3526</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03527"></a><span class="lineno"> 3527</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;Faces -----------------------------------&quot;</span>     &lt;&lt; endl;</div>
<div class="line"><a name="l03528"></a><span class="lineno"> 3528</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # faces           &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4a727482a16bcd0a45800bc96f02be25">countFaces</a>()          &lt;&lt; endl;</div>
<div class="line"><a name="l03529"></a><span class="lineno"> 3529</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # free faces      &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a73f20bde12f1178ae67ba0b73e055583">countFreeFaces</a>()      &lt;&lt; endl;</div>
<div class="line"><a name="l03530"></a><span class="lineno"> 3530</span>&#160;</div>
<div class="line"><a name="l03531"></a><span class="lineno"> 3531</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03532"></a><span class="lineno"> 3532</span>&#160;    <span class="comment">// CELLS STATS                                                            //</span></div>
<div class="line"><a name="l03533"></a><span class="lineno"> 3533</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l03534"></a><span class="lineno"> 3534</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;Cells -----------------------------------&quot;</span>     &lt;&lt; endl;</div>
<div class="line"><a name="l03535"></a><span class="lineno"> 3535</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # cells           &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>()        &lt;&lt; endl;</div>
<div class="line"><a name="l03536"></a><span class="lineno"> 3536</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # orphan cells    &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a15fb6ad8bef51c0e50feb13bc34f9c3c">countOrphanCells</a>()    &lt;&lt; endl;</div>
<div class="line"><a name="l03537"></a><span class="lineno"> 3537</span>&#160;    out &lt;&lt; indent&lt;&lt; <span class="stringliteral">&quot;  # free cells      &quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3b64649db5ab7ff05006db39933358e7">countFreeCells</a>()      &lt;&lt; endl;</div>
<div class="line"><a name="l03538"></a><span class="lineno"> 3538</span>&#160;        <span class="comment">//out &lt;&lt; indent&lt;&lt; &quot;  # free vertices   &quot; &lt;&lt; countDoubleCells()   &lt;&lt; endl;</span></div>
<div class="line"><a name="l03539"></a><span class="lineno"> 3539</span>&#160;}</div>
<div class="line"><a name="l03540"></a><span class="lineno"> 3540</span>&#160;</div>
<div class="line"><a name="l03548"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a4f0731fe8d88d9ea1cbf7208c5f2a30e"> 3548</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4f0731fe8d88d9ea1cbf7208c5f2a30e">PatchKernel::displayVertices</a>(std::ostream &amp;out, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padding)<span class="keyword"> const</span></div>
<div class="line"><a name="l03549"></a><span class="lineno"> 3549</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03550"></a><span class="lineno"> 3550</span>&#160;    std::string indent = std::string(padding, <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l03551"></a><span class="lineno"> 3551</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l03552"></a><span class="lineno"> 3552</span>&#160;        out &lt;&lt; indent &lt;&lt; <span class="stringliteral">&quot;vertex: &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l03553"></a><span class="lineno"> 3553</span>&#160;        vertex.display(out, padding + 2);</div>
<div class="line"><a name="l03554"></a><span class="lineno"> 3554</span>&#160;    }</div>
<div class="line"><a name="l03555"></a><span class="lineno"> 3555</span>&#160;}</div>
<div class="line"><a name="l03556"></a><span class="lineno"> 3556</span>&#160;</div>
<div class="line"><a name="l03564"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a698827321f531730c1e6a3ce636ecc00"> 3564</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a698827321f531730c1e6a3ce636ecc00">PatchKernel::displayCells</a>(std::ostream &amp;out, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padding)<span class="keyword"> const</span></div>
<div class="line"><a name="l03565"></a><span class="lineno"> 3565</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03566"></a><span class="lineno"> 3566</span>&#160;    std::string indent = std::string(padding, <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l03567"></a><span class="lineno"> 3567</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03568"></a><span class="lineno"> 3568</span>&#160;        out &lt;&lt; indent &lt;&lt; <span class="stringliteral">&quot;cell: &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l03569"></a><span class="lineno"> 3569</span>&#160;        cell.display(out, padding + 2);</div>
<div class="line"><a name="l03570"></a><span class="lineno"> 3570</span>&#160;    }</div>
<div class="line"><a name="l03571"></a><span class="lineno"> 3571</span>&#160;}</div>
<div class="line"><a name="l03572"></a><span class="lineno"> 3572</span>&#160;</div>
<div class="line"><a name="l03580"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a6aa1d90b7c1d48092721e8cebe987638"> 3580</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6aa1d90b7c1d48092721e8cebe987638">PatchKernel::displayInterfaces</a>(std::ostream &amp;out, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> padding)<span class="keyword"> const</span></div>
<div class="line"><a name="l03581"></a><span class="lineno"> 3581</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l03582"></a><span class="lineno"> 3582</span>&#160;    std::string indent = std::string(padding, <span class="charliteral">&#39; &#39;</span>);</div>
<div class="line"><a name="l03583"></a><span class="lineno"> 3583</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;interface : m_interfaces) {</div>
<div class="line"><a name="l03584"></a><span class="lineno"> 3584</span>&#160;        out &lt;&lt; indent &lt;&lt; <span class="stringliteral">&quot;interface: &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l03585"></a><span class="lineno"> 3585</span>&#160;        interface.display(out, padding + 2);</div>
<div class="line"><a name="l03586"></a><span class="lineno"> 3586</span>&#160;    }</div>
<div class="line"><a name="l03587"></a><span class="lineno"> 3587</span>&#160;}</div>
<div class="line"><a name="l03588"></a><span class="lineno"> 3588</span>&#160;</div>
<div class="line"><a name="l03594"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a4b311f735eded357bfe2758cf9cbb88c"> 3594</a></span>&#160;<a class="code" href="classbitpit_1_1VTKUnstructuredGrid.xhtml">VTKUnstructuredGrid</a> &amp; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4b311f735eded357bfe2758cf9cbb88c">PatchKernel::getVTK</a>()</div>
<div class="line"><a name="l03595"></a><span class="lineno"> 3595</span>&#160;{</div>
<div class="line"><a name="l03596"></a><span class="lineno"> 3596</span>&#160;    <span class="keywordflow">return</span> m_vtk;</div>
<div class="line"><a name="l03597"></a><span class="lineno"> 3597</span>&#160;}</div>
<div class="line"><a name="l03598"></a><span class="lineno"> 3598</span>&#160;</div>
<div class="line"><a name="l03609"></a><span class="lineno"><a class="line" href="classbitpit_1_1PatchKernel.xhtml#a4829d8691cf6a9ffdbb65f85d24d1dbc"> 3609</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4829d8691cf6a9ffdbb65f85d24d1dbc">PatchKernel::flushData</a>(std::fstream &amp;stream, std::string name, <a class="code" href="group__VTKEnums.xhtml#ga2197e628becd3f4d3093e1f681b5deb8">VTKFormat</a> format)</div>
<div class="line"><a name="l03610"></a><span class="lineno"> 3610</span>&#160;{</div>
<div class="line"><a name="l03611"></a><span class="lineno"> 3611</span>&#160;    assert(format == VTKFormat::APPENDED);</div>
<div class="line"><a name="l03612"></a><span class="lineno"> 3612</span>&#160;    BITPIT_UNUSED(format);</div>
<div class="line"><a name="l03613"></a><span class="lineno"> 3613</span>&#160;</div>
<div class="line"><a name="l03614"></a><span class="lineno"> 3614</span>&#160;    <span class="keyword">static</span> std::unordered_map&lt;long, long&gt; vertexMap;</div>
<div class="line"><a name="l03615"></a><span class="lineno"> 3615</span>&#160;</div>
<div class="line"><a name="l03616"></a><span class="lineno"> 3616</span>&#160;    <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;Points&quot;</span>) {</div>
<div class="line"><a name="l03617"></a><span class="lineno"> 3617</span>&#160;        <span class="keywordtype">long</span> vertexId = 0;</div>
<div class="line"><a name="l03618"></a><span class="lineno"> 3618</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l03619"></a><span class="lineno"> 3619</span>&#160;            vertexMap[vertex.getId()] = vertexId++;</div>
<div class="line"><a name="l03620"></a><span class="lineno"> 3620</span>&#160;</div>
<div class="line"><a name="l03621"></a><span class="lineno"> 3621</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, vertex.getCoords());</div>
<div class="line"><a name="l03622"></a><span class="lineno"> 3622</span>&#160;        }</div>
<div class="line"><a name="l03623"></a><span class="lineno"> 3623</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;offsets&quot;</span>) {</div>
<div class="line"><a name="l03624"></a><span class="lineno"> 3624</span>&#160;        <span class="keywordtype">int</span> offset = 0;</div>
<div class="line"><a name="l03625"></a><span class="lineno"> 3625</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03626"></a><span class="lineno"> 3626</span>&#160;            offset += cell.getInfo().nVertices;</div>
<div class="line"><a name="l03627"></a><span class="lineno"> 3627</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, offset);</div>
<div class="line"><a name="l03628"></a><span class="lineno"> 3628</span>&#160;        }</div>
<div class="line"><a name="l03629"></a><span class="lineno"> 3629</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;types&quot;</span>) {</div>
<div class="line"><a name="l03630"></a><span class="lineno"> 3630</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03631"></a><span class="lineno"> 3631</span>&#160;            <a class="code" href="group__VTKEnums.xhtml#ga2224b32dc1c12ab1eb65044a1ed02c08">VTKElementType</a> VTKType;</div>
<div class="line"><a name="l03632"></a><span class="lineno"> 3632</span>&#160;            <span class="keywordflow">switch</span> (cell.getType())  {</div>
<div class="line"><a name="l03633"></a><span class="lineno"> 3633</span>&#160;</div>
<div class="line"><a name="l03634"></a><span class="lineno"> 3634</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760">ElementInfo::VERTEX</a>:</div>
<div class="line"><a name="l03635"></a><span class="lineno"> 3635</span>&#160;                VTKType = VTKElementType::VERTEX;</div>
<div class="line"><a name="l03636"></a><span class="lineno"> 3636</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03637"></a><span class="lineno"> 3637</span>&#160;</div>
<div class="line"><a name="l03638"></a><span class="lineno"> 3638</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">ElementInfo::LINE</a>:</div>
<div class="line"><a name="l03639"></a><span class="lineno"> 3639</span>&#160;                VTKType = VTKElementType::LINE;</div>
<div class="line"><a name="l03640"></a><span class="lineno"> 3640</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03641"></a><span class="lineno"> 3641</span>&#160;</div>
<div class="line"><a name="l03642"></a><span class="lineno"> 3642</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9">ElementInfo::TRIANGLE</a>:</div>
<div class="line"><a name="l03643"></a><span class="lineno"> 3643</span>&#160;                VTKType = VTKElementType::TRIANGLE;</div>
<div class="line"><a name="l03644"></a><span class="lineno"> 3644</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03645"></a><span class="lineno"> 3645</span>&#160;</div>
<div class="line"><a name="l03646"></a><span class="lineno"> 3646</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>:</div>
<div class="line"><a name="l03647"></a><span class="lineno"> 3647</span>&#160;                VTKType = VTKElementType::PIXEL;</div>
<div class="line"><a name="l03648"></a><span class="lineno"> 3648</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03649"></a><span class="lineno"> 3649</span>&#160;</div>
<div class="line"><a name="l03650"></a><span class="lineno"> 3650</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593">ElementInfo::QUAD</a>:</div>
<div class="line"><a name="l03651"></a><span class="lineno"> 3651</span>&#160;                VTKType = VTKElementType::QUAD;</div>
<div class="line"><a name="l03652"></a><span class="lineno"> 3652</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03653"></a><span class="lineno"> 3653</span>&#160;</div>
<div class="line"><a name="l03654"></a><span class="lineno"> 3654</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa296aea314e438e5d63523e73bcb6632">ElementInfo::TETRA</a>:</div>
<div class="line"><a name="l03655"></a><span class="lineno"> 3655</span>&#160;                VTKType = VTKElementType::TETRA;</div>
<div class="line"><a name="l03656"></a><span class="lineno"> 3656</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03657"></a><span class="lineno"> 3657</span>&#160;</div>
<div class="line"><a name="l03658"></a><span class="lineno"> 3658</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">ElementInfo::VOXEL</a>:</div>
<div class="line"><a name="l03659"></a><span class="lineno"> 3659</span>&#160;                VTKType = VTKElementType::VOXEL;</div>
<div class="line"><a name="l03660"></a><span class="lineno"> 3660</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03661"></a><span class="lineno"> 3661</span>&#160;</div>
<div class="line"><a name="l03662"></a><span class="lineno"> 3662</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a46e10f2d03aee9fc457163f9a0dd76f1">ElementInfo::HEXAHEDRON</a>:</div>
<div class="line"><a name="l03663"></a><span class="lineno"> 3663</span>&#160;                VTKType = VTKElementType::HEXAHEDRON;</div>
<div class="line"><a name="l03664"></a><span class="lineno"> 3664</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03665"></a><span class="lineno"> 3665</span>&#160;</div>
<div class="line"><a name="l03666"></a><span class="lineno"> 3666</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314adaee0c207571074d3d5cbd50206f4d1f">ElementInfo::WEDGE</a>:</div>
<div class="line"><a name="l03667"></a><span class="lineno"> 3667</span>&#160;                VTKType = VTKElementType::WEDGE;</div>
<div class="line"><a name="l03668"></a><span class="lineno"> 3668</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03669"></a><span class="lineno"> 3669</span>&#160;</div>
<div class="line"><a name="l03670"></a><span class="lineno"> 3670</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a21d46412ce79246fd7f58ee6cb857e1f">ElementInfo::PYRAMID</a>:</div>
<div class="line"><a name="l03671"></a><span class="lineno"> 3671</span>&#160;                VTKType = VTKElementType::PYRAMID;</div>
<div class="line"><a name="l03672"></a><span class="lineno"> 3672</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03673"></a><span class="lineno"> 3673</span>&#160;</div>
<div class="line"><a name="l03674"></a><span class="lineno"> 3674</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l03675"></a><span class="lineno"> 3675</span>&#160;                VTKType = VTKElementType::UNDEFINED;</div>
<div class="line"><a name="l03676"></a><span class="lineno"> 3676</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l03677"></a><span class="lineno"> 3677</span>&#160;</div>
<div class="line"><a name="l03678"></a><span class="lineno"> 3678</span>&#160;            }</div>
<div class="line"><a name="l03679"></a><span class="lineno"> 3679</span>&#160;</div>
<div class="line"><a name="l03680"></a><span class="lineno"> 3680</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, (<span class="keywordtype">int</span>) VTKType);</div>
<div class="line"><a name="l03681"></a><span class="lineno"> 3681</span>&#160;        }</div>
<div class="line"><a name="l03682"></a><span class="lineno"> 3682</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;connectivity&quot;</span>) {</div>
<div class="line"><a name="l03683"></a><span class="lineno"> 3683</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03684"></a><span class="lineno"> 3684</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; cell.getInfo().nVertices; ++i) {</div>
<div class="line"><a name="l03685"></a><span class="lineno"> 3685</span>&#160;                <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, vertexMap.at(cell.getVertex(i)));</div>
<div class="line"><a name="l03686"></a><span class="lineno"> 3686</span>&#160;            }</div>
<div class="line"><a name="l03687"></a><span class="lineno"> 3687</span>&#160;        }</div>
<div class="line"><a name="l03688"></a><span class="lineno"> 3688</span>&#160;</div>
<div class="line"><a name="l03689"></a><span class="lineno"> 3689</span>&#160;        vertexMap.clear();</div>
<div class="line"><a name="l03690"></a><span class="lineno"> 3690</span>&#160;        std::unordered_map&lt;long, long&gt;().swap(vertexMap);</div>
<div class="line"><a name="l03691"></a><span class="lineno"> 3691</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;cellIndex&quot;</span>) {</div>
<div class="line"><a name="l03692"></a><span class="lineno"> 3692</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03693"></a><span class="lineno"> 3693</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, cell.getId());</div>
<div class="line"><a name="l03694"></a><span class="lineno"> 3694</span>&#160;        }</div>
<div class="line"><a name="l03695"></a><span class="lineno"> 3695</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;PID&quot;</span>) {</div>
<div class="line"><a name="l03696"></a><span class="lineno"> 3696</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03697"></a><span class="lineno"> 3697</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, cell.getPID());</div>
<div class="line"><a name="l03698"></a><span class="lineno"> 3698</span>&#160;        }</div>
<div class="line"><a name="l03699"></a><span class="lineno"> 3699</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;vertexIndex&quot;</span>) {</div>
<div class="line"><a name="l03700"></a><span class="lineno"> 3700</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classbitpit_1_1Vertex.xhtml">Vertex</a> &amp;vertex : m_vertices) {</div>
<div class="line"><a name="l03701"></a><span class="lineno"> 3701</span>&#160;            <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, vertex.getId());</div>
<div class="line"><a name="l03702"></a><span class="lineno"> 3702</span>&#160;        }</div>
<div class="line"><a name="l03703"></a><span class="lineno"> 3703</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l03704"></a><span class="lineno"> 3704</span>&#160;<span class="preprocessor"></span>    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (name == <span class="stringliteral">&quot;rank&quot;</span>) {</div>
<div class="line"><a name="l03705"></a><span class="lineno"> 3705</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell : m_cells) {</div>
<div class="line"><a name="l03706"></a><span class="lineno"> 3706</span>&#160;            <span class="keywordflow">if</span> (cell.isInterior()) {</div>
<div class="line"><a name="l03707"></a><span class="lineno"> 3707</span>&#160;                <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, m_rank);</div>
<div class="line"><a name="l03708"></a><span class="lineno"> 3708</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l03709"></a><span class="lineno"> 3709</span>&#160;                <a class="code" href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">genericIO::flushBINARY</a>(stream, m_ghostOwners.at(cell.getId()));</div>
<div class="line"><a name="l03710"></a><span class="lineno"> 3710</span>&#160;            }</div>
<div class="line"><a name="l03711"></a><span class="lineno"> 3711</span>&#160;        }</div>
<div class="line"><a name="l03712"></a><span class="lineno"> 3712</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l03713"></a><span class="lineno"> 3713</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l03714"></a><span class="lineno"> 3714</span>&#160;}</div>
<div class="line"><a name="l03715"></a><span class="lineno"> 3715</span>&#160;</div>
<div class="line"><a name="l03720"></a><span class="lineno"> 3720</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a66845d3df1aa4dd928c9eee2aabc412f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a66845d3df1aa4dd928c9eee2aabc412f">bitpit::PatchKernel::findCellVertexNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellVertexNeighs(const long &amp;id, bool complete=true) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01916">patch_kernel.cpp:1916</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a358ca8ea11e2b2b99844a589a1bb395c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a358ca8ea11e2b2b99844a589a1bb395c">bitpit::PatchKernel::getVertex</a></div><div class="ttdeci">Vertex &amp; getVertex(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00593">patch_kernel.cpp:593</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_abec9536084e41fefd7ff72e28981bb9c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#abec9536084e41fefd7ff72e28981bb9c">bitpit::PatchKernel::deleteOrphanVertices</a></div><div class="ttdeci">bool deleteOrphanVertices()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00881">patch_kernel.cpp:881</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a618377c0340d7e68a0ab2572275a5242"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">bitpit::PatchKernel::addCell</a></div><div class="ttdeci">CellIterator addCell(ElementInfo::Type type, const long &amp;id=Element::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01279">patch_kernel.cpp:1279</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator</a></div><div class="ttdoc">Iterator for the class PiercedVector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00057">piercedVector.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a778768bc1cea5e66f99b9bd8414f8583"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">bitpit::PatchKernel::translate</a></div><div class="ttdeci">virtual void translate(std::array&lt; double, 3 &gt; translation)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03309">patch_kernel.cpp:3309</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a56a95140e35ba70293d910837e63849d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a56a95140e35ba70293d910837e63849d">bitpit::PatchKernel::findFaceNeighCell</a></div><div class="ttdeci">void findFaceNeighCell(const long &amp;cell_idx, const long &amp;neigh_idx, int &amp;face_loc_idx, int &amp;intf_loc_idx)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02080">patch_kernel.cpp:2080</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ac52e8a82183a83aaff80e06a636d4e43"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ac52e8a82183a83aaff80e06a636d4e43">bitpit::PatchKernel::getInterface</a></div><div class="ttdeci">Interface &amp; getInterface(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02137">patch_kernel.cpp:2137</a></div></div>
<div class="ttc" id="classbitpit_1_1IndexGenerator_xhtml_ac2e3f60956058736cfdebef0d5afba4f"><div class="ttname"><a href="classbitpit_1_1IndexGenerator.xhtml#ac2e3f60956058736cfdebef0d5afba4f">bitpit::IndexGenerator::IndexGenerator</a></div><div class="ttdeci">IndexGenerator()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00055">patch_kernel.cpp:55</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5a23374e8cac5ebfe46acf6e6b3400e8"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5a23374e8cac5ebfe46acf6e6b3400e8">bitpit::PatchKernel::updateInterfaces</a></div><div class="ttdeci">virtual void updateInterfaces(const std::vector&lt; long &gt; &amp;cellIds, bool resetInterfaces=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02843">patch_kernel.cpp:2843</a></div></div>
<div class="ttc" id="group__VTKEnums_xhtml_ga2197e628becd3f4d3093e1f681b5deb8"><div class="ttname"><a href="group__VTKEnums.xhtml#ga2197e628becd3f4d3093e1f681b5deb8">bitpit::VTKFormat</a></div><div class="ttdeci">VTKFormat</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8hpp_source.xhtml#l00088">VTK.hpp:88</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af7320e75f9351b430bee6ee6f5b91553"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af7320e75f9351b430bee6ee6f5b91553">bitpit::PatchKernel::updateAdaption</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; updateAdaption(bool trackAdaption=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00216">patch_kernel.cpp:216</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a90dea5713f8fb884c0d08c78300818c4"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a90dea5713f8fb884c0d08c78300818c4">bitpit::PatchKernel::findCellEdgeNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellEdgeNeighs(const long &amp;id, bool complete=true) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01816">patch_kernel.cpp:1816</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a3a1edd7b839b26f6be70985d9f0931"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">bitpit::PatchKernel::addVertex</a></div><div class="ttdeci">VertexIterator addVertex(const std::array&lt; double, 3 &gt; &amp;coords, const long &amp;id=Vertex::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00685">patch_kernel.cpp:685</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a79a3d99a413dfca13d331ea30375d9cb"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a79a3d99a413dfca13d331ea30375d9cb">bitpit::PatchKernel::evalCellCentroid</a></div><div class="ttdeci">virtual std::array&lt; double, 3 &gt; evalCellCentroid(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02597">patch_kernel.cpp:2597</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a8e451a8f6f5a1f323bedb040231ad49f"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a8e451a8f6f5a1f323bedb040231ad49f">bitpit::Cell::getAdjacency</a></div><div class="ttdeci">long getAdjacency(const int &amp;face, const int &amp;index=0) const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00571">cell.cpp:571</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a7bd96cdfcd6ce1cddee04252824cd512"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a7bd96cdfcd6ce1cddee04252824cd512">bitpit::PatchKernel::clearBoundingBox</a></div><div class="ttdeci">void clearBoundingBox()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03025">patch_kernel.cpp:3025</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae28ec9687875e8032b8f2696fd6b8bf9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">bitpit::PatchKernel::getDimension</a></div><div class="ttdeci">int getDimension() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00551">patch_kernel.cpp:551</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_abe04a664c0338472ed6bc58b08766162"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#abe04a664c0338472ed6bc58b08766162">bitpit::PatchKernel::PatchKernel</a></div><div class="ttdeci">PatchKernel(const int &amp;id, const int &amp;dimension, bool epxert)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00135">patch_kernel.cpp:135</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ac2e364db3ad530203cf8fa322fb2c768"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ac2e364db3ad530203cf8fa322fb2c768">bitpit::PatchKernel::squeezeInterfaces</a></div><div class="ttdeci">bool squeezeInterfaces()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02564">patch_kernel.cpp:2564</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aadb08afb43e5e05056985084551f8f61"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aadb08afb43e5e05056985084551f8f61">bitpit::PatchKernel::setCellInternal</a></div><div class="ttdeci">bool setCellInternal(const long &amp;id, bool isInternal)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01533">patch_kernel.cpp:1533</a></div></div>
<div class="ttc" id="group__VTKEnums_xhtml_ga442bde5dd01b348dd5667ca73f5ffa73"><div class="ttname"><a href="group__VTKEnums.xhtml#ga442bde5dd01b348dd5667ca73f5ffa73">bitpit::VTKDataType</a></div><div class="ttdeci">VTKDataType</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8hpp_source.xhtml#l00070">VTK.hpp:70</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ad1e63f17f26ffb931517a252a23047a1"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">bitpit::PatchKernel::getTol</a></div><div class="ttdeci">double getTol() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03410">patch_kernel.cpp:3410</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9cd3eeb6d54f3a29dbc21eb92ded8dc6"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9cd3eeb6d54f3a29dbc21eb92ded8dc6">bitpit::PatchKernel::generateVertexId</a></div><div class="ttdeci">long generateVertexId()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00644">patch_kernel.cpp:644</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a6eed7fad2562a3087e34b66152981dd4"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">bitpit::PatchKernel::cellEnd</a></div><div class="ttdeci">CellIterator cellEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01150">patch_kernel.cpp:1150</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab1faa2bb8bf968d425d3cd30260b4d66"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab1faa2bb8bf968d425d3cd30260b4d66">bitpit::PatchKernel::updateAdjacencies</a></div><div class="ttdeci">virtual void updateAdjacencies(const std::vector&lt; long &gt; &amp;cellIds, bool resetAdjacencies=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02730">patch_kernel.cpp:2730</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a09f05bd39b2c35bb1afc2f193719144c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a09f05bd39b2c35bb1afc2f193719144c">bitpit::PatchKernel::moveInternal2Ghost</a></div><div class="ttdeci">CellIterator moveInternal2Ghost(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01555">patch_kernel.cpp:1555</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ac588184ef6e5d280a963a0fde8dcbdd3"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">bitpit::PatchKernel::getVertexCoords</a></div><div class="ttdeci">const std::array&lt; double, 3 &gt; &amp; getVertexCoords(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01007">patch_kernel.cpp:1007</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a972860080c1efbb92466f50580782b17"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a972860080c1efbb92466f50580782b17">bitpit::PatchKernel::resetInterfaces</a></div><div class="ttdeci">void resetInterfaces()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00321">patch_kernel.cpp:321</a></div></div>
<div class="ttc" id="classbitpit_1_1Vertex_xhtml_ac4d94a605657de0491eeee7befdf7577"><div class="ttname"><a href="classbitpit_1_1Vertex.xhtml#ac4d94a605657de0491eeee7befdf7577">bitpit::Vertex::setId</a></div><div class="ttdeci">void setId(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="vertex_8cpp_source.xhtml#l00158">vertex.cpp:158</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_afd674220b1f6a8dd4b24ee90e742e97c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#afd674220b1f6a8dd4b24ee90e742e97c">bitpit::PatchKernel::deleteVertex</a></div><div class="ttdeci">bool deleteVertex(const long &amp;id, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00750">patch_kernel.cpp:750</a></div></div>
<div class="ttc" id="classbitpit_1_1IndexGenerator_xhtml_ae8b6a5913402478d4b5c59d28cc97184"><div class="ttname"><a href="classbitpit_1_1IndexGenerator.xhtml#ae8b6a5913402478d4b5c59d28cc97184">bitpit::IndexGenerator::trashId</a></div><div class="ttdeci">void trashId(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00101">patch_kernel.cpp:101</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ac305e1c89cc6ac669a2b6481098af77d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ac305e1c89cc6ac669a2b6481098af77d">bitpit::PatchKernel::markCellForRefinement</a></div><div class="ttdeci">void markCellForRefinement(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00239">patch_kernel.cpp:239</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a80ebb508aadd1bc8405395fd06798bc8"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a80ebb508aadd1bc8405395fd06798bc8">bitpit::PatchKernel::isBoundingBoxFrozen</a></div><div class="ttdeci">bool isBoundingBoxFrozen() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03076">patch_kernel.cpp:3076</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af4ee7e8fca84bace7171038c37e8194e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">bitpit::PatchKernel::reserveVertices</a></div><div class="ttdeci">bool reserveVertices(size_t nVertices)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00345">patch_kernel.cpp:345</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml"><div class="ttname"><a href="classbitpit_1_1Element.xhtml">bitpit::Element</a></div><div class="ttdoc">The Element class provides an interface for defining elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00107">element.hpp:107</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af101fc33cf0e24716e772f885e98adbf"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">bitpit::PatchKernel::locatePoint</a></div><div class="ttdeci">long locatePoint(const double &amp;x, const double &amp;y, const double &amp;z)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02653">patch_kernel.cpp:2653</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a2c9f47001976ae86bc79707fe15fd7ce"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a2c9f47001976ae86bc79707fe15fd7ce">bitpit::Element::setId</a></div><div class="ttdeci">void setId(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01008">element.cpp:1008</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a795e15153ffc0b6cbb6f837842750a18"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a795e15153ffc0b6cbb6f837842750a18">bitpit::PatchKernel::binSortVertex</a></div><div class="ttdeci">std::unordered_map&lt; long, long &gt; binSortVertex(PiercedVector&lt; Vertex &gt; vertices, int nBins=128)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03267">patch_kernel.cpp:3267</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1ec9d99b50a6bc6326191fba0210c646"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">bitpit::PatchKernel::_findCellFaceNeighs</a></div><div class="ttdeci">virtual std::vector&lt; long &gt; _findCellFaceNeighs(const long &amp;id, const int &amp;face, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01787">patch_kernel.cpp:1787</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a2f95af18c9325379489d6f5805dc1ef5"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a2f95af18c9325379489d6f5805dc1ef5">bitpit::PatchKernel::write</a></div><div class="ttdeci">void write()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00421">patch_kernel.cpp:421</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a4780b9dbd457df6ff0ec35d26a63cd54"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a4780b9dbd457df6ff0ec35d26a63cd54">bitpit::Element::getEdgeLocalConnect</a></div><div class="ttdeci">std::vector&lt; int &gt; getEdgeLocalConnect(const int &amp;edge) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01182">element.cpp:1182</a></div></div>
<div class="ttc" id="classbitpit_1_1Vertex_xhtml"><div class="ttname"><a href="classbitpit_1_1Vertex.xhtml">bitpit::Vertex</a></div><div class="ttdoc">The Vertex class defines the vertexs. </div><div class="ttdef"><b>Definition:</b> <a href="vertex_8hpp_source.xhtml#l00042">vertex.hpp:42</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3de4e780714af6d900307638b37e6f3d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3de4e780714af6d900307638b37e6f3d">bitpit::PatchKernel::getCell</a></div><div class="ttdeci">Cell &amp; getCell(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01058">patch_kernel.cpp:1058</a></div></div>
<div class="ttc" id="namespacebitpit_1_1utils_xhtml_af1decd85ef09fca51526234dd9093663"><div class="ttname"><a href="namespacebitpit_1_1utils.xhtml#af1decd85ef09fca51526234dd9093663">bitpit::utils::eraseValue</a></div><div class="ttdeci">void eraseValue(std::vector&lt; T &gt; &amp;, const T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8tpp_source.xhtml#l00111">utils.tpp:111</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_af95f90cb1619d65d3613603079bafe44"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#af95f90cb1619d65d3613603079bafe44">bitpit::Cell::getInterfaceCount</a></div><div class="ttdeci">int getInterfaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00324">cell.cpp:324</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a237a1ebd36c7c5f92b88498e4b96aa2a"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a237a1ebd36c7c5f92b88498e4b96aa2a">bitpit::PatchKernel::findCellVertexOneRing</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellVertexOneRing(const long &amp;id, const int &amp;vertex) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02057">patch_kernel.cpp:2057</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_afcacf3259c4bef9de9e0ad2495941a28"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#afcacf3259c4bef9de9e0ad2495941a28">bitpit::PatchKernel::_findCellVertexNeighs</a></div><div class="ttdeci">virtual std::vector&lt; long &gt; _findCellVertexNeighs(const long &amp;id, const int &amp;vertex, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01985">patch_kernel.cpp:1985</a></div></div>
<div class="ttc" id="classbitpit_1_1IndexGenerator_xhtml_abbae2e22e3a5c65141f8fe70312b211f"><div class="ttname"><a href="classbitpit_1_1IndexGenerator.xhtml#abbae2e22e3a5c65141f8fe70312b211f">bitpit::IndexGenerator::getLastId</a></div><div class="ttdeci">long getLastId()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00089">patch_kernel.cpp:89</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a73d45283655d18a2a0ca10545883b2e2"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a73d45283655d18a2a0ca10545883b2e2">bitpit::Element::getFaceLocalConnect</a></div><div class="ttdeci">std::vector&lt; int &gt; getFaceLocalConnect(const int &amp;face) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01139">element.cpp:1139</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a28d3bc5f4e3995d05c219eb1b15f9915"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">bitpit::PatchKernel::vertexBegin</a></div><div class="ttdeci">VertexIterator vertexBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00624">patch_kernel.cpp:624</a></div></div>
<div class="ttc" id="classbitpit_1_1VTKUnstructuredGrid_xhtml_a35a2d26dac12929027dcf6fbaff48c4f"><div class="ttname"><a href="classbitpit_1_1VTKUnstructuredGrid.xhtml#a35a2d26dac12929027dcf6fbaff48c4f">bitpit::VTKUnstructuredGrid::setDimensions</a></div><div class="ttdeci">void setDimensions(uint64_t, uint64_t, uint64_t nconn_=0)</div><div class="ttdef"><b>Definition:</b> <a href="VTKUnstructured_8cpp_source.xhtml#l00194">VTKUnstructured.cpp:194</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a436decff7071770170b5fd73be2608f0"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a436decff7071770170b5fd73be2608f0">bitpit::PatchKernel::squeezeCells</a></div><div class="ttdeci">bool squeezeCells()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02546">patch_kernel.cpp:2546</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ad590d2251996ef44aad5c79fea68277f"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ad590d2251996ef44aad5c79fea68277f">bitpit::Cell::setAdjacency</a></div><div class="ttdeci">void setAdjacency(const int &amp;face, const int &amp;index, const long &amp;adjacencies)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00485">cell.cpp:485</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_af6fa1001174a82ebab7b0d0003af4c77"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#af6fa1001174a82ebab7b0d0003af4c77">bitpit::Element::setVertex</a></div><div class="ttdeci">void setVertex(const int &amp;index, const long &amp;vertex)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01261">element.cpp:1261</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a35a212d743e782d66e9f6372b96869f3"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a35a212d743e782d66e9f6372b96869f3">bitpit::PatchKernel::ghostEnd</a></div><div class="ttdeci">CellIterator ghostEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01190">patch_kernel.cpp:1190</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ad50f29b65ceaca72615cc41864ee9d43"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ad50f29b65ceaca72615cc41864ee9d43">bitpit::PatchKernel::sortVertices</a></div><div class="ttdeci">bool sortVertices()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02469">patch_kernel.cpp:2469</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9c1b9c557d6e2c90eb5fb0ef6aa14dbe"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9c1b9c557d6e2c90eb5fb0ef6aa14dbe">bitpit::PatchKernel::isCommunicatorSet</a></div><div class="ttdeci">bool isCommunicatorSet() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00091">patch_kernel_parallel.cpp:91</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a017835739bf197e3a61988acf0d348cc"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">bitpit::PatchKernel::vertexEnd</a></div><div class="ttdeci">VertexIterator vertexEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00634">patch_kernel.cpp:634</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8d2ddea450eb53fb4c1d19695836f1f8"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8d2ddea450eb53fb4c1d19695836f1f8">bitpit::PatchKernel::deleteInterface</a></div><div class="ttdeci">bool deleteInterface(const long &amp;id, bool updateNeighs=true, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02311">patch_kernel.cpp:2311</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml">bitpit::Interface</a></div><div class="ttdoc">The Interface class defines the interfaces among cells. </div><div class="ttdef"><b>Definition:</b> <a href="interface_8hpp_source.xhtml#l00037">interface.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_ab12abc7226f80ad99f9a7dd27129bd67"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#ab12abc7226f80ad99f9a7dd27129bd67">bitpit::Cell::getInterface</a></div><div class="ttdeci">long getInterface(const int &amp;face, const int &amp;index=0) const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00350">cell.cpp:350</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">bitpit::ElementInfo::LINE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00049">element.hpp:49</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5b3fca22041b1081dcd5cecfc2e46b0f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">bitpit::PatchKernel::_setTol</a></div><div class="ttdeci">virtual void _setTol(double tolerance)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03400">patch_kernel.cpp:3400</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a62e9799bcf7e9d62a9a13ceebe0700b5"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a62e9799bcf7e9d62a9a13ceebe0700b5">bitpit::PatchKernel::isBoundingBoxDirty</a></div><div class="ttdeci">bool isBoundingBoxDirty(bool global=false) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03101">patch_kernel.cpp:3101</a></div></div>
<div class="ttc" id="classbitpit_1_1VTK_xhtml_adf7ef2f36ba699143a50f003dd359f82"><div class="ttname"><a href="classbitpit_1_1VTK.xhtml#adf7ef2f36ba699143a50f003dd359f82">bitpit::VTK::setName</a></div><div class="ttdeci">void setName(std::string)</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8cpp_source.xhtml#l00124">VTK.cpp:124</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a01c96657baf31230e0820f780c257c5c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c">bitpit::PatchKernel::cellBegin</a></div><div class="ttdeci">CellIterator cellBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01140">patch_kernel.cpp:1140</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4f0731fe8d88d9ea1cbf7208c5f2a30e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4f0731fe8d88d9ea1cbf7208c5f2a30e">bitpit::PatchKernel::displayVertices</a></div><div class="ttdeci">void displayVertices(std::ostream &amp;out, unsigned int padding=0) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03548">patch_kernel.cpp:3548</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a73f20bde12f1178ae67ba0b73e055583"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a73f20bde12f1178ae67ba0b73e055583">bitpit::PatchKernel::countFreeFaces</a></div><div class="ttdeci">long countFreeFaces() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02451">patch_kernel.cpp:2451</a></div></div>
<div class="ttc" id="classbitpit_1_1VTKUnstructuredGrid_xhtml_af95f22002fd7e55272361624e23649ed"><div class="ttname"><a href="classbitpit_1_1VTKUnstructuredGrid.xhtml#af95f22002fd7e55272361624e23649ed">bitpit::VTKUnstructuredGrid::setGeomData</a></div><div class="ttdeci">void setGeomData(VTKUnstructuredField, std::vector&lt; T &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8tpp_source.xhtml#l00073">VTK.tpp:73</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1af71cc964997c7523a9230072d81ad0"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1af71cc964997c7523a9230072d81ad0">bitpit::PatchKernel::interfaceEnd</a></div><div class="ttdeci">InterfaceIterator interfaceEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02189">patch_kernel.cpp:2189</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aecee21b4934e8a0d98a60c8cc1768240"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aecee21b4934e8a0d98a60c8cc1768240">bitpit::PatchKernel::findOrphanVertices</a></div><div class="ttdeci">std::vector&lt; long &gt; findOrphanVertices()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00850">patch_kernel.cpp:850</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314aa296aea314e438e5d63523e73bcb6632"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa296aea314e438e5d63523e73bcb6632">bitpit::ElementInfo::TETRA</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00054">element.hpp:54</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_afd9a5dd5da94a8357691f6aaacc9b812"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#afd9a5dd5da94a8357691f6aaacc9b812">bitpit::PatchKernel::deleteCoincidentVertices</a></div><div class="ttdeci">bool deleteCoincidentVertices(int nBins=128)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00989">patch_kernel.cpp:989</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a24a0fd95184e91e966c3dbd5325d1af8"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a24a0fd95184e91e966c3dbd5325d1af8">bitpit::PatchKernel::setBoundingBoxDirty</a></div><div class="ttdeci">void setBoundingBoxDirty(bool dirty)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03121">patch_kernel.cpp:3121</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a801bc85779cba6906e87a5a3191b5263"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a801bc85779cba6906e87a5a3191b5263">bitpit::PatchKernel::getCommunicator</a></div><div class="ttdeci">const MPI_Comm &amp; getCommunicator() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00101">patch_kernel_parallel.cpp:101</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_afcc1b2472ed8b5dcfb631475b091c07e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#afcc1b2472ed8b5dcfb631475b091c07e">bitpit::PatchKernel::deleteInterfaces</a></div><div class="ttdeci">bool deleteInterfaces(const std::vector&lt; long &gt; &amp;ids, bool updateNeighs=true, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02366">patch_kernel.cpp:2366</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4829d8691cf6a9ffdbb65f85d24d1dbc"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4829d8691cf6a9ffdbb65f85d24d1dbc">bitpit::PatchKernel::flushData</a></div><div class="ttdeci">void flushData(std::fstream &amp;stream, std::string name, VTKFormat format)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03609">patch_kernel.cpp:3609</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a21f33ddf3dcd1824484348286b4cda63"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">bitpit::PatchKernel::setExpert</a></div><div class="ttdeci">void setExpert(bool expert)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00492">patch_kernel.cpp:492</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a363f9828e1cebc66f9da634640f3d92c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a363f9828e1cebc66f9da634640f3d92c">bitpit::PatchKernel::addPointToBoundingBox</a></div><div class="ttdeci">void addPointToBoundingBox(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03160">patch_kernel.cpp:3160</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_abb9bab18d7c154892b8b0c145e6b96eb"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#abb9bab18d7c154892b8b0c145e6b96eb">bitpit::PatchKernel::isSameFace</a></div><div class="ttdeci">bool isSameFace(const long &amp;, const int &amp;, const long &amp;, const int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02669">patch_kernel.cpp:2669</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5a99fcf991a72b8dc061d7175e6e855b"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5a99fcf991a72b8dc061d7175e6e855b">bitpit::Cell::deleteInterface</a></div><div class="ttdeci">void deleteInterface(const int &amp;face, const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00303">cell.cpp:303</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3f366837c2cc93ec757c533813b1ebea"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">bitpit::PatchKernel::getCellCount</a></div><div class="ttdeci">virtual long getCellCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01017">patch_kernel.cpp:1017</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_adf4d225aea41f83c02f6a5860c2c48a9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#adf4d225aea41f83c02f6a5860c2c48a9">bitpit::PatchKernel::getInterfaces</a></div><div class="ttdeci">PiercedVector&lt; Interface &gt; &amp; getInterfaces()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02126">patch_kernel.cpp:2126</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_acdce9c67696da61a59d7fdf2a469ba01"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#acdce9c67696da61a59d7fdf2a469ba01">bitpit::Cell::initialize</a></div><div class="ttdeci">void initialize(ElementInfo::Type type, bool interior, bool storeNeighbourhood=true)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00142">cell.cpp:142</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5f95d54d53b7566455fe364e39fe73df"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5f95d54d53b7566455fe364e39fe73df">bitpit::PatchKernel::countFreeVertices</a></div><div class="ttdeci">long countFreeVertices() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00803">patch_kernel.cpp:803</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9">bitpit::ElementInfo::TRIANGLE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00050">element.hpp:50</a></div></div>
<div class="ttc" id="group__GenericIO_xhtml_gafd5fdc9c55c9dd00f4d957ac693eea98"><div class="ttname"><a href="group__GenericIO.xhtml#gafd5fdc9c55c9dd00f4d957ac693eea98">bitpit::genericIO::flushBINARY</a></div><div class="ttdeci">void flushBINARY(std::fstream &amp;str, const data_T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="GenericIO_8tpp_source.xhtml#l00275">GenericIO.tpp:275</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4b311f735eded357bfe2758cf9cbb88c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4b311f735eded357bfe2758cf9cbb88c">bitpit::PatchKernel::getVTK</a></div><div class="ttdeci">VTKUnstructuredGrid &amp; getVTK()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03594">patch_kernel.cpp:3594</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af94247665b7beb507a303148a514ed0b"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af94247665b7beb507a303148a514ed0b">bitpit::PatchKernel::resetCells</a></div><div class="ttdeci">void resetCells()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00304">patch_kernel.cpp:304</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a0b4f43e8c99cbb30c128e4b1392a77c2"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a0b4f43e8c99cbb30c128e4b1392a77c2">bitpit::PatchKernel::internalBegin</a></div><div class="ttdeci">CellIterator internalBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01160">patch_kernel.cpp:1160</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a16663957ccb84a697cfee3d6c6dba132"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a16663957ccb84a697cfee3d6c6dba132">bitpit::PatchKernel::interfaceBegin</a></div><div class="ttdeci">InterfaceIterator interfaceBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02179">patch_kernel.cpp:2179</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593">bitpit::ElementInfo::QUAD</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00053">element.hpp:53</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_aa3582949c911b29f260cce92216b817b"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#aa3582949c911b29f260cce92216b817b">bitpit::Cell::pushInterface</a></div><div class="ttdeci">void pushInterface(const int &amp;face, const long &amp;interface)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00275">cell.cpp:275</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ada7af97e14dd51fdc6c71a9c6deb3b3d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ada7af97e14dd51fdc6c71a9c6deb3b3d">bitpit::PatchKernel::evalInterfaceCentroid</a></div><div class="ttdeci">virtual std::array&lt; double, 3 &gt; evalInterfaceCentroid(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02610">patch_kernel.cpp:2610</a></div></div>
<div class="ttc" id="classbitpit_1_1VTK_xhtml_acdc7e63ee8bd40711e169cf9e5578cae"><div class="ttname"><a href="classbitpit_1_1VTK.xhtml#acdc7e63ee8bd40711e169cf9e5578cae">bitpit::VTK::getName</a></div><div class="ttdeci">std::string getName() const </div><div class="ttdef"><b>Definition:</b> <a href="VTK_8cpp_source.xhtml#l00146">VTK.cpp:146</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aaba31e4089958c458632ab75b912e9e0"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aaba31e4089958c458632ab75b912e9e0">bitpit::PatchKernel::isDirty</a></div><div class="ttdeci">bool isDirty(bool global=false) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00478">patch_kernel.cpp:478</a></div></div>
<div class="ttc" id="classbitpit_1_1VTK_xhtml_a8954c7c8e3f3737c2d932a3c57866414"><div class="ttname"><a href="classbitpit_1_1VTK.xhtml#a8954c7c8e3f3737c2d932a3c57866414">bitpit::VTK::setCodex</a></div><div class="ttdeci">void setCodex(VTKFormat)</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8cpp_source.xhtml#l00223">VTK.cpp:223</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aea97ac3fbd77f09ae7ce903a630d19e7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aea97ac3fbd77f09ae7ce903a630d19e7">bitpit::PatchKernel::generateCellId</a></div><div class="ttdeci">long generateCellId()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01200">patch_kernel.cpp:1200</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a317d53c60ef19408d789d7b2c08b3760"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">bitpit::ElementInfo::getElementInfo</a></div><div class="ttdeci">static const ElementInfo &amp; getElementInfo(ElementInfo::Type type)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00218">element.cpp:218</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9f4e72f1fafb0743c9b17ce1b4cb558d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">bitpit::PatchKernel::getVertexCount</a></div><div class="ttdeci">virtual long getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00572">patch_kernel.cpp:572</a></div></div>
<div class="ttc" id="classbitpit_1_1VTK_xhtml_a4c125da69aaf4c7fa07aa410b587b50b"><div class="ttname"><a href="classbitpit_1_1VTK.xhtml#a4c125da69aaf4c7fa07aa410b587b50b">bitpit::VTK::write</a></div><div class="ttdeci">void write(VTKWriteMode writeMode=VTKWriteMode::DEFAULT)</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8cpp_source.xhtml#l00490">VTK.cpp:490</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760">bitpit::ElementInfo::VERTEX</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00048">element.hpp:48</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af34ade24608c03659f8abc18de88a099"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af34ade24608c03659f8abc18de88a099">bitpit::PatchKernel::collapseCoincidentVertices</a></div><div class="ttdeci">std::vector&lt; long &gt; collapseCoincidentVertices(int nBins=128)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00901">patch_kernel.cpp:901</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9">bitpit::PatchKernel::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00280">patch_kernel.cpp:280</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a812c95760d351bda0045daa63955c002"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a812c95760d351bda0045daa63955c002">bitpit::PatchKernel::reserveInterfaces</a></div><div class="ttdeci">bool reserveInterfaces(size_t nInterfaces)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00393">patch_kernel.cpp:393</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a2fb2344cb9c6a51a36605f067652c620"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a2fb2344cb9c6a51a36605f067652c620">bitpit::PatchKernel::deleteCells</a></div><div class="ttdeci">bool deleteCells(const std::vector&lt; long &gt; &amp;ids, bool updateNeighs=true, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01509">patch_kernel.cpp:1509</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9362ede30b4a8fcfe1f1996df44e2cd2"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9362ede30b4a8fcfe1f1996df44e2cd2">bitpit::PatchKernel::isExpert</a></div><div class="ttdeci">bool isExpert() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00511">patch_kernel.cpp:511</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a6aa1d90b7c1d48092721e8cebe987638"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a6aa1d90b7c1d48092721e8cebe987638">bitpit::PatchKernel::displayInterfaces</a></div><div class="ttdeci">void displayInterfaces(std::ostream &amp;out, unsigned int padding=0) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03580">patch_kernel.cpp:3580</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5e2f16d4863f9ca097ce5274e4257874"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5e2f16d4863f9ca097ce5274e4257874">bitpit::PatchKernel::getId</a></div><div class="ttdeci">int getId() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00531">patch_kernel.cpp:531</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4c116a309c0bb6738343f860e58fd38e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4c116a309c0bb6738343f860e58fd38e">bitpit::PatchKernel::markCellForCoarsening</a></div><div class="ttdeci">void markCellForCoarsening(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00253">patch_kernel.cpp:253</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4c84c99d0e0f36d2023b291b57d5b58a"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">bitpit::PiercedVector::begin</a></div><div class="ttdeci">iterator begin() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01473">piercedVector.tpp:1473</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aa1070753551cb033cdc13d1e727bb6da"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aa1070753551cb033cdc13d1e727bb6da">bitpit::PatchKernel::internalEnd</a></div><div class="ttdeci">CellIterator internalEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01170">patch_kernel.cpp:1170</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4a727482a16bcd0a45800bc96f02be25"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4a727482a16bcd0a45800bc96f02be25">bitpit::PatchKernel::countFaces</a></div><div class="ttdeci">long countFaces() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02427">patch_kernel.cpp:2427</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aa3129889fa87122716437af6de7f6f2d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aa3129889fa87122716437af6de7f6f2d">bitpit::PatchKernel::extractEnvelope</a></div><div class="ttdeci">void extractEnvelope(PatchKernel &amp;envelope) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03456">patch_kernel.cpp:3456</a></div></div>
<div class="ttc" id="classbitpit_1_1IndexGenerator_xhtml_a8868b27e37b8d60a50c2139f866e5e0a"><div class="ttname"><a href="classbitpit_1_1IndexGenerator.xhtml#a8868b27e37b8d60a50c2139f866e5e0a">bitpit::IndexGenerator::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00109">patch_kernel.cpp:109</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8b4356bb02c54e12da168e7fa534be8f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">bitpit::PatchKernel::isThreeDimensional</a></div><div class="ttdeci">bool isThreeDimensional() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00562">patch_kernel.cpp:562</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a57c9e86bcf9367baafdbd5b4e425e675"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a57c9e86bcf9367baafdbd5b4e425e675">bitpit::PatchKernel::getCellType</a></div><div class="ttdeci">virtual ElementInfo::Type getCellType(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01080">patch_kernel.cpp:1080</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a321157907261f65f58cc50febcf2ab9d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a321157907261f65f58cc50febcf2ab9d">bitpit::PatchKernel::getBoundingBox</a></div><div class="ttdeci">void getBoundingBox(std::array&lt; double, 3 &gt; &amp;minPoint, std::array&lt; double, 3 &gt; &amp;maxPoint)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03065">patch_kernel.cpp:3065</a></div></div>
<div class="ttc" id="namespacebitpit_1_1utils_xhtml_a32d0b7a8f7e2b6e8e6290085c3538c79"><div class="ttname"><a href="namespacebitpit_1_1utils.xhtml#a32d0b7a8f7e2b6e8e6290085c3538c79">bitpit::utils::intersectionVector</a></div><div class="ttdeci">std::vector&lt; T &gt; intersectionVector(const std::vector&lt; T &gt; &amp;, const std::vector&lt; T &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8tpp_source.xhtml#l00146">utils.tpp:146</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a0732408c076655779356e283b1913a47"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a0732408c076655779356e283b1913a47">bitpit::PatchKernel::buildAdjacencies</a></div><div class="ttdeci">virtual void buildAdjacencies(bool resetAdjacencies=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02715">patch_kernel.cpp:2715</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a18841f81fbb288de48b90666f40d9942"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">bitpit::PiercedIterator::getId</a></div><div class="ttdeci">id_t getId(const id_t &amp;fallback=-1) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00060">piercedVector.tpp:60</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af7c24df4698b377686cefc6b82be72e7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af7c24df4698b377686cefc6b82be72e7">bitpit::PatchKernel::sort</a></div><div class="ttdeci">bool sort()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02512">patch_kernel.cpp:2512</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aee1708585bb5ba3bb51cd9603a6d4792"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aee1708585bb5ba3bb51cd9603a6d4792">bitpit::PatchKernel::sortCells</a></div><div class="ttdeci">bool sortCells()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02483">patch_kernel.cpp:2483</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9ca829ceca02a4615db90d8e28071695"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9ca829ceca02a4615db90d8e28071695">bitpit::PatchKernel::displayTopologyStats</a></div><div class="ttdeci">void displayTopologyStats(std::ostream &amp;out, unsigned int padding=0) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03511">patch_kernel.cpp:3511</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a></div><div class="ttdoc">The Cell class defines the cells. </div><div class="ttdef"><b>Definition:</b> <a href="cell_8hpp_source.xhtml#l00044">cell.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5415789a8af4586940fa0fbc3e7d7f48"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5415789a8af4586940fa0fbc3e7d7f48">bitpit::Cell::isInterior</a></div><div class="ttdeci">bool isInterior() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00176">cell.cpp:176</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml">bitpit::ElementInfo</a></div><div class="ttdoc">The ElementInfo class allow to define elements information. </div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00043">element.hpp:43</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a815b41b014cbdcbb235ad243a434826f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a815b41b014cbdcbb235ad243a434826f">bitpit::PatchKernel::freeCommunicator</a></div><div class="ttdeci">void freeCommunicator()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00109">patch_kernel_parallel.cpp:109</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae0773bd212cf300bf82d2f666508b927"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae0773bd212cf300bf82d2f666508b927">bitpit::PatchKernel::buildInterfaces</a></div><div class="ttdeci">virtual void buildInterfaces(bool resetInterfaces=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02830">patch_kernel.cpp:2830</a></div></div>
<div class="ttc" id="classbitpit_1_1VTKUnstructuredGrid_xhtml"><div class="ttname"><a href="classbitpit_1_1VTKUnstructuredGrid.xhtml">bitpit::VTKUnstructuredGrid</a></div><div class="ttdoc">VTK input output for Unstructured Meshes. </div><div class="ttdef"><b>Definition:</b> <a href="VTK_8hpp_source.xhtml#l00369">VTK.hpp:369</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a72ac836a1918b575d55f79c5c25f507e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a72ac836a1918b575d55f79c5c25f507e">bitpit::PatchKernel::getFirstGhost</a></div><div class="ttdeci">Cell &amp; getFirstGhost()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01110">patch_kernel.cpp:1110</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_ad03999c3d3b66840cb72ea6f65901722"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#ad03999c3d3b66840cb72ea6f65901722">bitpit::Element::getConnect</a></div><div class="ttdeci">const long * getConnect() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01076">element.cpp:1076</a></div></div>
<div class="ttc" id="classbitpit_1_1KdTree_xhtml"><div class="ttname"><a href="classbitpit_1_1KdTree.xhtml">bitpit::KdTree</a></div><div class="ttdoc">class for kd-tree data structure. </div><div class="ttdef"><b>Definition:</b> <a href="SortAlgorithms_8hpp_source.xhtml#l00083">SortAlgorithms.hpp:83</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314a21d46412ce79246fd7f58ee6cb857e1f"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a21d46412ce79246fd7f58ee6cb857e1f">bitpit::ElementInfo::PYRAMID</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00058">element.hpp:58</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a05a9d2b7f35b108a690d96242cdfe5e0"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a05a9d2b7f35b108a690d96242cdfe5e0">bitpit::Element::getType</a></div><div class="ttdeci">ElementInfo::Type getType() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01048">element.cpp:1048</a></div></div>
<div class="ttc" id="classbitpit_1_1VTK_xhtml_a2a81a8c03fb2fc6be546fb1ad3a7cab9"><div class="ttname"><a href="classbitpit_1_1VTK.xhtml#a2a81a8c03fb2fc6be546fb1ad3a7cab9">bitpit::VTK::addData</a></div><div class="ttdeci">VTKField &amp; addData(std::string, VTKBaseStreamer *=NULL)</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8cpp_source.xhtml#l00262">VTK.cpp:262</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a703f2ce12319b53c6804c5d0b54a0ca1"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">bitpit::Cell::pushAdjacency</a></div><div class="ttdeci">void pushAdjacency(const int &amp;face, const long &amp;adjacency)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00496">cell.cpp:496</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a582cb4dd83458721c323aa0518157400"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a582cb4dd83458721c323aa0518157400">bitpit::PatchKernel::getVertices</a></div><div class="ttdeci">PiercedVector&lt; Vertex &gt; &amp; getVertices()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00582">patch_kernel.cpp:582</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a2468e31c9c405646bfe87349777c5319"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a2468e31c9c405646bfe87349777c5319">bitpit::PatchKernel::countOrphanVertices</a></div><div class="ttdeci">long countOrphanVertices() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00830">patch_kernel.cpp:830</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4cee1aaca004bf6f3af1f11af40ef5a4"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4cee1aaca004bf6f3af1f11af40ef5a4">bitpit::PatchKernel::setBoundingBoxFrozen</a></div><div class="ttdeci">void setBoundingBoxFrozen(bool frozen)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03091">patch_kernel.cpp:3091</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae537aa5bafa444ca55d0a1ab0f446b59"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae537aa5bafa444ca55d0a1ab0f446b59">bitpit::PatchKernel::removePointFromBoundingBox</a></div><div class="ttdeci">void removePointFromBoundingBox(const std::array&lt; double, 3 &gt; &amp;point, bool delayedBoxUpdate=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03209">patch_kernel.cpp:3209</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a8b3bf978bde8640c4da2f25bd5d537e4"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a8b3bf978bde8640c4da2f25bd5d537e4">bitpit::Cell::deleteAdjacency</a></div><div class="ttdeci">void deleteAdjacency(const int &amp;face, const int &amp;i)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00524">cell.cpp:524</a></div></div>
<div class="ttc" id="classbitpit_1_1KdTree_xhtml_a6d88c6710964d480c0a82edeb7daee0b"><div class="ttname"><a href="classbitpit_1_1KdTree.xhtml#a6d88c6710964d480c0a82edeb7daee0b">bitpit::KdTree::exist</a></div><div class="ttdeci">int exist(T *)</div><div class="ttdef"><b>Definition:</b> <a href="KdTree_8tpp_source.xhtml#l00237">KdTree.tpp:237</a></div></div>
<div class="ttc" id="classbitpit_1_1Vertex_xhtml_a3352a00d79e6364e2fb3d8e81c64bd21"><div class="ttname"><a href="classbitpit_1_1Vertex.xhtml#a3352a00d79e6364e2fb3d8e81c64bd21">bitpit::Vertex::getCoords</a></div><div class="ttdeci">const std::array&lt; double, 3 &gt; &amp; getCoords() const </div><div class="ttdef"><b>Definition:</b> <a href="vertex_8cpp_source.xhtml#l00188">vertex.cpp:188</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a899db6a2ab62fc2102386bb52b0dc49d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a899db6a2ab62fc2102386bb52b0dc49d">bitpit::PatchKernel::countOrphanInterfaces</a></div><div class="ttdeci">long countOrphanInterfaces() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02410">patch_kernel.cpp:2410</a></div></div>
<div class="ttc" id="classbitpit_1_1IndexGenerator_xhtml_a1dbb5aa5dd858ea4acea4815d186a16f"><div class="ttname"><a href="classbitpit_1_1IndexGenerator.xhtml#a1dbb5aa5dd858ea4acea4815d186a16f">bitpit::IndexGenerator::generateId</a></div><div class="ttdeci">long generateId()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00069">patch_kernel.cpp:69</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a8bd0cf39ad223e8e99f738e67c979d58"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">bitpit::PiercedVector::end</a></div><div class="ttdeci">iterator end() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01486">piercedVector.tpp:1486</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a2b518a2c297a50b7a9bc6df8908b18d5"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a2b518a2c297a50b7a9bc6df8908b18d5">bitpit::Cell::findAdjacency</a></div><div class="ttdeci">int findAdjacency(const int &amp;face, const int &amp;adjacency)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00608">cell.cpp:608</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_adef671037ca88ed95c297e74d911f4c4"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#adef671037ca88ed95c297e74d911f4c4">bitpit::Element::setConnect</a></div><div class="ttdeci">void setConnect(std::unique_ptr&lt; long[]&gt; &amp;&amp;connect)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01058">element.cpp:1058</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_acf15fb27c03597b6d1708343e92b4a28"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#acf15fb27c03597b6d1708343e92b4a28">bitpit::Element::initialize</a></div><div class="ttdeci">void initialize(ElementInfo::Type type)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00981">element.cpp:981</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a8cc445dcef8ca7c9993fd16b7c703a"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a8cc445dcef8ca7c9993fd16b7c703a">bitpit::PatchKernel::generateInterfaceId</a></div><div class="ttdeci">long generateInterfaceId()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02199">patch_kernel.cpp:2199</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a140b6502bf890c117227aaab9a444804"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">bitpit::PatchKernel::scale</a></div><div class="ttdeci">virtual void scale(std::array&lt; double, 3 &gt; scaling)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03342">patch_kernel.cpp:3342</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a720b7a1720f7e8fa1b95d04b4bc9c9d9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a720b7a1720f7e8fa1b95d04b4bc9c9d9">bitpit::PatchKernel::sortInterfaces</a></div><div class="ttdeci">bool sortInterfaces()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02497">patch_kernel.cpp:2497</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9f0cfabaa79f3af75b85eeba1bb4cffd"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9f0cfabaa79f3af75b85eeba1bb4cffd">bitpit::PatchKernel::getInterfaceType</a></div><div class="ttdeci">virtual ElementInfo::Type getInterfaceType(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02159">patch_kernel.cpp:2159</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5fa140da5f45334d6d61ddf6bd3179de"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5fa140da5f45334d6d61ddf6bd3179de">bitpit::PatchKernel::ghostBegin</a></div><div class="ttdeci">CellIterator ghostBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01180">patch_kernel.cpp:1180</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314a46e10f2d03aee9fc457163f9a0dd76f1"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a46e10f2d03aee9fc457163f9a0dd76f1">bitpit::ElementInfo::HEXAHEDRON</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00056">element.hpp:56</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a79eb2e7b6342c00c93b2b0f36214b1f1"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a79eb2e7b6342c00c93b2b0f36214b1f1">bitpit::Element::getId</a></div><div class="ttdeci">long getId() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01018">element.cpp:1018</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a5caa1482ad646991f7cc73e4c09ef48e"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a5caa1482ad646991f7cc73e4c09ef48e">bitpit::Cell::getAdjacencies</a></div><div class="ttdeci">const long * getAdjacencies() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00581">cell.cpp:581</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">bitpit::ElementInfo::PIXEL</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00052">element.hpp:52</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab11021d0a2272ebc31a78484dbe97762"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab11021d0a2272ebc31a78484dbe97762">bitpit::PatchKernel::getInterfaceCount</a></div><div class="ttdeci">virtual long getInterfaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02116">patch_kernel.cpp:2116</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga119be619426d7a672ab67296a32f04e9"><div class="ttname"><a href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a></div><div class="ttdeci">std::array&lt; T, d &gt; max(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00306">MathOperators_array.tpp:306</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a71be4c5d6d1ce3a44f261c8211372b0d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a71be4c5d6d1ce3a44f261c8211372b0d">bitpit::PatchKernel::getInterfaceIterator</a></div><div class="ttdeci">InterfaceIterator getInterfaceIterator(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02169">patch_kernel.cpp:2169</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a15fb6ad8bef51c0e50feb13bc34f9c3c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a15fb6ad8bef51c0e50feb13bc34f9c3c">bitpit::PatchKernel::countOrphanCells</a></div><div class="ttdeci">long countOrphanCells() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01659">patch_kernel.cpp:1659</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a69eac8f6d4c5fe4fa4f70cb4be57ee9d"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a69eac8f6d4c5fe4fa4f70cb4be57ee9d">bitpit::Element::getVertexCount</a></div><div class="ttdeci">int getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01239">element.cpp:1239</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a73ed4cfe15a0fdfb4328e0c646776de2"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a73ed4cfe15a0fdfb4328e0c646776de2">bitpit::PatchKernel::update</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; update(bool trackAdaption=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00201">patch_kernel.cpp:201</a></div></div>
<div class="ttc" id="group__VTKEnums_xhtml_ga2224b32dc1c12ab1eb65044a1ed02c08"><div class="ttname"><a href="group__VTKEnums.xhtml#ga2224b32dc1c12ab1eb65044a1ed02c08">bitpit::VTKElementType</a></div><div class="ttdeci">VTKElementType</div><div class="ttdef"><b>Definition:</b> <a href="VTK_8hpp_source.xhtml#l00108">VTK.hpp:108</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">bitpit::ElementInfo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00046">element.hpp:46</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af4fe56dc2ac8e276a29b9fdd3c6c6c8a"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a">bitpit::PatchKernel::setBoundingBox</a></div><div class="ttdeci">void setBoundingBox(const std::array&lt; double, 3 &gt; &amp;minPoint, const std::array&lt; double, 3 &gt; &amp;maxPoint)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03046">patch_kernel.cpp:3046</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1799d61f7a4ea2c0f043ee860de457fe"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1799d61f7a4ea2c0f043ee860de457fe">bitpit::PatchKernel::getCells</a></div><div class="ttdeci">PiercedVector&lt; Cell &gt; &amp; getCells()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01047">patch_kernel.cpp:1047</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_aa61245982eeb160544d260289840a04f"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#aa61245982eeb160544d260289840a04f">bitpit::Cell::getAdjacencyCount</a></div><div class="ttdeci">int getAdjacencyCount() const </div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00545">cell.cpp:545</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab4be2b88640dbc8a2d774c2677227db7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab4be2b88640dbc8a2d774c2677227db7">bitpit::PatchKernel::deleteVertices</a></div><div class="ttdeci">bool deleteVertices(const std::vector&lt; long &gt; &amp;ids, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00777">patch_kernel.cpp:777</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a13cb12a334bee3c69eb1bf0e72a5c3a9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a13cb12a334bee3c69eb1bf0e72a5c3a9">bitpit::PatchKernel::setAdaptionDirty</a></div><div class="ttdeci">void setAdaptionDirty(bool dirty)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00441">patch_kernel.cpp:441</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab4149b21cfa6ffac893a648202e574e9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab4149b21cfa6ffac893a648202e574e9">bitpit::PatchKernel::squeezeVertices</a></div><div class="ttdeci">bool squeezeVertices()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02528">patch_kernel.cpp:2528</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1bbac26fd3071ef417afdd4998a95f59"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1bbac26fd3071ef417afdd4998a95f59">bitpit::PatchKernel::resetTol</a></div><div class="ttdeci">void resetTol()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03418">patch_kernel.cpp:3418</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_abda063fad64469d0f918fbd985c91955"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#abda063fad64469d0f918fbd985c91955">bitpit::PatchKernel::_resetTol</a></div><div class="ttdeci">virtual void _resetTol()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03428">patch_kernel.cpp:3428</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8af0f162377b3f7fdc6cddaf384a9295"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8af0f162377b3f7fdc6cddaf384a9295">bitpit::PatchKernel::getLastInternal</a></div><div class="ttdeci">Cell &amp; getLastInternal()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01090">patch_kernel.cpp:1090</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml">bitpit::PatchKernel</a></div><div class="ttdoc">The PatchKernel class provides an interface for defining patches. </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8hpp_source.xhtml#l00081">patch_kernel.hpp:81</a></div></div>
<div class="ttc" id="classbitpit_1_1VTKTypes_xhtml_ab356047e1133452a2cc65f44d23b75aa"><div class="ttname"><a href="classbitpit_1_1VTKTypes.xhtml#ab356047e1133452a2cc65f44d23b75aa">bitpit::VTKTypes::whichType</a></div><div class="ttdeci">static VTKDataType whichType(const std::type_info &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="VTKTypes_8cpp_source.xhtml#l00104">VTKTypes.cpp:104</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aed8ade7111098a500e101d82337541b6"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">bitpit::PatchKernel::reserveCells</a></div><div class="ttdeci">bool reserveCells(size_t nCells)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00368">patch_kernel.cpp:368</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab0ef8fd5ab115344cb859f66349a5e6f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab0ef8fd5ab115344cb859f66349a5e6f">bitpit::PatchKernel::findCellFaceNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellFaceNeighs(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01740">patch_kernel.cpp:1740</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a6d1f37fa9f5ef449e1a52c2e94ccb38e"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a6d1f37fa9f5ef449e1a52c2e94ccb38e">bitpit::Element::getEdgeCount</a></div><div class="ttdeci">int getEdgeCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01160">element.cpp:1160</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ad83a08e659d130288b1b4a94b52dfce9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ad83a08e659d130288b1b4a94b52dfce9">bitpit::PatchKernel::getCellIterator</a></div><div class="ttdeci">CellIterator getCellIterator(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01130">patch_kernel.cpp:1130</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a698827321f531730c1e6a3ce636ecc00"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a698827321f531730c1e6a3ce636ecc00">bitpit::PatchKernel::displayCells</a></div><div class="ttdeci">void displayCells(std::ostream &amp;out, unsigned int padding=0) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03564">patch_kernel.cpp:3564</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aac4de5dd0284696d6d11e91a7aa02d97"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aac4de5dd0284696d6d11e91a7aa02d97">bitpit::PatchKernel::squeeze</a></div><div class="ttdeci">bool squeeze()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02582">patch_kernel.cpp:2582</a></div></div>
<div class="ttc" id="classbitpit_1_1Vertex_xhtml_a1b4f5221489120f2dd64643071b2f0e4"><div class="ttname"><a href="classbitpit_1_1Vertex.xhtml#a1b4f5221489120f2dd64643071b2f0e4">bitpit::Vertex::getId</a></div><div class="ttdeci">long getId() const </div><div class="ttdef"><b>Definition:</b> <a href="vertex_8cpp_source.xhtml#l00168">vertex.cpp:168</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8e4424bed56b4a7483dc6a5a553c9b3a"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8e4424bed56b4a7483dc6a5a553c9b3a">bitpit::PatchKernel::updateBoundingBox</a></div><div class="ttdeci">void updateBoundingBox(bool forcedUpdated=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03129">patch_kernel.cpp:3129</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aebc446887158556566ded86f91d440a2"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aebc446887158556566ded86f91d440a2">bitpit::PatchKernel::isTolCustomized</a></div><div class="ttdeci">bool isTolCustomized() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03443">patch_kernel.cpp:3443</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a0dd10739cfaa2b6b74b330a3c743a45e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a0dd10739cfaa2b6b74b330a3c743a45e">bitpit::PatchKernel::getVertexIterator</a></div><div class="ttdeci">VertexIterator getVertexIterator(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00614">patch_kernel.cpp:614</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_af79866635c18fe3384764869f6a450b4"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#af79866635c18fe3384764869f6a450b4">bitpit::Element::getFaceCount</a></div><div class="ttdeci">int getFaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01096">element.cpp:1096</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a6ff6ae6c0524e095368df721b89fcca0"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a6ff6ae6c0524e095368df721b89fcca0">bitpit::PatchKernel::moveGhost2Internal</a></div><div class="ttdeci">CellIterator moveGhost2Internal(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01593">patch_kernel.cpp:1593</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314adaee0c207571074d3d5cbd50206f4d1f"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314adaee0c207571074d3d5cbd50206f4d1f">bitpit::ElementInfo::WEDGE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00057">element.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a2a451518a613e97edfed788b4a35fb22"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a2a451518a613e97edfed788b4a35fb22">bitpit::PatchKernel::getGhostCount</a></div><div class="ttdeci">long getGhostCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01037">patch_kernel.cpp:1037</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aab8ba2ed4252554552276e8ebd772b05"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aab8ba2ed4252554552276e8ebd772b05">bitpit::PatchKernel::_findCellEdgeNeighs</a></div><div class="ttdeci">virtual std::vector&lt; long &gt; _findCellEdgeNeighs(const long &amp;id, const int &amp;edge, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01876">patch_kernel.cpp:1876</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">bitpit::ElementInfo::VOXEL</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00055">element.hpp:55</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ab0fda03aae770bcc500dcc219ad46c34"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ab0fda03aae770bcc500dcc219ad46c34">bitpit::PatchKernel::~PatchKernel</a></div><div class="ttdeci">virtual ~PatchKernel()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00186">patch_kernel.cpp:186</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a67d8ab97043866d9acf98923a9aebe15"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a67d8ab97043866d9acf98923a9aebe15">bitpit::PatchKernel::deleteCell</a></div><div class="ttdeci">bool deleteCell(const long &amp;id, bool updateNeighs=true, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01426">patch_kernel.cpp:1426</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_gaa23e28742c346e3492aa57b4e2975033"><div class="ttname"><a href="group__commonUtils.xhtml#gaa23e28742c346e3492aa57b4e2975033">bitpit::utils::extractWithoutReplacement</a></div><div class="ttdeci">void extractWithoutReplacement(int n, int m, std::vector&lt; int &gt; &amp;list)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8cpp_source.xhtml#l00059">utils.cpp:59</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga88740c05f6c499a2784fcc1a221c1c9f"><div class="ttname"><a href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a></div><div class="ttdeci">std::array&lt; T, d &gt; min(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00067">MathOperators_array.tpp:67</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af283d082cfa2a50064ccd44493539403"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af283d082cfa2a50064ccd44493539403">bitpit::PatchKernel::findCellNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; findCellNeighs(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01697">patch_kernel.cpp:1697</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3b64649db5ab7ff05006db39933358e7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3b64649db5ab7ff05006db39933358e7">bitpit::PatchKernel::countFreeCells</a></div><div class="ttdeci">long countFreeCells() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01635">patch_kernel.cpp:1635</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_ae8ed2f8193fced9e84cd379e8b0934de"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#ae8ed2f8193fced9e84cd379e8b0934de">bitpit::Element::getFaceType</a></div><div class="ttdeci">ElementInfo::Type getFaceType(const int &amp;face) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01117">element.cpp:1117</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_acd875d8ac29b6d292b99d1779041176f"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#acd875d8ac29b6d292b99d1779041176f">bitpit::Element::getInfo</a></div><div class="ttdeci">const ElementInfo &amp; getInfo() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01028">element.cpp:1028</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9598f5c2bbc862b32b1e0a281ab8340c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9598f5c2bbc862b32b1e0a281ab8340c">bitpit::PatchKernel::resetVertices</a></div><div class="ttdeci">void resetVertices()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00290">patch_kernel.cpp:290</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af50016bc86a8f5a82a656adabc2a6173"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af50016bc86a8f5a82a656adabc2a6173">bitpit::PatchKernel::getInternalCount</a></div><div class="ttdeci">long getInternalCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01027">patch_kernel.cpp:1027</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5d6bb9aad26b0683e7f9c811700281c0"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">bitpit::PatchKernel::addInterface</a></div><div class="ttdeci">InterfaceIterator addInterface(ElementInfo::Type type, const long &amp;id=Element::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02240">patch_kernel.cpp:2240</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae25823f089b13969c12bc13632e740b5"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae25823f089b13969c12bc13632e740b5">bitpit::PatchKernel::countFreeInterfaces</a></div><div class="ttdeci">long countFreeInterfaces() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02391">patch_kernel.cpp:2391</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9465abd8e172d89c86820c9a32c5a6cf"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9465abd8e172d89c86820c9a32c5a6cf">bitpit::PatchKernel::enableCellBalancing</a></div><div class="ttdeci">void enableCellBalancing(const long &amp;id, bool enabled)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00268">patch_kernel.cpp:268</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_abd98477469c550cfb7bb440ca3f3f8d7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#abd98477469c550cfb7bb440ca3f3f8d7">bitpit::PatchKernel::isAdaptionDirty</a></div><div class="ttdeci">bool isAdaptionDirty(bool global=false) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00456">patch_kernel.cpp:456</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a611e1742519f6391eb9a80433dabb83a"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">bitpit::Element::getVertex</a></div><div class="ttdeci">long getVertex(const int &amp;vertex) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01272">element.cpp:1272</a></div></div>
<div class="ttc" id="classbitpit_1_1KdTree_xhtml_a28f4913ee19bcc98f97b2f1da6a138a8"><div class="ttname"><a href="classbitpit_1_1KdTree.xhtml#a28f4913ee19bcc98f97b2f1da6a138a8">bitpit::KdTree::insert</a></div><div class="ttdeci">void insert(T *)</div><div class="ttdef"><b>Definition:</b> <a href="KdTree_8tpp_source.xhtml#l00490">KdTree.tpp:490</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a74e36ccf62ed8806d0d94d453402f593"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a74e36ccf62ed8806d0d94d453402f593">bitpit::PatchKernel::setTol</a></div><div class="ttdeci">void setTol(double tolerance)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03387">patch_kernel.cpp:3387</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/containers/piercedVector.tpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0b61c55142250c0cc363383afd8075a4.xhtml">containers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">piercedVector.tpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a8ea4d027e8c63333cf869cdfa286b087">   33</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a8ea4d027e8c63333cf869cdfa286b087">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::PiercedIterator</a>()</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    : m_container(nullptr), m_pos(0)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a85e05c28c27a09613f4f095f1a0c3722">   45</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a85e05c28c27a09613f4f095f1a0c3722">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::swap</a>(<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator</a>&amp; other) noexcept</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::swap(m_container, other.m_container);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    std::swap(m_pos, other.m_pos);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">   60</a></span>&#160;id_t <a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::getId</a>(<span class="keyword">const</span> id_t &amp;fallback) <span class="keyword">const</span> noexcept</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    id_t id;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> (m_pos &gt; m_container-&gt;m_last_pos) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordtype">id</span> = fallback;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">id</span> = m_container-&gt;m_ids[m_pos];</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt;= 0) {</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordtype">id</span> = fallback;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a8a3b3eda3ba331fbd3ed8f9b5b5e5bf0">   81</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;</a> &amp; <a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a8a3b3eda3ba331fbd3ed8f9b5b5e5bf0">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::operator++</a>()</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">size_t</span> delta = 1;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        m_pos += delta;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> (m_pos &gt; m_container-&gt;m_last_pos) {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            m_pos = m_container-&gt;m_last_pos + 1;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        id_t <span class="keywordtype">id</span> = m_container-&gt;m_ids[m_pos];</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt;= 0) {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            delta = - id;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    assert(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#ac3e574d1272e0014e04a641d88829f87">  106</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;</a> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a8a3b3eda3ba331fbd3ed8f9b5b5e5bf0">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::operator++</a>(<span class="keywordtype">int</span>)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator</a> tmp(m_container, m_pos);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    ++(*this);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> tmp;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a7616af02f45a2234bfdc1ed681090a3d">  122</a></span>&#160;value_t &amp; <a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a7616af02f45a2234bfdc1ed681090a3d">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::operator*</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> m_container-&gt;m_v[m_pos];</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a538521598fbd9a094a0e4b439c9e1a92">  134</a></span>&#160;value_t * <a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a538521598fbd9a094a0e4b439c9e1a92">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::operator-&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> &amp;(m_container-&gt;m_v[m_pos]);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> U, <span class="keyword">typename</span> U_no_cv,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;         <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;U, U_no_cv&gt;::value, <span class="keywordtype">int</span>&gt;::type&gt;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedIterator.xhtml#a2c7bc0bb2e734be27baa0eb63360648f">  145</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::operator</a> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;const U_no_cv, id_t&gt;</a>() <span class="keyword">const</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedIterator&lt;const U_no_cv, id_t&gt;</a>(m_container, m_pos);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t, <span class="keyword">typename</span> value_no_cv_t&gt;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a8ea4d027e8c63333cf869cdfa286b087">PiercedIterator&lt;value_t, id_t, value_no_cv_t&gt;::PiercedIterator</a>(container_t *container, <span class="keyword">const</span> <span class="keywordtype">size_t</span> &amp;pos)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    : m_container(container), m_pos(pos)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">// Definition of static constants of PiercedVector</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">const</span> std::size_t</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    PiercedVector&lt;value_t, id_t&gt;::MAX_PENDING_HOLES = 16384;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ad55015952c2e3196fd07e89d1995822b">  169</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ad55015952c2e3196fd07e89d1995822b">PiercedVector&lt;value_t, id_t&gt;::PiercedVector</a>()</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    clear();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a91c5493cd9e48b97de8f62758437432e">  181</a></span>&#160;<a class="code" href="classbitpit_1_1PiercedVector.xhtml#ad55015952c2e3196fd07e89d1995822b">PiercedVector&lt;value_t, id_t&gt;::PiercedVector</a>(std::size_t n)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    clear();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    reserve(n);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;}</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aff2db0881d8403e71daa825561270d78">  200</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aff2db0881d8403e71daa825561270d78">PiercedVector&lt;value_t, id_t&gt;::pushBack</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, value_t &amp;&amp;value)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;{</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// Fille the position</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::size_t pos = fillPosAppend(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    m_v[pos] = std::move(value);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;}</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">  224</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">PiercedVector&lt;value_t, id_t&gt;::reclaim</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;{</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::size_t pos = fillPosHead(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;}</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aab66c79deabb850a51746f16f2956a09">  249</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aab66c79deabb850a51746f16f2956a09">PiercedVector&lt;value_t, id_t&gt;::reclaimAfter</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;{</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    std::size_t pos = fillPosAfter(getPosFromId(referenceId), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a24f4960744a5ce4ed2b860d20ebe4085">  269</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a24f4960744a5ce4ed2b860d20ebe4085">PiercedVector&lt;value_t, id_t&gt;::reclaimBack</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    std::size_t pos = fillPosAppend(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ab8a98611b29a2e790b7ba794d69a12da">  294</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab8a98611b29a2e790b7ba794d69a12da">PiercedVector&lt;value_t, id_t&gt;::reclaimBefore</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;{</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::size_t pos = fillPosBefore(getPosFromId(referenceId), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;}</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a673473ef8bd1070512b5a2e05a4ed9e7">  315</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a673473ef8bd1070512b5a2e05a4ed9e7">PiercedVector&lt;value_t, id_t&gt;::moveAfter</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;{</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="comment">// Save the element</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    std::size_t initialPos = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    value_t temp = std::move(m_v[initialPos]);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// Pierce the position</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    piercePos(initialPos, !delayed);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="comment">// Insert the element in the updated position</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keywordflow">return</span> insertAfter(referenceId, <span class="keywordtype">id</span>, std::move(temp));</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a8eb7139421179bbea99d1e2db7468605">  340</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8eb7139421179bbea99d1e2db7468605">PiercedVector&lt;value_t, id_t&gt;::moveBefore</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;{</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">// Save the element</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    std::size_t initialPos = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    value_t temp = std::move(m_v[initialPos]);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Pierce the position</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    piercePos(initialPos, !delayed);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="comment">// Insert the element in the updated position</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordflow">return</span> insertBefore(referenceId, <span class="keywordtype">id</span>, std::move(temp));</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">  362</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">PiercedVector&lt;value_t, id_t&gt;::insert</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> value_t &amp;value)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;{</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    std::size_t pos = fillPosHead(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    m_v[pos] = value;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aecfcb24711018e11b8bfbd3ae363d5e6">  387</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aecfcb24711018e11b8bfbd3ae363d5e6">PiercedVector&lt;value_t, id_t&gt;::insertAfter</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> value_t &amp;value)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;{</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    std::size_t pos = fillPosAfter(getPosFromId(referenceId), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    m_v[pos] = value;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;}</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#afd8b0436f3cd27da7cb019882c154d58">  412</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#afd8b0436f3cd27da7cb019882c154d58">PiercedVector&lt;value_t, id_t&gt;::insertBefore</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> value_t &amp;value)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;{</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    std::size_t pos = fillPosBefore(getPosFromId(referenceId), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    m_v[pos] = value;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a2f81b6663201bf2a2820ea71977aac59">  432</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a2f81b6663201bf2a2820ea71977aac59">PiercedVector&lt;value_t, id_t&gt;::replace</a>(id_t <span class="keywordtype">id</span>, value_t &amp;&amp;value)</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;{</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="comment">// Position</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordtype">size_t</span> pos = m_pos.at(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="comment">// Replace the element</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    m_v[pos] = std::move(value);</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="comment">// Update the map</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    id_t id_prev = m_ids[pos];</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> != id_prev) {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        setPosId(pos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;}</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00457"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aeb8e6065e4b1aeb85080767b8d160f70">  457</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aeb8e6065e4b1aeb85080767b8d160f70">PiercedVector&lt;value_t, id_t&gt;::updateId</a>(<span class="keyword">const</span> id_t &amp;currentId, <span class="keyword">const</span> id_t &amp;updatedId)</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;{</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    fillPos(getPosFromId(currentId), updatedId);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;}</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00474"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a1822bc5d038cda38f8fa7f2e4d314067">  474</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a1822bc5d038cda38f8fa7f2e4d314067">PiercedVector&lt;value_t, id_t&gt;::emplace</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, Args&amp;&amp;... args)</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;{</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    std::size_t pos = fillPosHead(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    m_v[pos] = value_t(std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;}</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00499"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a6d561611780d75646c5795e06f6afe25">  499</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a6d561611780d75646c5795e06f6afe25">PiercedVector&lt;value_t, id_t&gt;::emplaceAfter</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, Args&amp;&amp;... args)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;{</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    std::size_t pos = fillPosAfter(getPosFromId(referenceId), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    m_v[pos] = value_t(std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;}</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00521"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a08298683067fc9e162924600db7efb8a">  521</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a08298683067fc9e162924600db7efb8a">PiercedVector&lt;value_t, id_t&gt;::emplaceBack</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, Args&amp;&amp;... args)</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;{</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    std::size_t pos = fillPosAppend(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    m_v[pos] = value_t(std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;}</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ac9318ff19dff1e7ff1afdd7e24567385">  545</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac9318ff19dff1e7ff1afdd7e24567385">PiercedVector&lt;value_t, id_t&gt;::emplaceBefore</a>(<span class="keyword">const</span> id_t &amp;referenceId, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>, Args&amp;&amp;... args)</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;{</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    std::size_t pos = fillPosBefore(getPosFromId(referenceId), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="comment">// Insert the element</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    m_v[pos] = value_t(std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;}</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</div>
<div class="line"><a name="l00568"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a82f2afa4b887e96dcc4e72c0cea64c32">  568</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a82f2afa4b887e96dcc4e72c0cea64c32">PiercedVector&lt;value_t, id_t&gt;::emreplace</a>(id_t <span class="keywordtype">id</span>, Args&amp;&amp;... args)</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;{</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="comment">// Get the position of the element</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordtype">size_t</span> pos = m_pos.at(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    <span class="comment">// Replace the element</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    m_v[pos] = value_t(std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="comment">// Update the map</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    id_t id_prev = m_ids[pos];</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> != id_prev) {</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        setPosId(pos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="comment">// Return the iterator that points to the element</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00604"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">  604</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">PiercedVector&lt;value_t, id_t&gt;::erase</a>(id_t <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> delayed)</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;{</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="comment">// Position</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    <span class="keywordtype">size_t</span> pos = m_pos.at(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    <span class="comment">// Pierce the position</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    piercePos(pos, !delayed);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="comment">// Return the iterator to the next element</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;    <span class="keywordflow">if</span> (empty() || pos &gt;= m_last_pos) {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        <span class="keywordflow">return</span> end();</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        <span class="keywordflow">return</span> getIteratorFromPos(findNextUsedPos(pos));</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;}</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00629"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a07194f92feb4d07149a110335da4f733">  629</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a07194f92feb4d07149a110335da4f733">PiercedVector&lt;value_t, id_t&gt;::popBack</a>()</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;{</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="keywordflow">if</span> (empty()) {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range(<span class="stringliteral">&quot;Vector is empty&quot;</span>);</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (size() == 1) {</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        clear();</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;        std::size_t updated_last_pos = findPrevUsedPos(m_last_pos);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        updateLastUsedPos(updated_last_pos);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    }</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;}</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00648"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a06382cf1a6fae17f423ce7db9478d6b1">  648</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a06382cf1a6fae17f423ce7db9478d6b1">PiercedVector&lt;value_t, id_t&gt;::swap</a>(<span class="keyword">const</span> id_t &amp;id_first, <span class="keyword">const</span> id_t &amp;id_second)</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;{</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="comment">// Positions</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordtype">size_t</span> pos_first  = m_pos.at(id_first);</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordtype">size_t</span> pos_second = m_pos.at(id_second);</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="comment">// Swap the elements</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    value_t tmp = std::move(m_v[pos_first]);</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    m_v[pos_first]  = std::move(m_v[pos_second]);</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    m_v[pos_second] = std::move(tmp);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;    <span class="comment">// Relink the ids</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    setPosId(pos_second, id_first);</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    setPosId(pos_first, id_second);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;}</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00673"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a4cb0dfa4437e32f46533d7a7efe53488">  673</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4cb0dfa4437e32f46533d7a7efe53488">PiercedVector&lt;value_t, id_t&gt;::clear</a>(<span class="keywordtype">bool</span> release)</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;{</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="comment">// Clear storage</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    m_ids.clear();</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    m_v.clear();</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <span class="keywordflow">if</span> (release) {</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        std::vector&lt;id_t&gt;().swap(m_ids);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        std::vector&lt;value_t&gt;().swap(m_v);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    storageResize(0);</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="comment">// Reset first and last counters</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    m_first_pos = 0;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    m_last_pos  = 0;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="comment">// Clear holes</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    holesClear(release);</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="comment">// Clear position map</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    m_pos.clear();</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    std::unordered_map&lt;id_t, std::size_t, PiercedHasher&gt;().swap(m_pos);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <span class="comment">// There are no dirty positions</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    m_first_dirty_pos = m_last_pos + 1;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;}</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">  703</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">PiercedVector&lt;value_t, id_t&gt;::flush</a>()</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;{</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    <span class="comment">// Flush pending holes</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    holesFlush();</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;}</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00723"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">  723</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">PiercedVector&lt;value_t, id_t&gt;::reserve</a>(std::size_t n)</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;{</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    m_ids.reserve(n);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    m_v.reserve(n);</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00751"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ae305e10cfe3fea9ff82dc3950cdb5b99">  751</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae305e10cfe3fea9ff82dc3950cdb5b99">PiercedVector&lt;value_t, id_t&gt;::resize</a>(std::size_t n)</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;{</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    <span class="comment">// If the size of the vector is already the requested size</span></div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    <span class="comment">// there is nothing to do.</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    <span class="keywordflow">if</span> (n == size()) {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    }</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="comment">// A request for a size equal to 0 is equivalent to a clear.</span></div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    <span class="keywordflow">if</span> (n == 0) {</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        clear();</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="comment">// If the requested size is greater that the current size we</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    <span class="comment">// may need to reserve space in the storage to allow the</span></div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="comment">// container to reach the requested size.</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    <span class="keywordflow">if</span> (n &gt; size()) {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        reserve(n);</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    }</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    <span class="comment">// If the requested size is smaller that the current size</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    <span class="comment">// we need to perform a real resize.</span></div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="comment">// Flush holes</span></div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    holesFlush();</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="comment">// Find the id of the last element</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    id_t last_id = getSizeMarker(n - 1);</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="comment">// Find the updated last position</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    std::size_t updated_last_pos = getPosFromId(last_id);</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;    <span class="comment">// Update the last position</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    updateLastUsedPos(updated_last_pos);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;}</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00793"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a595118bec00dbc17adb35a1a4d2055fc">  793</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a595118bec00dbc17adb35a1a4d2055fc">PiercedVector&lt;value_t, id_t&gt;::sort</a>()</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;{</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    <span class="comment">// Squeeze the container</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    squeeze();</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    <span class="comment">// The container has been squeezed, there are no holes</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    <span class="keywordtype">size_t</span> containerSize = size();</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="comment">// Evaluates the permutations</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="comment">// The permutation for ids and values are the same, however the reored</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="comment">// function will destroy the permutation on output, so two different</span></div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    <span class="comment">// permutations are needed.</span></div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    std::vector&lt;std::size_t&gt; id_permutation;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    id_permutation.resize(containerSize);</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; containerSize; ++i) {</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        id_permutation[i] = i;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;    std::sort(id_permutation.begin(), id_permutation.end(), idLess(m_ids));</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    std::vector&lt;std::size_t&gt; value_permutation(id_permutation);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    <span class="comment">// Sort the container</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    reorderVector&lt;id_t&gt;(id_permutation, m_ids, containerSize);</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    reorderVector&lt;value_t&gt;(value_permutation, m_v, containerSize);</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00831"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a7b21ecd94fd4a7553274aa1da2bc4a76">  831</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a7b21ecd94fd4a7553274aa1da2bc4a76">PiercedVector&lt;value_t, id_t&gt;::squeeze</a>()</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;{</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="comment">// Flush changes</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;    flush();</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="comment">// Compact the vector</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;    std::size_t nHoles = holesCount();</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    <span class="keywordflow">if</span> (nHoles != 0) {</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        <span class="comment">// Move the elements</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        std::size_t firstPosToUpdate;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <span class="keywordflow">if</span> (m_first_pos == 0) {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            firstPosToUpdate = *(m_holes_regular_end - 1);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            firstPosToUpdate = 0;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        }</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        std::size_t offset = 0;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;        <span class="keywordflow">for</span> (std::size_t pos = firstPosToUpdate; pos &lt;= m_last_pos; pos++) {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <span class="keywordflow">if</span> (offset &lt; nHoles &amp;&amp; *(m_holes_regular_end - offset - 1) == pos) {</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;                ++offset;</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            }</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            id_t <span class="keywordtype">id</span> = m_ids[pos];</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            std::size_t updatedPos = pos - offset;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            setPosId(updatedPos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            setEmptyPosId(pos, pos + 1);</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            m_v[updatedPos] = std::move(m_v[pos]);</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        }</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="comment">// Clear the holes</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        holesClear();</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        <span class="comment">// Reset first and last counters</span></div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        updateFirstUsedPos(0);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        updateLastUsedPos(size() - 1);</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    }</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="comment">// Shrink to fit</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    m_ids.shrink_to_fit();</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    m_v.shrink_to_fit();</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;}</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00891"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a82ba7812164ce0004ba3f0e75c4ad58d">  891</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a06382cf1a6fae17f423ce7db9478d6b1">PiercedVector&lt;value_t, id_t&gt;::swap</a>(<a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector</a>&amp; x) noexcept</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;{</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    std::swap(x.m_first_pos, m_first_pos);</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    std::swap(x.m_last_pos, m_last_pos);</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    std::swap(x.m_first_dirty_pos, m_first_dirty_pos);</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    std::swap(x.m_ids, m_ids);</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    std::swap(x.m_v, m_v);</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    std::swap(x.m_holes, m_holes);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    std::swap(x.m_holes_regular_begin, m_holes_regular_begin);</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;    std::swap(x.m_holes_regular_end, m_holes_regular_end);</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    std::swap(x.m_holes_regular_sorted, m_holes_regular_sorted);</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    std::swap(x.m_holes_pending_begin, m_holes_pending_begin);</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    std::swap(x.m_holes_pending_end, m_holes_pending_end);</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    std::swap(x.m_holes_pending_sorted, m_holes_pending_sorted);</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    std::swap(x.m_pos, m_pos);</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;}</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00917"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aaf8754c41dda8b3030f48a0433ac3a53">  917</a></span>&#160;std::size_t <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aaf8754c41dda8b3030f48a0433ac3a53">PiercedVector&lt;value_t, id_t&gt;::capacity</a>()</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;{</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keywordflow">return</span> m_v.capacity();</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;}</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00929"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#af624f644a75c3238d46568f41e8c28c2">  929</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#af624f644a75c3238d46568f41e8c28c2">PiercedVector&lt;value_t, id_t&gt;::contiguous</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    <span class="keywordflow">return</span> m_holes.empty();</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;}</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00938"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a22c73f90256336a64642243b47ee7838">  938</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a22c73f90256336a64642243b47ee7838">PiercedVector&lt;value_t, id_t&gt;::dump</a>()</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;{</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;----------------[ DUMP ]----------------&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; size: &quot;</span> &lt;&lt; size() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; m_holes_regular_begin: &quot;</span> &lt;&lt; std::distance(m_holes.begin(), m_holes_regular_begin) &lt;&lt; std::endl;</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; m_holes_regular_end  : &quot;</span> &lt;&lt; std::distance(m_holes.begin(), m_holes_regular_end) &lt;&lt; std::endl;</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; Regular holes: &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> k = m_holes_regular_begin; k &lt; m_holes_regular_end; ++k) {</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        std::cout &lt;&lt; *k &lt;&lt; std::endl;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    }</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; m_holes_pending_begin: &quot;</span> &lt;&lt; std::distance(m_holes.begin(), m_holes_pending_begin) &lt;&lt; std::endl;</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; m_holes_pending_end  : &quot;</span> &lt;&lt; std::distance(m_holes.begin(), m_holes_pending_end) &lt;&lt; std::endl;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; Pending holes&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> k = m_holes_pending_begin; k &lt; m_holes_pending_end; ++k) {</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        std::cout &lt;&lt; *k &lt;&lt; std::endl;</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;    }</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; m_first_pos: &quot;</span> &lt;&lt; m_first_pos &lt;&lt; std::endl;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; m_last_pos: &quot;</span> &lt;&lt;  m_last_pos &lt;&lt; std::endl;</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; Stored ids: &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keywordflow">if</span> (m_ids.size() &gt; 0) {</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt;= m_last_pos; ++k) {</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;            std::cout &lt;&lt; m_ids[k] &lt;&lt; std::endl;</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        }</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;None&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    }</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    std::cout &lt;&lt; std::endl;</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; Poistion map: &quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keywordflow">if</span> (m_pos.size() &gt; 0) {</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> itr = m_pos.cbegin(); itr != m_pos.cend(); ++itr) {</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            std::cout &lt;&lt; itr-&gt;first &lt;&lt; <span class="stringliteral">&quot; -&gt; &quot;</span> &lt;&lt; itr-&gt;second &lt;&lt; std::endl;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        }</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;None&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    }</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;----------------------------------------&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;}</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l00996"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ad93a7a1c6e0161a70377b58ec7f2e7d5">  996</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ad93a7a1c6e0161a70377b58ec7f2e7d5">PiercedVector&lt;value_t, id_t&gt;::empty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;    <span class="keywordflow">return</span> m_pos.empty();</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01014"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aaae7ec055a992053b9c09d60c3b68933"> 1014</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aaae7ec055a992053b9c09d60c3b68933">PiercedVector&lt;value_t, id_t&gt;::isIteratorSlow</a>()</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;{</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">return</span> (m_first_dirty_pos &lt;= m_last_pos);</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;}</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01029"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a23490277681f1dff7760efcdc7763769"> 1029</a></span>&#160;std::size_t <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a23490277681f1dff7760efcdc7763769">PiercedVector&lt;value_t, id_t&gt;::maxSize</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keywordflow">return</span> m_v.max_size();</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;}</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01043"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03"> 1043</a></span>&#160;std::size_t <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03">PiercedVector&lt;value_t, id_t&gt;::size</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <span class="keywordflow">return</span> m_pos.size();</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;}</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01056"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89"> 1056</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">PiercedVector&lt;value_t, id_t&gt;::exists</a>(id_t <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;    <span class="keywordflow">return</span> (m_pos.count(<span class="keywordtype">id</span>) != 0);</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;}</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01073"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a24d343798113ee633329df20374ab0d7"> 1073</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a24d343798113ee633329df20374ab0d7">PiercedVector&lt;value_t, id_t&gt;::find</a>(id_t <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keywordflow">if</span> (!exists(<span class="keywordtype">id</span>)) {</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;        <span class="keywordflow">return</span> cend();</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    }</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;    <span class="keywordflow">return</span> getConstIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;}</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01093"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aa1a4fa27d6134653af6d0874bdcbfde6"> 1093</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a24d343798113ee633329df20374ab0d7">PiercedVector&lt;value_t, id_t&gt;::find</a>(id_t <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;{</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <span class="keywordflow">if</span> (!exists(<span class="keywordtype">id</span>)) {</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;        <span class="keywordflow">return</span> end();</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    }</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keywordflow">return</span> getIterator(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;}</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01118"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a4f72b7fa1c9c14f252ba275cccc073c1"> 1118</a></span>&#160;std::size_t <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4f72b7fa1c9c14f252ba275cccc073c1">PiercedVector&lt;value_t, id_t&gt;::evalFlatIndex</a>(id_t <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;{</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    <span class="keywordtype">size_t</span> pos  = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;    <span class="comment">// Initialize flat id with the position of the element</span></div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <span class="keywordtype">size_t</span> flat = pos;</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="comment">// Subtract pending holes before position</span></div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    <span class="keywordflow">if</span> (holesCountPending() &gt; 0) {</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;        holesSortPending();</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        <span class="keyword">auto</span> hole_itr = std::upper_bound(m_holes_pending_begin, m_holes_pending_end, pos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="keywordtype">size_t</span> nHolesBefore = std::distance(hole_itr, m_holes_pending_end);</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;        flat -= nHolesBefore;</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;    }</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    <span class="comment">// Subtract regular holes before position</span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;    <span class="keywordflow">if</span> (holesCountRegular() &gt; 0) {</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;        holesSortRegular();</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keyword">auto</span> hole_itr = std::upper_bound(m_holes_regular_begin, m_holes_regular_end, pos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        <span class="keywordtype">size_t</span> nHolesBefore = std::distance(hole_itr, m_holes_regular_end);</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        flat -= nHolesBefore;</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;    }</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;    <span class="keywordflow">return</span> flat;</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;}</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01158"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a9c697605f6f8bb2f4aff3da3ad762873"> 1158</a></span>&#160;std::vector&lt;id_t&gt; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a9c697605f6f8bb2f4aff3da3ad762873">PiercedVector&lt;value_t, id_t&gt;::getIds</a>(<span class="keywordtype">bool</span> ordered)</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;{</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;    <span class="comment">// Initialize the vector wth the ids</span></div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    std::vector&lt;id_t&gt; ids;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;    <span class="keywordflow">if</span> (size() == 0) {</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        <span class="keywordflow">return</span> ids;</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;    }</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;    ids.reserve(size());</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;    <span class="comment">// Extract the ids</span></div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <span class="keywordtype">size_t</span> pos = m_first_pos;</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;    ids.push_back(m_ids[pos]);</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        pos = findNextUsedPos(pos);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        ids.push_back(m_ids[pos]);</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;    } <span class="keywordflow">while</span> (pos != m_last_pos);</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="comment">// Sort the ids</span></div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="keywordflow">if</span> (ordered) {</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;        std::sort(ids.begin(), ids.end());</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;    }</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;    <span class="keywordflow">return</span> ids;</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;}</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01198"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#abe77e82a9cb5494227aa981bd92b32ea"> 1198</a></span>&#160;id_t <a class="code" href="classbitpit_1_1PiercedVector.xhtml#abe77e82a9cb5494227aa981bd92b32ea">PiercedVector&lt;value_t, id_t&gt;::getSizeMarker</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> &amp;targetSize, <span class="keyword">const</span> id_t &amp;fallback)</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;{</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="comment">// If the size is zero, we return the first element, if the target</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;    <span class="comment">// size is equal to the size minus one we return the last element,</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;    <span class="comment">// if the target size is greater or equal the current container size</span></div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;    <span class="comment">// we return the fallback value.</span></div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordflow">if</span> (targetSize &gt;= size()) {</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        <span class="keywordflow">return</span> fallback;</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (targetSize == 0) {</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;        <span class="keywordflow">return</span> m_ids[m_first_pos];</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (targetSize == (size() - 1)) {</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        <span class="keywordflow">return</span> m_ids[m_last_pos];</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;    }</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    <span class="comment">// Sort the holes</span></div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    holesSortRegular();</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;    holesSortPending();</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;    <span class="comment">// Iterate to find the position before wihch there is the</span></div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;    <span class="comment">// requeste number of element.</span></div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;    hole_iterator regular_hole_itr = m_holes_regular_end;</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;    hole_iterator pending_hole_itr = m_holes_pending_end;</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    std::size_t nEmpties  = 0;</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;    std::size_t markerPos = targetSize;</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        <span class="keywordflow">if</span> (isPosEmpty(markerPos)) {</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;            markerPos = findNextUsedPos(markerPos - 1);</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        }</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        <span class="comment">// Count the number of holes and pending deletes before the</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        <span class="comment">// current marker position</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        <span class="keywordflow">if</span> (regular_hole_itr != m_holes_regular_begin) {</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;            hole_iterator itr_previous = regular_hole_itr;</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;            regular_hole_itr = std::upper_bound(m_holes_regular_begin, regular_hole_itr, markerPos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;            nEmpties += std::distance(regular_hole_itr, itr_previous);</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        }</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        <span class="keywordflow">if</span> (pending_hole_itr != m_holes_pending_begin) {</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;            hole_iterator itr_previous = pending_hole_itr;</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;            pending_hole_itr = std::upper_bound(m_holes_pending_begin, pending_hole_itr, markerPos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;            nEmpties += std::distance(pending_hole_itr, itr_previous);</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        }</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        <span class="comment">// Get the marker size</span></div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        <span class="comment">// If we have reached the target size we can exit, otherwise</span></div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <span class="comment">// we update the marker and we continue iterating</span></div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        std::size_t markerSize = markerPos - nEmpties;</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        <span class="keywordflow">if</span> (markerSize == targetSize) {</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;            markerPos += targetSize - markerSize;</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        }</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    }</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    <span class="keywordflow">return</span> m_ids[markerPos];</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;}</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01266"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ab3b11e03d659bf5e1f2f9d9d7dd334da"> 1266</a></span>&#160;value_t * <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab3b11e03d659bf5e1f2f9d9d7dd334da">PiercedVector&lt;value_t, id_t&gt;::data</a>() noexcept</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;{</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    <span class="keywordflow">return</span> m_v.data();</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;}</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01278"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ab0c941c40e0605bb34507b0733c8fe0a"> 1278</a></span>&#160;value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab0c941c40e0605bb34507b0733c8fe0a">PiercedVector&lt;value_t, id_t&gt;::back</a>()</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;{</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;    <span class="keywordflow">if</span> (empty()) {</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Vector is empty&quot;</span>);</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;    }</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;    <span class="keywordflow">return</span> m_v[m_last_pos];</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;}</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01294"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a7213a9d291dda017f0a40acf6a1776b7"> 1294</a></span>&#160;<span class="keyword">const</span> value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab0c941c40e0605bb34507b0733c8fe0a">PiercedVector&lt;value_t, id_t&gt;::back</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    <span class="keywordflow">if</span> (empty()) {</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Vector is empty&quot;</span>);</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    }</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;    <span class="keywordflow">return</span> m_v[m_last_pos];</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;}</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01310"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#af467b88bad3f1c743c4e97b4f5b5bad6"> 1310</a></span>&#160;value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#af467b88bad3f1c743c4e97b4f5b5bad6">PiercedVector&lt;value_t, id_t&gt;::front</a>()</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;{</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    <span class="keywordflow">if</span> (empty()) {</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Vector is empty&quot;</span>);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;    }</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <span class="keywordflow">return</span> m_v[m_first_pos];</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;}</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01326"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ac3fffb5b037ca28a976f8aac26187200"> 1326</a></span>&#160;<span class="keyword">const</span> value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#af467b88bad3f1c743c4e97b4f5b5bad6">PiercedVector&lt;value_t, id_t&gt;::front</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;    <span class="keywordflow">if</span> (empty()) {</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Vector is empty&quot;</span>);</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;    }</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;    <span class="keywordflow">return</span> m_v[m_first_pos];</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;}</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01344"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ab5c79b351e240896fdabfcf76bc065ce"> 1344</a></span>&#160;value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab5c79b351e240896fdabfcf76bc065ce">PiercedVector&lt;value_t, id_t&gt;::at</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;{</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[id];</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;}</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01359"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#afcaf8830634ff890cfdf9b21ddf17be1"> 1359</a></span>&#160;<span class="keyword">const</span> value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab5c79b351e240896fdabfcf76bc065ce">PiercedVector&lt;value_t, id_t&gt;::at</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    <span class="keywordflow">return</span> (*<span class="keyword">this</span>)[id];</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;}</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01371"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a725120c2edd925dbd3e234bd6bd82d7e"> 1371</a></span>&#160;value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a725120c2edd925dbd3e234bd6bd82d7e">PiercedVector&lt;value_t, id_t&gt;::rawAt</a>(<span class="keyword">const</span> std::size_t &amp;pos)</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;{</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keywordflow">return</span> m_v[pos];</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;}</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01385"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#af57c5d90fbf624c4996ce6b47c12f655"> 1385</a></span>&#160;<span class="keyword">const</span> value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a725120c2edd925dbd3e234bd6bd82d7e">PiercedVector&lt;value_t, id_t&gt;::rawAt</a>(<span class="keyword">const</span> std::size_t &amp;pos)<span class="keyword"> const</span></div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    <span class="keywordflow">return</span> m_v[pos];</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;}</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01400"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#aa36967ac921e52f2de937f3a7048bffd"> 1400</a></span>&#160;std::size_t <a class="code" href="classbitpit_1_1PiercedVector.xhtml#aa36967ac921e52f2de937f3a7048bffd">PiercedVector&lt;value_t, id_t&gt;::rawIndex</a>(id_t <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <span class="keywordflow">return</span> getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;}</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01415"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a80ef47e907e2227727623a6dea9431e5"> 1415</a></span>&#160;<span class="keyword">const</span> value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a80ef47e907e2227727623a6dea9431e5">PiercedVector&lt;value_t, id_t&gt;::operator[]</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;    std::size_t pos = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    <span class="keywordflow">return</span> m_v[pos];</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;}</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01431"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a8602a25ad269c81e04bf0420769df1dd"> 1431</a></span>&#160;value_t &amp; <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a80ef47e907e2227727623a6dea9431e5">PiercedVector&lt;value_t, id_t&gt;::operator[]</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;{</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;    std::size_t pos = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;    <span class="keywordflow">return</span> m_v[pos];</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;}</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01445"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a3c7d5712ef62ee4505f4409de7d143cd"> 1445</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3c7d5712ef62ee4505f4409de7d143cd">PiercedVector&lt;value_t, id_t&gt;::getIterator</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>) noexcept</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;{</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pos = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(pos);</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;}</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01459"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ace10f3a8be648dd852f371bb6b6905c7"> 1459</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ace10f3a8be648dd852f371bb6b6905c7">PiercedVector&lt;value_t, id_t&gt;::getConstIterator</a>(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>) <span class="keyword">const</span> noexcept</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;{</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> pos = getPosFromId(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    <span class="keywordflow">return</span> getConstIteratorFromPos(pos);</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;}</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01473"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a"> 1473</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">PiercedVector&lt;value_t, id_t&gt;::begin</a>() noexcept</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;{</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(m_first_pos);</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;}</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01486"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58"> 1486</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">PiercedVector&lt;value_t, id_t&gt;::end</a>() noexcept</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;{</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <span class="keywordflow">return</span> getIteratorFromPos(m_last_pos + 1);</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;}</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01499"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a25fcc1ddb4b18e604e8ee653707a0089"> 1499</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">PiercedVector&lt;value_t, id_t&gt;::begin</a>() const noexcept</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;{</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="keywordflow">return</span> cbegin();</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;}</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01512"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a00e4e61f3dbfa0eb4787a29b2a4522c9"> 1512</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">PiercedVector&lt;value_t, id_t&gt;::end</a>() const noexcept</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;{</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;    <span class="keywordflow">return</span> cend();</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;}</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01525"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ad46c1db0150d6e7e58827f9427cdce02"> 1525</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ad46c1db0150d6e7e58827f9427cdce02">PiercedVector&lt;value_t, id_t&gt;::cbegin</a>() const noexcept</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;{</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;    <span class="keywordflow">return</span> getConstIteratorFromPos(m_first_pos);</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;}</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01538"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a16bca1a2590190d87694ea6a374c7bfd"> 1538</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a16bca1a2590190d87694ea6a374c7bfd">PiercedVector&lt;value_t, id_t&gt;::cend</a>() const noexcept</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;{</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    <span class="keywordflow">return</span> getConstIteratorFromPos(m_last_pos + 1);</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;}</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01551"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ab020ae5ec51bdce38c574f87de38b287"> 1551</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a0ea9a4cbb8e705a7f8b8da6f789d89f4">PiercedVector&lt;value_t, id_t&gt;::raw_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab020ae5ec51bdce38c574f87de38b287">PiercedVector&lt;value_t, id_t&gt;::rawBegin</a>() noexcept</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;{</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    <span class="keywordflow">return</span> m_v.begin();</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;}</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01564"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#ac4b6af0989a615a6c87d501669470152"> 1564</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a0ea9a4cbb8e705a7f8b8da6f789d89f4">PiercedVector&lt;value_t, id_t&gt;::raw_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac4b6af0989a615a6c87d501669470152">PiercedVector&lt;value_t, id_t&gt;::rawEnd</a>() noexcept</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;{</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    <span class="keywordflow">return</span> m_v.end();</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;}</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01577"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a191f4760d227be4d56339c3449289711"> 1577</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3fb3bb29f55d9068f8590b3909423ac8">PiercedVector&lt;value_t, id_t&gt;::raw_const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ab020ae5ec51bdce38c574f87de38b287">PiercedVector&lt;value_t, id_t&gt;::rawBegin</a>() const noexcept</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;{</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    <span class="keywordflow">return</span> rawCbegin();</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;}</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01590"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#acb40fc0637d29d81114d27d2da7c069a"> 1590</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3fb3bb29f55d9068f8590b3909423ac8">PiercedVector&lt;value_t, id_t&gt;::raw_const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#ac4b6af0989a615a6c87d501669470152">PiercedVector&lt;value_t, id_t&gt;::rawEnd</a>() const noexcept</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;{</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <span class="keywordflow">return</span> rawCend();</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;}</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01603"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a3eb5e28568a6147c952d2e9a4c3f9de8"> 1603</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3fb3bb29f55d9068f8590b3909423ac8">PiercedVector&lt;value_t, id_t&gt;::raw_const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3eb5e28568a6147c952d2e9a4c3f9de8">PiercedVector&lt;value_t, id_t&gt;::rawCbegin</a>() const noexcept</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;{</div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;    <span class="keywordflow">return</span> m_v.cbegin();</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;}</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01616"></a><span class="lineno"><a class="line" href="classbitpit_1_1PiercedVector.xhtml#a67af028bcf1a6153b624dfbe58af32e7"> 1616</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a3fb3bb29f55d9068f8590b3909423ac8">PiercedVector&lt;value_t, id_t&gt;::raw_const_iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml#a67af028bcf1a6153b624dfbe58af32e7">PiercedVector&lt;value_t, id_t&gt;::rawCend</a>() const noexcept</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;{</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    <span class="keywordflow">return</span> m_v.cend();</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;}</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;<span class="keyword">typename</span> <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">PiercedVector&lt;value_t, id_t&gt;::iterator</a> <a class="code" href="classbitpit_1_1PiercedVector.xhtml">PiercedVector&lt;value_t, id_t&gt;::getIteratorFromPos</a>(<span class="keyword">const</span> std::size_t &amp;pos) noexcept</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;{</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;    <span class="keywordflow">if</span> (empty() || pos &gt; m_last_pos) {</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;        <span class="keywordflow">return</span> iterator(<span class="keyword">this</span>, m_last_pos + 1);</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        <span class="keywordflow">return</span> iterator(<span class="keyword">this</span>, pos);</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;    }</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;}</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;<span class="keyword">typename</span> PiercedVector&lt;value_t, id_t&gt;::const_iterator PiercedVector&lt;value_t, id_t&gt;::getConstIteratorFromPos(<span class="keyword">const</span> std::size_t &amp;pos) <span class="keyword">const</span> noexcept</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;{</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <span class="keywordflow">if</span> (empty() || pos &gt; m_last_pos) {</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;        <span class="keywordflow">return</span> const_iterator(<span class="keyword">this</span>, m_last_pos + 1);</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;        <span class="keywordflow">return</span> const_iterator(<span class="keyword">this</span>, pos);</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;    }</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;}</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPos(<span class="keyword">const</span> std::size_t &amp;pos, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;{</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;    <span class="comment">// Ids needs to be positive</span></div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;    <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &lt; 0) {</div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Negative id&quot;</span>);</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;    }</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;    <span class="comment">// Handle duplicate ids</span></div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;    <span class="keywordflow">if</span> (exists(<span class="keywordtype">id</span>)) {</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Duplicate id&quot;</span>);</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;    }</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;    <span class="comment">// Associate an id to the position</span></div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;    setPosId(pos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;}</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPosAppend(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;{</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    <span class="keywordflow">return</span> fillPosInsert(storageSize(), <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;}</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPosInsert(<span class="keyword">const</span> std::size_t &amp;pos, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;{</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;    assert(pos &lt;= m_last_pos + 1);</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;    <span class="keywordflow">if</span> (pos &gt; m_last_pos + 1) {</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;        <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Unable to insert elements past the last position&quot;</span>);</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;    }</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;    <span class="comment">// Extend the container</span></div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;    updateLastUsedPos(storageSize());</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;    <span class="comment">// Make room for the new element</span></div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;    <span class="keywordflow">if</span> (pos &lt; m_last_pos) {</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;        <span class="comment">// Shift the elements after the requested position</span></div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = m_last_pos; i &gt; pos; --i) {</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;            id_t <span class="keywordtype">id</span> = m_ids[i - 1];</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt;= 0) {</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;                setPosId(i, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;                m_v[i] = std::move(m_v[i - 1]);</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;                m_ids[i] = m_ids[i - 1];</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;            }</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;        }</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;        <span class="comment">// Reset the, now empty, element</span></div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;        m_v[pos] = value_t();</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;        <span class="comment">// Update the regular holes</span></div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;        <span class="keywordflow">if</span> (m_holes_regular_begin != m_holes_regular_end) {</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;            hole_iterator change_begin = m_holes_regular_begin;</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;            hole_iterator change_end   = upper_bound(m_holes_regular_begin, m_holes_regular_end, pos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> itr = change_begin; itr != change_end; itr++) {</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;                (*itr)++;</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;            }</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;        }</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;        <span class="comment">// Update the pending holes</span></div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;        <span class="keywordflow">if</span> (m_holes_pending_begin != m_holes_pending_end) {</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;            hole_iterator change_begin = m_holes_pending_begin;</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;            hole_iterator change_end   = upper_bound(m_holes_pending_begin, m_holes_pending_end, pos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> itr = change_begin; itr != change_end; itr++) {</div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;                (*itr)++;</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;            }</div>
<div class="line"><a name="l01746"></a><span class="lineno"> 1746</span>&#160;        }</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;    }</div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;</div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;    <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l01750"></a><span class="lineno"> 1750</span>&#160;    fillPos(pos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;</div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;    <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;}</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01765"></a><span class="lineno"> 1765</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPosHead(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;{</div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;    <span class="comment">// If there are holes we can fill a hole.</span></div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;    <span class="keywordtype">long</span> nRegulars = holesCountRegular();</div>
<div class="line"><a name="l01769"></a><span class="lineno"> 1769</span>&#160;    <span class="keywordtype">long</span> nPendings = holesCountPending();</div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;    <span class="keywordtype">long</span> nHoles    = nRegulars + nPendings;</div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;    <span class="keywordflow">if</span> (nHoles != 0) {</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;        <span class="comment">// Sort the holes</span></div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;        <span class="keywordflow">if</span> (m_holes_pending_begin != m_holes_pending_end) {</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;            holesSortPending();</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;            holesSortRegular();</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;        }</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;        <span class="comment">// The last element of the hole&#39;s container is the hole we need to</span></div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;        <span class="comment">// use if we are filling from the head.</span></div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;        std::size_t pos = m_holes.back();</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;        m_holes.pop_back();</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;        <span class="comment">// Update the iterators</span></div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;        <span class="keywordflow">if</span> (nHoles == 1) {</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;            holesClear();</div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nPendings == 1) {</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;            holesClearPending();</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nPendings &gt; 1) {</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;            --m_holes_pending_end;</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;            --m_holes_regular_end;</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;            --m_holes_pending_begin;</div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;            --m_holes_pending_end;</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;        }</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;        <span class="comment">// Update first position counter</span></div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01799"></a><span class="lineno"> 1799</span>&#160;        <span class="comment">// If the vector contains a hole, this means that is not empty</span></div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;        <span class="comment">// and that the hole is before the last element, therefore</span></div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;        <span class="comment">// only the first position counter may have changed.</span></div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;        <span class="keywordflow">if</span> (pos &lt; m_first_pos) {</div>
<div class="line"><a name="l01803"></a><span class="lineno"> 1803</span>&#160;            updateFirstUsedPos(pos);</div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;        }</div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;</div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;        <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;        <span class="keywordflow">return</span> fillPos(pos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;    }</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;    <span class="comment">// There are no holes nor pending delete: use an append fill.</span></div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;    <span class="keywordflow">return</span> fillPosAppend(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;}</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPosTail(<span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;{</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;    <span class="comment">// If there are holes we can fill a hole.</span></div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;    <span class="keywordtype">long</span> nRegulars = holesCountRegular();</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;    <span class="keywordtype">long</span> nPendings = holesCountPending();</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;    <span class="keywordtype">long</span> nHoles    = nRegulars + nPendings;</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;    <span class="keywordflow">if</span> (nHoles != 0) {</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;        <span class="comment">// First search among pendings and the among regulars</span></div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;        std::size_t pos;</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;        <span class="keywordflow">if</span> (m_holes_pending_begin != m_holes_pending_end) {</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;            holesSortPending();</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;            pos = *m_holes_pending_begin;</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;            holesSortRegular();</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;            pos = *m_holes_regular_begin;</div>
<div class="line"><a name="l01839"></a><span class="lineno"> 1839</span>&#160;        }</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;</div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;        <span class="comment">// Update the iterators</span></div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;        <span class="keywordflow">if</span> (nHoles == 1) {</div>
<div class="line"><a name="l01843"></a><span class="lineno"> 1843</span>&#160;            holesClear();</div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nPendings == 1) {</div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;            holesClearPending();</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (nPendings &gt; 1) {</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;            ++m_holes_pending_begin;</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;            ++m_holes_regular_begin;</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;        }</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;        <span class="comment">// Update first position counter</span></div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;        <span class="comment">// It is not possible that a hole is past the last element of the</span></div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;        <span class="comment">// vector. We should olny consider that case where a holes is</span></div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;        <span class="comment">// below the first element.</span></div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;        <span class="keywordflow">if</span> (pos &lt; m_first_pos) {</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;            updateFirstUsedPos(pos);</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;        }</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;        <span class="comment">// If previos element is a hole, its id and the ids of the</span></div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;        <span class="comment">// contigous holes need to be udated</span></div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;        <span class="keywordflow">if</span> (pos &gt; 0) {</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;            std::size_t nextUsedPos = pos;</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;            std::size_t prevPos = pos - 1;</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;            <span class="keywordflow">while</span> (isPosEmpty(prevPos)) {</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;                setEmptyPosId(prevPos, nextUsedPos);</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;                <span class="keywordflow">if</span> (prevPos &gt; 0) {</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;                    --prevPos;</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;                }</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;            }</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;        }</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;        <span class="comment">// Fill the position</span></div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;        <span class="keywordflow">return</span> fillPos(pos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;    }</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;    <span class="comment">// There are no holes nor pending delete: use an append fill.</span></div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;    <span class="keywordflow">return</span> fillPosAppend(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;}</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;</div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPosAfter(<span class="keyword">const</span> std::size_t &amp;referencePos, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;{</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;    <span class="comment">// Check if we can fill a hole</span></div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;    <span class="comment">// The last hole should hava a position higher than the reference</span></div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;    <span class="comment">// position</span></div>
<div class="line"><a name="l01902"></a><span class="lineno"> 1902</span>&#160;    <span class="keywordflow">if</span> (holesCount() != 0) {</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;        <span class="comment">// First search among pendings and the among regulars</span></div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;        std::size_t lastHole;</div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;        <span class="keywordflow">if</span> (m_holes_pending_begin != m_holes_pending_end) {</div>
<div class="line"><a name="l01906"></a><span class="lineno"> 1906</span>&#160;            holesSortPending();</div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;            lastHole = *(m_holes_pending_begin);</div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;            holesSortRegular();</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;            lastHole = *(m_holes_regular_begin);</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;        }</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;        <span class="keywordflow">if</span> (lastHole &gt; referencePos) {</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;            <span class="keywordflow">return</span> fillPosTail(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;        }</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;    }</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;    <span class="comment">// We have to append the element at the end of the vector</span></div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;    <span class="keywordflow">return</span> fillPosAppend(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;}</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::fillPosBefore(<span class="keyword">const</span> std::size_t &amp;referencePos, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;{</div>
<div class="line"><a name="l01936"></a><span class="lineno"> 1936</span>&#160;    <span class="comment">// Check if we can fill a hole</span></div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;    <span class="comment">// The first hole available should be in a position lower than the</span></div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;    <span class="comment">// reference position.</span></div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;    <span class="keywordflow">if</span> (holesCount() != 0) {</div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;        <span class="comment">// First search among pendings and the among regulars</span></div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;        std::size_t firstHole;</div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;        <span class="keywordflow">if</span> (m_holes_pending_begin != m_holes_pending_end) {</div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;            holesSortPending();</div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;            firstHole = *(m_holes_pending_end - 1);</div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;            holesSortRegular();</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;            firstHole = *(m_holes_regular_end - 1);</div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;        }</div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;</div>
<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;        <span class="keywordflow">if</span> (firstHole &lt; referencePos) {</div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;            <span class="keywordflow">return</span> fillPosHead(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;        }</div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;    }</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;</div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;    <span class="comment">// We have to insert the element at the specified position</span></div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;    <span class="keywordflow">return</span> fillPosInsert(referencePos, <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;}</div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l01972"></a><span class="lineno"> 1972</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::piercePos(<span class="keyword">const</span> std::size_t &amp;pos, <span class="keywordtype">bool</span> flush)</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;{</div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;    <span class="comment">// If removing the last position, there is no need to add the</span></div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;    <span class="comment">// position to the holes, it&#39;s enough to update the last position</span></div>
<div class="line"><a name="l01976"></a><span class="lineno"> 1976</span>&#160;    <span class="comment">// counter or clear the container if this was the last hole.</span></div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;    <span class="keywordflow">if</span> (pos == m_last_pos) {</div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;        <span class="keywordflow">if</span> (size() == 1) {</div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;            clear();</div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;            std::size_t updated_last_pos = findPrevUsedPos(m_last_pos);</div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;            updateLastUsedPos(updated_last_pos);</div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;        }</div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;    }</div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;</div>
<div class="line"><a name="l01987"></a><span class="lineno"> 1987</span>&#160;    <span class="comment">// Remove the id from the map</span></div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;    id_t <span class="keywordtype">id</span> = m_ids[pos];</div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;    m_pos.erase(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;</div>
<div class="line"><a name="l01991"></a><span class="lineno"> 1991</span>&#160;    <span class="comment">// Reset the element</span></div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;    m_v[pos] = value_t();</div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;</div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;    <span class="comment">// Reset the position</span></div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;    <span class="keywordtype">size_t</span> nextUsedPos = findNextUsedPos(pos);</div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;    setEmptyPosId(pos, nextUsedPos);</div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;    m_first_dirty_pos = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>(pos, m_first_dirty_pos);</div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;</div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;    <span class="comment">// If removing the first position, update the counter</span></div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;    <span class="keywordflow">if</span> (pos == m_first_pos) {</div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;        std::size_t updated_first_pos = findNextUsedPos(m_first_pos);</div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;        updateFirstUsedPos(updated_first_pos);</div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;    }</div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;</div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;    <span class="comment">// If the list of pending holes is full, flush the holes.</span></div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;    <span class="keywordflow">if</span> (m_holes.size() == m_holes.capacity()) {</div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;        holesFlush();</div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;    }</div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;</div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;    <span class="comment">// Add the hole at the end of the pending holes</span></div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;    m_holes.push_back(pos);</div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;    m_holes_pending_end = m_holes.end();</div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;</div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;    <span class="comment">// Check if pending holes are still sorted</span></div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;    <span class="keywordflow">if</span> (m_holes_pending_sorted) {</div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;        <span class="keywordtype">size_t</span> nPendings = holesCountPending();</div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;        <span class="keywordflow">if</span> (nPendings &gt; 1 &amp;&amp; (*(m_holes_pending_end - 1) &gt; *(m_holes_pending_end - 2))) {</div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;            m_holes_pending_sorted = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;        }</div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;    }</div>
<div class="line"><a name="l02021"></a><span class="lineno"> 2021</span>&#160;</div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;    <span class="comment">// Flush</span></div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;    <span class="keywordflow">if</span> (flush) {</div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;        holesFlush();</div>
<div class="line"><a name="l02025"></a><span class="lineno"> 2025</span>&#160;    }</div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;}</div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;</div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::holesClear(<span class="keywordtype">bool</span> release)</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;{</div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;    m_holes.clear();</div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;    <span class="keywordflow">if</span> (release) {</div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;        hole_container().swap(m_holes);</div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;    }</div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;</div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;    <span class="comment">// Clearing peinding holes updates also the iterators of the regular ones</span></div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;    holesClearPending(0, 0);</div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;</div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;    <span class="comment">// There are no regular holes, therefore the regular holes are sorted</span></div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;    m_holes_regular_sorted = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;}</div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;</div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::holesCount()</div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;{</div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;    <span class="keywordflow">return</span> holesCountPending() + holesCountRegular();</div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;}</div>
<div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;</div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::holesCountPending()</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;{</div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;    <span class="keywordflow">return</span> std::distance(m_holes_pending_begin, m_holes_pending_end);</div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;}</div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;</div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::holesCountRegular()</div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;{</div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;    <span class="keywordflow">return</span> std::distance(m_holes_regular_begin, m_holes_regular_end);</div>
<div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;}</div>
<div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;</div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::holesFlush()</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;{</div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;    <span class="comment">// If there are no pending holes there is nothing to do</span></div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;    <span class="keywordflow">if</span> (m_holes_pending_begin == m_holes_pending_end) {</div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;    }</div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;</div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;    <span class="comment">// Update the id of the empty elements</span></div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;    <span class="comment">// The list of pending holes is sorted, in this way we can iterate</span></div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;    <span class="comment">// from the last pending hole in the container to the first one.</span></div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;    <span class="comment">// We start updating the id of the last pending hole, updating also</span></div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;    <span class="comment">// the id of the contiguous holes before that one. Then we advance</span></div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;    <span class="comment">// to the next hole, skipping the positions that have already been</span></div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;    <span class="comment">// updated.</span></div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;    holesSortPending();</div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;</div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;    <span class="keyword">auto</span> itr = m_holes_pending_begin;</div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;    <span class="keywordtype">size_t</span> pos = m_last_pos + 1;</div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;    <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;        <span class="keywordflow">if</span> (*itr &gt;= pos) {</div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;            itr++;</div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;        }</div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;</div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;        pos = *itr;</div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;        <span class="keywordtype">size_t</span> next_used_pos = findNextUsedPos(pos);</div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;        <span class="keywordflow">do</span> {</div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;            setEmptyPosId(pos, next_used_pos);</div>
<div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;            <span class="keywordflow">if</span> (pos &gt; 0) {</div>
<div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;                pos--;</div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;            }</div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;        } <span class="keywordflow">while</span> (isPosEmpty(pos));</div>
<div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;    } <span class="keywordflow">while</span> (pos &gt; 0 &amp;&amp; itr != m_holes_pending_end);</div>
<div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;</div>
<div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;    <span class="comment">// Move the pending holes into the list of regular holes</span></div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> itr = m_holes_pending_begin; itr != m_holes_pending_end; ++itr) {</div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;        <span class="keyword">const</span> std::size_t &amp;pos = *itr;</div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;</div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;        <span class="comment">// If there is space available at the beginning of the holes, try</span></div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;        <span class="comment">// using pending holes to fill that gap.</span></div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;        <span class="keywordflow">if</span> (m_holes_regular_begin != m_holes.begin()) {</div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;            --m_holes_regular_begin;</div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;            *m_holes_regular_begin = pos;</div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;</div>
<div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;            <span class="comment">// Regular holes are no more sorted</span></div>
<div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;            <span class="keywordflow">if</span> (m_holes_regular_sorted) {</div>
<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;                m_holes_regular_sorted = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;            }</div>
<div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;            <span class="keywordflow">if</span> (itr != m_holes_regular_end) {</div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;                *m_holes_regular_end = pos;</div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;            }</div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;            ++m_holes_regular_end;</div>
<div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;            ++m_holes_pending_begin;</div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;</div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;            <span class="comment">// Check if regular holes are still sorted</span></div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;            <span class="keywordflow">if</span> (m_holes_regular_sorted) {</div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;                std::size_t nRegulars = holesCountRegular();</div>
<div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;                <span class="keywordflow">if</span> (nRegulars &gt; 1 &amp;&amp; (*(m_holes_regular_end - 1) &gt; *(m_holes_regular_end - 2))) {</div>
<div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;                    m_holes_regular_sorted = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;                }</div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;            }</div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;        }</div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;    }</div>
<div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;</div>
<div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;    <span class="comment">// Move the holes at the beginning of the vector</span></div>
<div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;    <span class="comment">// The iterators will be updated when clearing the pending holes.</span></div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;    std::size_t nRegulars = holesCountRegular();</div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;    <span class="keywordflow">if</span> (m_holes_regular_begin != m_holes.begin()) {</div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;        std::size_t offset = std::distance(m_holes.begin(), m_holes_regular_begin);</div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;        <span class="keywordflow">for</span> (std::size_t k = 0; k &lt; nRegulars; ++k) {</div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;            m_holes[k] = m_holes[k + offset];</div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;        }</div>
<div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;    }</div>
<div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;</div>
<div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;    <span class="comment">// Resize the vector</span></div>
<div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;    holesClearPending(0, nRegulars);</div>
<div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;</div>
<div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;    <span class="comment">// There are no more dirty positions</span></div>
<div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;    m_first_dirty_pos = m_last_pos + 1;</div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;}</div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;</div>
<div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::holesClearPending()</div>
<div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;{</div>
<div class="line"><a name="l02178"></a><span class="lineno"> 2178</span>&#160;    <span class="keywordtype">long</span> offset    = std::distance(m_holes.begin(), m_holes_regular_begin);</div>
<div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;    <span class="keywordtype">long</span> nRegulars = holesCountRegular();</div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;    holesClearPending(offset, nRegulars);</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;}</div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;</div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::holesClearPending(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;offset, <span class="keyword">const</span> <span class="keywordtype">long</span> &amp;nRegulars)</div>
<div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;{</div>
<div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;    m_holes.reserve(offset + nRegulars + MAX_PENDING_HOLES);</div>
<div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;    m_holes.resize(offset + nRegulars);</div>
<div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;</div>
<div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;    m_holes_regular_begin = m_holes.begin() + offset;</div>
<div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;    m_holes_regular_end   = m_holes_regular_begin + nRegulars;</div>
<div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;    m_holes_pending_begin = m_holes_regular_end;</div>
<div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;    m_holes_pending_end   = m_holes_pending_begin;</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;    m_holes_pending_sorted = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;}</div>
<div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;</div>
<div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::holesSortPending()</div>
<div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;{</div>
<div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;    <span class="keywordflow">if</span> (m_holes_pending_sorted) {</div>
<div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;    }</div>
<div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;</div>
<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;    std::sort(m_holes_pending_begin, m_holes_pending_end, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;    m_holes_pending_sorted = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;}</div>
<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;</div>
<div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::holesSortRegular()</div>
<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;{</div>
<div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;    <span class="keywordflow">if</span> (m_holes_regular_sorted) {</div>
<div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;    }</div>
<div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;</div>
<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;    std::sort(m_holes_regular_begin, m_holes_regular_end, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;    m_holes_regular_sorted = <span class="keyword">true</span>;</div>
<div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;}</div>
<div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;</div>
<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::findPrevUsedPos(std::size_t pos)</div>
<div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;{</div>
<div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;    std::size_t prev_pos = pos;</div>
<div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;        <span class="keywordflow">if</span> (prev_pos == m_first_pos) {</div>
<div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;            <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Already in the firts position&quot;</span>);</div>
<div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;        }</div>
<div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;        prev_pos--;</div>
<div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;</div>
<div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;        id_t prev_id = m_ids[prev_pos];</div>
<div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;        <span class="keywordflow">if</span> (prev_id &gt;= 0) {</div>
<div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;            <span class="keywordflow">return</span> prev_pos;</div>
<div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;        }</div>
<div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;    }</div>
<div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;}</div>
<div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;</div>
<div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::findNextUsedPos(std::size_t pos)</div>
<div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;{</div>
<div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;    std::size_t next_pos   = pos;</div>
<div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    std::size_t next_delta = 1;</div>
<div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;        <span class="keywordflow">if</span> (next_pos == m_last_pos) {</div>
<div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;            <span class="keywordflow">throw</span> std::out_of_range (<span class="stringliteral">&quot;Already in the last position&quot;</span>);</div>
<div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;        }</div>
<div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;        next_pos += next_delta;</div>
<div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;</div>
<div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;        id_t next_id = m_ids[next_pos];</div>
<div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;        <span class="keywordflow">if</span> (next_id &gt;= 0) {</div>
<div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;            <span class="keywordflow">return</span> next_pos;</div>
<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;            next_delta = - next_id;</div>
<div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;        }</div>
<div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;    }</div>
<div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;}</div>
<div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;</div>
<div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;<span class="keywordtype">bool</span> PiercedVector&lt;value_t, id_t&gt;::isPosEmpty(std::size_t pos)</div>
<div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;{</div>
<div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;    <span class="keywordflow">return</span> (m_ids[pos] &lt; 0);</div>
<div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;}</div>
<div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;</div>
<div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::getPosFromId(id_t <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;    <span class="keywordflow">return</span> m_pos.at(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;}</div>
<div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;</div>
<div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::setPosId(<span class="keyword">const</span> std::size_t &amp;pos, <span class="keyword">const</span> id_t &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;{</div>
<div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;    m_ids[pos] = id;</div>
<div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;    m_pos[id]  = pos;</div>
<div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;</div>
<div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;    <span class="comment">// Update the position of the empty elements before the current one</span></div>
<div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;    <span class="comment">// It is necessary to ensure that the empty elements just before the</span></div>
<div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;    <span class="comment">// current one are correctly set, otherwise it will not be possible</span></div>
<div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;    <span class="comment">// to iterate through the container.</span></div>
<div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;    <span class="keywordtype">size_t</span> previousPos = pos;</div>
<div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;    <span class="keywordflow">while</span> (previousPos &gt; 0) {</div>
<div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;        --previousPos;</div>
<div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;        <span class="keywordflow">if</span> (!isPosEmpty(previousPos)) {</div>
<div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;        }</div>
<div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;</div>
<div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;        id_t previousId = m_ids[previousPos];</div>
<div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;        <span class="keywordflow">if</span> (previousId == -1 || (<span class="keywordtype">size_t</span>) <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(previousId) == (pos - previousPos)) {</div>
<div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02352"></a><span class="lineno"> 2352</span>&#160;        }</div>
<div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;</div>
<div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;        setEmptyPosId(previousPos, pos);</div>
<div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;    }</div>
<div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;}</div>
<div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;</div>
<div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::setEmptyPosId(<span class="keyword">const</span> std::size_t &amp;pos, <span class="keyword">const</span> std::size_t &amp;nextUsedPos)</div>
<div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;{</div>
<div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;    assert(nextUsedPos &gt; pos);</div>
<div class="line"><a name="l02375"></a><span class="lineno"> 2375</span>&#160;</div>
<div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;    m_ids[pos] = pos - nextUsedPos;</div>
<div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;}</div>
<div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;</div>
<div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::updateFirstUsedPos(<span class="keyword">const</span> std::size_t &amp;updated_first_pos)</div>
<div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;{</div>
<div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;    m_first_pos = updated_first_pos;</div>
<div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;}</div>
<div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;</div>
<div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::updateLastUsedPos(<span class="keyword">const</span> std::size_t &amp;updated_last_pos)</div>
<div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;{</div>
<div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;    <span class="comment">// Hole needs to be updated only if last position has been decrease</span></div>
<div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;    <span class="keywordtype">bool</span> update_holes = (holesCount() &gt; 0) &amp;&amp; (updated_last_pos &lt; m_last_pos);</div>
<div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;</div>
<div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;    <span class="comment">// Update the last position</span></div>
<div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;    m_last_pos = updated_last_pos;</div>
<div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;</div>
<div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;    <span class="comment">// Resize the vector</span></div>
<div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;    storageResize(m_last_pos + 1);</div>
<div class="line"><a name="l02402"></a><span class="lineno"> 2402</span>&#160;</div>
<div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;    <span class="comment">// If we don&#39;t need to update the holes we can exit now</span></div>
<div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;    <span class="keywordflow">if</span> (!update_holes) {</div>
<div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;    }</div>
<div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;</div>
<div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;    <span class="comment">// Remove regular holes beyond the updated last position</span></div>
<div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;    holesSortRegular();</div>
<div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;    m_holes_regular_begin = std::lower_bound(m_holes_regular_begin, m_holes_regular_end, m_last_pos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;    <span class="keywordflow">if</span> (m_holes_regular_begin == m_holes_regular_end) {</div>
<div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;        m_holes_regular_begin = m_holes.begin();</div>
<div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;        m_holes_regular_end   = m_holes_regular_begin;</div>
<div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;    }</div>
<div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;</div>
<div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;    <span class="comment">// Remove pending holes beyond the updated last position</span></div>
<div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;    holesSortPending();</div>
<div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;    m_holes_pending_begin = std::lower_bound(m_holes_pending_begin, m_holes_pending_end, m_last_pos, std::greater&lt;std::size_t&gt;());</div>
<div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;    <span class="keywordflow">if</span> (m_holes_pending_begin == m_holes_pending_end) {</div>
<div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;        m_holes_pending_begin = m_holes_regular_end;</div>
<div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;        m_holes_pending_end   = m_holes_pending_begin;</div>
<div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;    }</div>
<div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;</div>
<div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;    <span class="comment">// Resize the hole&#39;s container</span></div>
<div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;    <span class="keywordflow">if</span> (m_holes_pending_end != m_holes.end()) {</div>
<div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;        m_holes.resize(std::distance(m_holes.begin(), m_holes_pending_end));</div>
<div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;    }</div>
<div class="line"><a name="l02428"></a><span class="lineno"> 2428</span>&#160;}</div>
<div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;</div>
<div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;std::size_t PiercedVector&lt;value_t, id_t&gt;::storageSize()<span class="keyword"> const</span></div>
<div class="line"><a name="l02438"></a><span class="lineno"> 2438</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;    <span class="keywordflow">return</span> m_v.size();</div>
<div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;}</div>
<div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;</div>
<div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::storageResize(<span class="keywordtype">size_t</span> n)</div>
<div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;{</div>
<div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;    std::size_t initialSize = storageSize();</div>
<div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;    <span class="keywordflow">if</span> (n == initialSize + 1) {</div>
<div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;        m_v.emplace_back();</div>
<div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;        m_ids.emplace_back();</div>
<div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;        <span class="comment">// Delete the ids of the elements that will be removed</span></div>
<div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;        <span class="keywordflow">for</span> (std::size_t pos = n; pos &lt; initialSize; ++pos) {</div>
<div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;            id_t <span class="keywordtype">id</span> = m_ids[pos];</div>
<div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordtype">id</span> &gt;= 0) {</div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;                m_pos.erase(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;            }</div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;        }</div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;</div>
<div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;        <span class="comment">// Resize the internal vectors</span></div>
<div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;        m_ids.resize(n);</div>
<div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;        m_v.resize(n);</div>
<div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;    }</div>
<div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;}</div>
<div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;</div>
<div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> value_t, <span class="keyword">typename</span> <span class="keywordtype">id</span>_t&gt;</div>
<div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> order_t&gt;</div>
<div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;<span class="keywordtype">void</span> PiercedVector&lt;value_t, id_t&gt;::reorderVector(std::vector&lt;size_t&gt;&amp; order, std::vector&lt;order_t&gt;&amp; v, <span class="keyword">const</span> <span class="keywordtype">size_t</span> &amp;size)</div>
<div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;{</div>
<div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; size; i++) {</div>
<div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;        <span class="keywordtype">size_t</span> j;</div>
<div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;        <span class="keywordflow">while</span> (i != (j = order[i])) {</div>
<div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;            <span class="keywordtype">size_t</span> k = order[j];</div>
<div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;            order_t temp = std::move(v[j]);</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;            v[j] = std::move(v[k]);</div>
<div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;            v[k] = std::move(temp);</div>
<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;</div>
<div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;            std::swap(order[i], order[j]);</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;        }</div>
<div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;    }</div>
<div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;}</div>
<div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;</div>
<div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a6d561611780d75646c5795e06f6afe25"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a6d561611780d75646c5795e06f6afe25">bitpit::PiercedVector::emplaceAfter</a></div><div class="ttdeci">PiercedVector&lt; value_t, id_t &gt;::iterator emplaceAfter(const id_t &amp;referenceId, const id_t &amp;id, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00499">piercedVector.tpp:499</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aaae7ec055a992053b9c09d60c3b68933"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aaae7ec055a992053b9c09d60c3b68933">bitpit::PiercedVector::isIteratorSlow</a></div><div class="ttdeci">bool isIteratorSlow()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01014">piercedVector.tpp:1014</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator</a></div><div class="ttdoc">Iterator for the class PiercedVector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00057">piercedVector.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ae305e10cfe3fea9ff82dc3950cdb5b99"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ae305e10cfe3fea9ff82dc3950cdb5b99">bitpit::PiercedVector::resize</a></div><div class="ttdeci">void resize(std::size_t n)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00751">piercedVector.tpp:751</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_afd8b0436f3cd27da7cb019882c154d58"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#afd8b0436f3cd27da7cb019882c154d58">bitpit::PiercedVector::insertBefore</a></div><div class="ttdeci">iterator insertBefore(const id_t &amp;referenceId, const id_t &amp;id, const value_t &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00412">piercedVector.tpp:412</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a7a355a9f5efdc6446377f4a17ad51318"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a7a355a9f5efdc6446377f4a17ad51318">bitpit::PiercedVector::erase</a></div><div class="ttdeci">iterator erase(id_t id, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00604">piercedVector.tpp:604</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a3eb5e28568a6147c952d2e9a4c3f9de8"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a3eb5e28568a6147c952d2e9a4c3f9de8">bitpit::PiercedVector::rawCbegin</a></div><div class="ttdeci">raw_const_iterator rawCbegin() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01603">piercedVector.tpp:1603</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a67af028bcf1a6153b624dfbe58af32e7"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a67af028bcf1a6153b624dfbe58af32e7">bitpit::PiercedVector::rawCend</a></div><div class="ttdeci">raw_const_iterator rawCend() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01616">piercedVector.tpp:1616</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml">bitpit::PiercedVector</a></div><div class="ttdoc">Metafunction for generating a pierced vector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00040">piercedVector.hpp:40</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aeb8e6065e4b1aeb85080767b8d160f70"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aeb8e6065e4b1aeb85080767b8d160f70">bitpit::PiercedVector::updateId</a></div><div class="ttdeci">void updateId(const id_t &amp;currentId, const id_t &amp;updatedId)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00457">piercedVector.tpp:457</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a725120c2edd925dbd3e234bd6bd82d7e"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a725120c2edd925dbd3e234bd6bd82d7e">bitpit::PiercedVector::rawAt</a></div><div class="ttdeci">value_t &amp; rawAt(const std::size_t &amp;pos)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01371">piercedVector.tpp:1371</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a9c697605f6f8bb2f4aff3da3ad762873"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a9c697605f6f8bb2f4aff3da3ad762873">bitpit::PiercedVector::getIds</a></div><div class="ttdeci">std::vector&lt; id_t &gt; getIds(bool ordered=true)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01158">piercedVector.tpp:1158</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a82f2afa4b887e96dcc4e72c0cea64c32"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a82f2afa4b887e96dcc4e72c0cea64c32">bitpit::PiercedVector::emreplace</a></div><div class="ttdeci">PiercedVector&lt; value_t, id_t &gt;::iterator emreplace(id_t id, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00568">piercedVector.tpp:568</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ac9318ff19dff1e7ff1afdd7e24567385"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ac9318ff19dff1e7ff1afdd7e24567385">bitpit::PiercedVector::emplaceBefore</a></div><div class="ttdeci">PiercedVector&lt; value_t, id_t &gt;::iterator emplaceBefore(const id_t &amp;referenceId, const id_t &amp;id, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00545">piercedVector.tpp:545</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a08298683067fc9e162924600db7efb8a"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a08298683067fc9e162924600db7efb8a">bitpit::PiercedVector::emplaceBack</a></div><div class="ttdeci">void emplaceBack(const id_t &amp;id, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00521">piercedVector.tpp:521</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aab66c79deabb850a51746f16f2956a09"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aab66c79deabb850a51746f16f2956a09">bitpit::PiercedVector::reclaimAfter</a></div><div class="ttdeci">iterator reclaimAfter(const id_t &amp;referenceId, const id_t &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00249">piercedVector.tpp:249</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a673473ef8bd1070512b5a2e05a4ed9e7"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a673473ef8bd1070512b5a2e05a4ed9e7">bitpit::PiercedVector::moveAfter</a></div><div class="ttdeci">iterator moveAfter(const id_t &amp;referenceId, const id_t &amp;id, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00315">piercedVector.tpp:315</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a0ea9a4cbb8e705a7f8b8da6f789d89f4"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a0ea9a4cbb8e705a7f8b8da6f789d89f4">bitpit::PiercedVector::raw_iterator</a></div><div class="ttdeci">std::vector&lt; value_t &gt;::iterator raw_iterator</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00217">piercedVector.hpp:217</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ace10f3a8be648dd852f371bb6b6905c7"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ace10f3a8be648dd852f371bb6b6905c7">bitpit::PiercedVector::getConstIterator</a></div><div class="ttdeci">const_iterator getConstIterator(const id_t &amp;id) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01459">piercedVector.tpp:1459</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a07194f92feb4d07149a110335da4f733"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a07194f92feb4d07149a110335da4f733">bitpit::PiercedVector::popBack</a></div><div class="ttdeci">void popBack()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00629">piercedVector.tpp:629</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4cb0dfa4437e32f46533d7a7efe53488"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4cb0dfa4437e32f46533d7a7efe53488">bitpit::PiercedVector::clear</a></div><div class="ttdeci">void clear(bool release=true)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00673">piercedVector.tpp:673</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a287482efeac9d9d0c9086c1746f5ec09"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a287482efeac9d9d0c9086c1746f5ec09">bitpit::PiercedVector::insert</a></div><div class="ttdeci">iterator insert(const id_t &amp;id, const value_t &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00362">piercedVector.tpp:362</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a24d343798113ee633329df20374ab0d7"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a24d343798113ee633329df20374ab0d7">bitpit::PiercedVector::find</a></div><div class="ttdeci">const_iterator find(id_t id) const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01073">piercedVector.tpp:1073</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ab5c79b351e240896fdabfcf76bc065ce"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ab5c79b351e240896fdabfcf76bc065ce">bitpit::PiercedVector::at</a></div><div class="ttdeci">value_t &amp; at(const id_t &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01344">piercedVector.tpp:1344</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a3c7d5712ef62ee4505f4409de7d143cd"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a3c7d5712ef62ee4505f4409de7d143cd">bitpit::PiercedVector::getIterator</a></div><div class="ttdeci">iterator getIterator(const id_t &amp;id) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01445">piercedVector.tpp:1445</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ac4b6af0989a615a6c87d501669470152"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ac4b6af0989a615a6c87d501669470152">bitpit::PiercedVector::rawEnd</a></div><div class="ttdeci">raw_iterator rawEnd() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01564">piercedVector.tpp:1564</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a47b85ed80bec772e039f90657789ac03"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a47b85ed80bec772e039f90657789ac03">bitpit::PiercedVector::size</a></div><div class="ttdeci">std::size_t size() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01043">piercedVector.tpp:1043</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a85e05c28c27a09613f4f095f1a0c3722"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a85e05c28c27a09613f4f095f1a0c3722">bitpit::PiercedIterator::swap</a></div><div class="ttdeci">void swap(PiercedIterator &amp;other) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00045">piercedVector.tpp:45</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a8a3b3eda3ba331fbd3ed8f9b5b5e5bf0"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a8a3b3eda3ba331fbd3ed8f9b5b5e5bf0">bitpit::PiercedIterator::operator++</a></div><div class="ttdeci">PiercedIterator &amp; operator++()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00081">piercedVector.tpp:81</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aecfcb24711018e11b8bfbd3ae363d5e6"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aecfcb24711018e11b8bfbd3ae363d5e6">bitpit::PiercedVector::insertAfter</a></div><div class="ttdeci">iterator insertAfter(const id_t &amp;referenceId, const id_t &amp;id, const value_t &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00387">piercedVector.tpp:387</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_af624f644a75c3238d46568f41e8c28c2"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#af624f644a75c3238d46568f41e8c28c2">bitpit::PiercedVector::contiguous</a></div><div class="ttdeci">bool contiguous() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00929">piercedVector.tpp:929</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aa36967ac921e52f2de937f3a7048bffd"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aa36967ac921e52f2de937f3a7048bffd">bitpit::PiercedVector::rawIndex</a></div><div class="ttdeci">std::size_t rawIndex(id_t id) const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01400">piercedVector.tpp:1400</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a8eb7139421179bbea99d1e2db7468605"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a8eb7139421179bbea99d1e2db7468605">bitpit::PiercedVector::moveBefore</a></div><div class="ttdeci">iterator moveBefore(const id_t &amp;referenceId, const id_t &amp;id, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00340">piercedVector.tpp:340</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a7b21ecd94fd4a7553274aa1da2bc4a76"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a7b21ecd94fd4a7553274aa1da2bc4a76">bitpit::PiercedVector::squeeze</a></div><div class="ttdeci">void squeeze()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00831">piercedVector.tpp:831</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ae87af3b327566619ce4112b484ca7c89"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ae87af3b327566619ce4112b484ca7c89">bitpit::PiercedVector::exists</a></div><div class="ttdeci">bool exists(id_t id) const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01056">piercedVector.tpp:1056</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4c84c99d0e0f36d2023b291b57d5b58a"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4c84c99d0e0f36d2023b291b57d5b58a">bitpit::PiercedVector::begin</a></div><div class="ttdeci">iterator begin() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01473">piercedVector.tpp:1473</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aff2db0881d8403e71daa825561270d78"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aff2db0881d8403e71daa825561270d78">bitpit::PiercedVector::pushBack</a></div><div class="ttdeci">iterator pushBack(const id_t &amp;id, value_t &amp;&amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00200">piercedVector.tpp:200</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ab3b11e03d659bf5e1f2f9d9d7dd334da"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ab3b11e03d659bf5e1f2f9d9d7dd334da">bitpit::PiercedVector::data</a></div><div class="ttdeci">value_t * data() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01266">piercedVector.tpp:1266</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a18841f81fbb288de48b90666f40d9942"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">bitpit::PiercedIterator::getId</a></div><div class="ttdeci">id_t getId(const id_t &amp;fallback=-1) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00060">piercedVector.tpp:60</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ab8a98611b29a2e790b7ba794d69a12da"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ab8a98611b29a2e790b7ba794d69a12da">bitpit::PiercedVector::reclaimBefore</a></div><div class="ttdeci">iterator reclaimBefore(const id_t &amp;referenceId, const id_t &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00294">piercedVector.tpp:294</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a290ffa245664cb815aaddc9ce7af501d"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a290ffa245664cb815aaddc9ce7af501d">bitpit::PiercedVector::reclaim</a></div><div class="ttdeci">iterator reclaim(const id_t &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00224">piercedVector.tpp:224</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_aaf8754c41dda8b3030f48a0433ac3a53"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#aaf8754c41dda8b3030f48a0433ac3a53">bitpit::PiercedVector::capacity</a></div><div class="ttdeci">std::size_t capacity()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00917">piercedVector.tpp:917</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a538521598fbd9a094a0e4b439c9e1a92"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a538521598fbd9a094a0e4b439c9e1a92">bitpit::PiercedIterator::operator-&gt;</a></div><div class="ttdeci">value_t * operator-&gt;() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00134">piercedVector.tpp:134</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ad55015952c2e3196fd07e89d1995822b"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ad55015952c2e3196fd07e89d1995822b">bitpit::PiercedVector::PiercedVector</a></div><div class="ttdeci">PiercedVector()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00169">piercedVector.tpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ac879653e4b7641068bb9cb55367b93fd"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ac879653e4b7641068bb9cb55367b93fd">bitpit::PiercedVector::flush</a></div><div class="ttdeci">void flush()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00703">piercedVector.tpp:703</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a16bca1a2590190d87694ea6a374c7bfd"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a16bca1a2590190d87694ea6a374c7bfd">bitpit::PiercedVector::cend</a></div><div class="ttdeci">const_iterator cend() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01538">piercedVector.tpp:1538</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a80ef47e907e2227727623a6dea9431e5"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a80ef47e907e2227727623a6dea9431e5">bitpit::PiercedVector::operator[]</a></div><div class="ttdeci">const value_t &amp; operator[](const id_t &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01415">piercedVector.tpp:1415</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a8bd0cf39ad223e8e99f738e67c979d58"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a8bd0cf39ad223e8e99f738e67c979d58">bitpit::PiercedVector::end</a></div><div class="ttdeci">iterator end() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01486">piercedVector.tpp:1486</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_abe77e82a9cb5494227aa981bd92b32ea"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#abe77e82a9cb5494227aa981bd92b32ea">bitpit::PiercedVector::getSizeMarker</a></div><div class="ttdeci">id_t getSizeMarker(const size_t &amp;targetSize, const id_t &amp;fallback=-1)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01198">piercedVector.tpp:1198</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ad93a7a1c6e0161a70377b58ec7f2e7d5"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ad93a7a1c6e0161a70377b58ec7f2e7d5">bitpit::PiercedVector::empty</a></div><div class="ttdeci">bool empty() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00996">piercedVector.tpp:996</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a8ea4d027e8c63333cf869cdfa286b087"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a8ea4d027e8c63333cf869cdfa286b087">bitpit::PiercedIterator::PiercedIterator</a></div><div class="ttdeci">PiercedIterator()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00033">piercedVector.tpp:33</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a2f81b6663201bf2a2820ea71977aac59"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a2f81b6663201bf2a2820ea71977aac59">bitpit::PiercedVector::replace</a></div><div class="ttdeci">iterator replace(id_t id, value_t &amp;&amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00432">piercedVector.tpp:432</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a06382cf1a6fae17f423ce7db9478d6b1"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a06382cf1a6fae17f423ce7db9478d6b1">bitpit::PiercedVector::swap</a></div><div class="ttdeci">void swap(const id_t &amp;id_first, const id_t &amp;id_second)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00648">piercedVector.tpp:648</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a595118bec00dbc17adb35a1a4d2055fc"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a595118bec00dbc17adb35a1a4d2055fc">bitpit::PiercedVector::sort</a></div><div class="ttdeci">void sort()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00793">piercedVector.tpp:793</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a24f4960744a5ce4ed2b860d20ebe4085"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a24f4960744a5ce4ed2b860d20ebe4085">bitpit::PiercedVector::reclaimBack</a></div><div class="ttdeci">iterator reclaimBack(const id_t &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00269">piercedVector.tpp:269</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a23490277681f1dff7760efcdc7763769"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a23490277681f1dff7760efcdc7763769">bitpit::PiercedVector::maxSize</a></div><div class="ttdeci">std::size_t maxSize() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01029">piercedVector.tpp:1029</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ada8a762dd07bcbad92e9192bf72892a8"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ada8a762dd07bcbad92e9192bf72892a8">bitpit::PiercedVector::reserve</a></div><div class="ttdeci">void reserve(std::size_t n)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00723">piercedVector.tpp:723</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a4f72b7fa1c9c14f252ba275cccc073c1"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a4f72b7fa1c9c14f252ba275cccc073c1">bitpit::PiercedVector::evalFlatIndex</a></div><div class="ttdeci">std::size_t evalFlatIndex(id_t id)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01118">piercedVector.tpp:1118</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ab0c941c40e0605bb34507b0733c8fe0a"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ab0c941c40e0605bb34507b0733c8fe0a">bitpit::PiercedVector::back</a></div><div class="ttdeci">value_t &amp; back()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01278">piercedVector.tpp:1278</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a3fb3bb29f55d9068f8590b3909423ac8"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a3fb3bb29f55d9068f8590b3909423ac8">bitpit::PiercedVector::raw_const_iterator</a></div><div class="ttdeci">std::vector&lt; value_t &gt;::const_iterator raw_const_iterator</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00222">piercedVector.hpp:222</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a22c73f90256336a64642243b47ee7838"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a22c73f90256336a64642243b47ee7838">bitpit::PiercedVector::dump</a></div><div class="ttdeci">void dump()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00938">piercedVector.tpp:938</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_af467b88bad3f1c743c4e97b4f5b5bad6"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#af467b88bad3f1c743c4e97b4f5b5bad6">bitpit::PiercedVector::front</a></div><div class="ttdeci">value_t &amp; front()</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01310">piercedVector.tpp:1310</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ad46c1db0150d6e7e58827f9427cdce02"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ad46c1db0150d6e7e58827f9427cdce02">bitpit::PiercedVector::cbegin</a></div><div class="ttdeci">const_iterator cbegin() const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01525">piercedVector.tpp:1525</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga88740c05f6c499a2784fcc1a221c1c9f"><div class="ttname"><a href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a></div><div class="ttdeci">std::array&lt; T, d &gt; min(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00067">MathOperators_array.tpp:67</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_a1822bc5d038cda38f8fa7f2e4d314067"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#a1822bc5d038cda38f8fa7f2e4d314067">bitpit::PiercedVector::emplace</a></div><div class="ttdeci">PiercedVector&lt; value_t, id_t &gt;::iterator emplace(const id_t &amp;id, Args &amp;&amp;...args)</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00474">piercedVector.tpp:474</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedVector_xhtml_ab020ae5ec51bdce38c574f87de38b287"><div class="ttname"><a href="classbitpit_1_1PiercedVector.xhtml#ab020ae5ec51bdce38c574f87de38b287">bitpit::PiercedVector::rawBegin</a></div><div class="ttdeci">raw_iterator rawBegin() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l01551">piercedVector.tpp:1551</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a7616af02f45a2234bfdc1ed681090a3d"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a7616af02f45a2234bfdc1ed681090a3d">bitpit::PiercedIterator::operator*</a></div><div class="ttdeci">value_t &amp; operator*() const </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00122">piercedVector.tpp:122</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

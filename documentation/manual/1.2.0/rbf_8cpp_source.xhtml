
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/RBF/rbf.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_fabbdee3de76b6113005b66e11bcc6bf.xhtml">RBF</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">rbf.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;lapacke.h&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;Operators.hpp&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;SortAlgorithms.hpp&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;rbf.hpp&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a05beb080163a1f663564cde967677fe5">   56</a></span>&#160;<a class="code" href="classbitpit_1_1RBF.xhtml#a05beb080163a1f663564cde967677fe5">RBF::~RBF</a>(){</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    m_fPtr = NULL ;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;} ;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a9f7a389a44bafb0c9e8537a1f48cb5fc">   64</a></span>&#160;<a class="code" href="classbitpit_1_1RBF.xhtml#a9f7a389a44bafb0c9e8537a1f48cb5fc">RBF::RBF</a>( <a class="code" href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">RBFBasisFunction</a> bfunc) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    m_supportRadius = 1. ;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    m_nodes         = 0 ;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    m_fields        = 0 ;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    m_mode = RBFMode::INTERP;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">m_maxFields</a> = -1;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.clear() ;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.clear() ;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.clear() ;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    m_active.clear() ;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">setFunction</a>( bfunc ) ;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;};</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a23ba0cc51177833c151325189658d14b">   84</a></span>&#160;<a class="code" href="classbitpit_1_1RBF.xhtml#a9f7a389a44bafb0c9e8537a1f48cb5fc">RBF::RBF</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp; other){</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    *<span class="keyword">this</span> = other;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#abb9258ab96749ee16c6e063a667401a6">   91</a></span>&#160;<a class="code" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp; <a class="code" href="classbitpit_1_1RBF.xhtml#abb9258ab96749ee16c6e063a667401a6">RBF::operator=</a>(<span class="keyword">const</span> <a class="code" href="classbitpit_1_1RBF.xhtml">RBF</a> &amp; other){</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    m_fields = other.m_fields ;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    m_nodes = other.m_nodes ;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    m_supportRadius = other.m_supportRadius ;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    </div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    m_fPtr = other.m_fPtr;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    m_mode = other.m_mode;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a> = other.<a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a> ;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a> = other.<a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a> ;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a> = other.<a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a> ;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    m_active = other.m_active ;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    m_error = other.m_error ;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">m_maxFields</a> = other.<a class="code" href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">m_maxFields</a>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">return</span>(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">  118</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">RBF::setFunction</a>( <span class="keyword">const</span> <a class="code" href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">RBFBasisFunction</a> &amp;bfunc ){</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">switch</span>(bfunc){</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">case</span>( RBFBasisFunction::WENDLANDC2):</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">setFunction</a>( <a class="code" href="namespacebitpit_1_1rbf.xhtml#ac6b9155e0ef734185569c3eca76d4b93">rbf::wendlandc2</a>);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">setFunction</a>( <a class="code" href="namespacebitpit_1_1rbf.xhtml#ac6b9155e0ef734185569c3eca76d4b93">rbf::wendlandc2</a>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#af94579c5644c1ab566bc5abc5d5f5499">  138</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">RBF::setFunction</a>( <span class="keywordtype">double</span> (&amp;bfunc)(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;) ){</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    m_fPtr = bfunc ;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    return ;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;};</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a28dc12bd016a3f4790e012cbf7662561">  149</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a28dc12bd016a3f4790e012cbf7662561">RBF::getDataCount</a>(  ){</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> m_fields ;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;};</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">  158</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">RBF::getActiveCount</a>(  ){</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">int</span> nActive(0);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;&amp; active : m_active)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        nActive += (int) active ;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> nActive ;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;};</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a52d14a26c8b0d5a12db9626ccdad5934">  173</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a52d14a26c8b0d5a12db9626ccdad5934">RBF::getTotalNodesCount</a>(  ){</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">return</span> m_nodes ;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;};</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">  181</a></span>&#160;std::vector&lt;int&gt; <a class="code" href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">RBF::getActiveSet</a>(  ){</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">int</span>                 i(0);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    std::vector&lt;int&gt;    activeSet ;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;   </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    activeSet.reserve( <a class="code" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">getActiveCount</a>() ) ; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;&amp; active : m_active){</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span>( active )</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            activeSet.push_back(i) ;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        ++i ;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">return</span> activeSet ;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;};</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#aa317965660ba137ddcc47b9250b3defb">  202</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1RBF.xhtml#aa317965660ba137ddcc47b9250b3defb">RBF::isActive</a>( <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;n ){</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> m_active[n] ;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;};</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a350d405a94d582a07b7a267b654df121">  211</a></span>&#160;<span class="keywordtype">bool</span>    <a class="code" href="classbitpit_1_1RBF.xhtml#a350d405a94d582a07b7a267b654df121">RBF::activateNode</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp; n){</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span>(n&gt;=0 &amp;&amp; n&lt;m_nodes){</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        m_active[n] = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> check;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;};</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a2bed4b37ef9d26295d9a62ebd829f518">  225</a></span>&#160;<span class="keywordtype">bool</span>    <a class="code" href="classbitpit_1_1RBF.xhtml#a350d405a94d582a07b7a267b654df121">RBF::activateNode</a>(<span class="keyword">const</span> std::vector&lt;int&gt; &amp; list){</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span>(list.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; index : list){</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        check = check &amp;&amp; <a class="code" href="classbitpit_1_1RBF.xhtml#a350d405a94d582a07b7a267b654df121">activateNode</a>(index);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> check;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;};</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#ab8198e0b6535e512ef6736c01b903ac7">  237</a></span>&#160;<span class="keywordtype">void</span>    <a class="code" href="classbitpit_1_1RBF.xhtml#ab8198e0b6535e512ef6736c01b903ac7">RBF::activateAllNodes</a>(){</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; active : m_active){</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        active = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;};</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#aa3f1b0d74fd1f7a76a47d3d03af378f4">  248</a></span>&#160;<span class="keywordtype">bool</span>    <a class="code" href="classbitpit_1_1RBF.xhtml#aa3f1b0d74fd1f7a76a47d3d03af378f4">RBF::deactivateNode</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp; n ){</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span>(n&gt;=0 &amp;&amp; n&lt;m_nodes){</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        m_active[n] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        check=  <span class="keyword">true</span>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> check;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;};</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a0916a44b160a107139347bdf620d877b">  262</a></span>&#160;<span class="keywordtype">bool</span>    <a class="code" href="classbitpit_1_1RBF.xhtml#aa3f1b0d74fd1f7a76a47d3d03af378f4">RBF::deactivateNode</a>(<span class="keyword">const</span> std::vector&lt;int&gt; &amp; list){</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span>(list.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordtype">bool</span> check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; index : list){</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        check = check &amp;&amp; <a class="code" href="classbitpit_1_1RBF.xhtml#aa3f1b0d74fd1f7a76a47d3d03af378f4">deactivateNode</a>(index);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> check;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;};</div>
<div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#af392e15db5d7f51949d37a4ce7d755cb">  273</a></span>&#160;<span class="keywordtype">void</span>    <a class="code" href="classbitpit_1_1RBF.xhtml#af392e15db5d7f51949d37a4ce7d755cb">RBF::deactivateAllNodes</a>(){</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; active : m_active){</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        active = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;};</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a54452d4b63fc9d8c42a4fe5a6105d95b">  283</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a54452d4b63fc9d8c42a4fe5a6105d95b">RBF::setSupportRadius</a>( <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; radius ){</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    m_supportRadius = radius ;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    return ;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;};</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a26fb7f094cf330b5327d0e3f1b8ba0a8">  293</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a26fb7f094cf330b5327d0e3f1b8ba0a8">RBF::getSupportRadius</a>(){</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">return</span> m_supportRadius ;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;};</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a568deeec3559afec4357e83bca414eae">  301</a></span>&#160;<a class="code" href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">RBFMode</a> <a class="code" href="classbitpit_1_1RBF.xhtml#a568deeec3559afec4357e83bca414eae">RBF::getMode</a>(){</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">return</span> m_mode ;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;};</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a040b1750152006d3f786e0db8fa46d09">  309</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a040b1750152006d3f786e0db8fa46d09">RBF::setMode</a>(<a class="code" href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">RBFMode</a> mode){</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    m_mode = mode ;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;};</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a4bc0ee7870120b0d6ba0214c3871cd7e">  320</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a4bc0ee7870120b0d6ba0214c3871cd7e">RBF::setDataToNode</a>( <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> std::vector&lt;double&gt; &amp;value ){</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">if</span>(id&lt;0 || id &gt;= m_fields) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">if</span>((<span class="keywordtype">int</span>)(value.size()) != m_fields){</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;Mismatch dimension between value vector size and number of data attached to rbf.&quot;</span>;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;This may lead to nasty errors. Check it with getDataCount()!&quot;</span>&lt;&lt;std::endl;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;Data could not be set&quot;</span>&lt;&lt;std::endl;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    }</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordtype">int</span> i ;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span>(m_mode != RBFMode::PARAM){</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">for</span>( i=0; i&lt;m_fields; ++i ){</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[i][id] = value[i] ;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">for</span>( i=0; i&lt;m_fields; ++i ){</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[i][id] = value[i] ;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        }</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    return ;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;};</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a88dd64f51816cf1fa545a1de9ca65fda">  351</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a88dd64f51816cf1fa545a1de9ca65fda">RBF::setDataToAllNodes</a>( <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> std::vector&lt;double&gt; &amp;value ){</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">if</span>(id&lt;0 || id &gt;= m_fields) <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    </div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordtype">int</span> size = <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[id].size();</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">if</span>((<span class="keywordtype">int</span>)(value.size()) != size){</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;Mismatch dimension between data vector and current data container. One or both does not match RBF nodes count.&quot;</span>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;This may lead to nasty errors. Use fitDataToNodes to reshape container or fit your data vector first!&quot;</span>&lt;&lt;std::endl;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;Data could not be set&quot;</span>&lt;&lt;std::endl;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">if</span>(m_mode != RBFMode::PARAM){</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[id] = value ;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[id] = value ;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    return ;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;};</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a70fb2d737695522784160be5c7291c4c">  378</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a70fb2d737695522784160be5c7291c4c">RBF::addNode</a>( <span class="keyword">const</span> std::array&lt;double,3&gt; &amp;node ){</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.push_back(node) ;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    m_active.push_back(<span class="keyword">true</span>) ;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    m_nodes++ ;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">return</span> m_nodes ;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;};</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#aa15f0a605e2ef7596b1665b3f173c0ff">  391</a></span>&#160;std::vector&lt;int&gt; <a class="code" href="classbitpit_1_1RBF.xhtml#a70fb2d737695522784160be5c7291c4c">RBF::addNode</a>( <span class="keyword">const</span> std::vector&lt;std::array&lt;double,3&gt;&gt; &amp;node ){</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordtype">int</span>                 i( m_nodes ) ;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    std::vector&lt;int&gt;    ids;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    ids.resize( node.size() ) ;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp; <span class="keywordtype">id</span>:ids ){</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordtype">id</span> = i ;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        ++i;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.insert( <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.end(), node.begin(), node.end() ) ;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    m_nodes += node.size() ;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    m_active.resize( m_nodes, <span class="keyword">true</span> );</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">return</span> ids;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;};</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a14c9d9cee0674fbf01c33c744bb53526">  416</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a14c9d9cee0674fbf01c33c744bb53526">RBF::removeNode</a>(<span class="keywordtype">int</span> <span class="keywordtype">id</span>){</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">if</span>(id &lt; 0 || id &gt;=m_nodes) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    m_nodes--;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.erase(<a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.begin()+id);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    m_active.erase(m_active.begin()+id);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">return</span>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a5c3d8a32ee7671eeff5a0b505c5e08b9">  431</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a14c9d9cee0674fbf01c33c744bb53526">RBF::removeNode</a>(std::vector&lt;int&gt; &amp; list){</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    std::set&lt;int&gt; setList;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; <span class="keywordtype">id</span> : list) setList.insert(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordtype">int</span> extracted = 0;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; <span class="keywordtype">id</span> : setList){</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>&gt;=0 &amp;&amp; <span class="keywordtype">id</span> &lt;m_nodes){;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            m_nodes--;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordtype">int</span> index = <span class="keywordtype">id</span>-extracted;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.erase(<a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.begin() + index);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            m_active.erase(m_active.begin() + index);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            extracted++;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            }   </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    }</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="keywordflow">return</span>(extracted == (<span class="keywordtype">int</span>)(list.size()));</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;};</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a540eb84fe8ae1f76714caf2c0346793a">  452</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a540eb84fe8ae1f76714caf2c0346793a">RBF::removeAllNodes</a>(){</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    m_nodes = 0;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>.clear();</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    m_active.clear();</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;};</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a2f4558c02c58f1065a21329f6b11faf4">  466</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a2f4558c02c58f1065a21329f6b11faf4">RBF::addData</a>( ){</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordflow">if</span>(m_fields == <a class="code" href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">m_maxFields</a>){</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;max number of data set reached&quot;</span>&lt;&lt;std::endl;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    }</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    m_fields++ ;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">fitDataToNodes</a>(m_fields-1);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keywordflow">return</span> m_fields;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;};</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00486"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#ab4ad660390c877d979ded20f9410459f">  486</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a2f4558c02c58f1065a21329f6b11faf4">RBF::addData</a>( <span class="keyword">const</span> std::vector&lt;double&gt; &amp; data ){</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordflow">if</span>(m_fields == <a class="code" href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">m_maxFields</a>){</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        std::cout&lt;&lt;<span class="stringliteral">&quot;max number of data set reached&quot;</span>&lt;&lt;std::endl;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    }</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::INTERP)   <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.push_back(data) ;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">else</span>                            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.push_back(data) ;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    m_fields++ ;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    <span class="keywordflow">return</span> m_fields ;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;};</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a07f7102bb895acff926fbb2190b93811">  504</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a07f7102bb895acff926fbb2190b93811">RBF::removeData</a>(<span class="keywordtype">int</span> <span class="keywordtype">id</span>){</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">if</span>(id&lt;0 || id &gt;=m_fields) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    m_fields--;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::INTERP)   <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.erase(<a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.begin()+id);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">else</span>                            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.erase(<a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.begin()+id);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">return</span>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#aa34d2627256eb0aba1d410dce86efffc">  521</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a07f7102bb895acff926fbb2190b93811">RBF::removeData</a>(std::vector&lt;int&gt; &amp; list){</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    </div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    std::set&lt;int&gt; setList;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; <span class="keywordtype">id</span> : list) setList.insert(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordtype">int</span> extracted = 0;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> &amp;&amp; <span class="keywordtype">id</span> : setList){</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">if</span>(<span class="keywordtype">id</span>&gt;=0 &amp;&amp; <span class="keywordtype">id</span> &lt;m_fields){;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            m_fields--;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            <span class="keywordtype">int</span> index = <span class="keywordtype">id</span>-extracted; </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            <span class="keywordflow">if</span>(m_mode == RBFMode::INTERP) <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.erase(<a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.begin()+index);</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <span class="keywordflow">else</span>                          <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.erase(<a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.begin()+index);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;            extracted++;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        }   </div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    }</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordflow">return</span>(extracted == (<span class="keywordtype">int</span>)(list.size()));</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;};</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#ada4a0c22e73da9f5fd98b2276788ba93">  544</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#ada4a0c22e73da9f5fd98b2276788ba93">RBF::removeAllData</a>(){</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    m_fields = 0;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::INTERP)   <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>.clear();</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <span class="keywordflow">else</span>                            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.clear();</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;};</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#aade7b6d4d986c42647b61f905aa17b99">  559</a></span>&#160;std::vector&lt;double&gt; <a class="code" href="classbitpit_1_1RBF.xhtml#aade7b6d4d986c42647b61f905aa17b99">RBF::evalRBF</a>( <span class="keyword">const</span> std::array&lt;double,3&gt; &amp;point){</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    std::vector&lt;double&gt; values(m_fields, 0.) ;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keywordtype">int</span>                 i, j ;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keywordtype">double</span>              dist, basis ;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    </div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <span class="keywordflow">for</span>( i=0; i&lt;m_nodes; ++i ){</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="keywordflow">if</span>( m_active[i] ) {</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            dist = <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>( point - <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[i] ) / m_supportRadius ;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            basis = <a class="code" href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">evalBasis</a>( dist ) ;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordflow">for</span>( j=0; j&lt;m_fields; ++j){</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                values[j] += basis * <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[j][i] ;       </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            }</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    }</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordflow">return</span> values ;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;}</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div>
<div class="line"><a name="l00588"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a0be260a62cbfff2a3d3dfee7f46e6684">  588</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a0be260a62cbfff2a3d3dfee7f46e6684">RBF::solve</a>(){</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::PARAM)    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordtype">int</span>  j, k ;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordtype">double</span> dist;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordtype">int</span> nS      = <a class="code" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">getActiveCount</a>() ;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keywordtype">int</span> nrhs    = <a class="code" href="classbitpit_1_1RBF.xhtml#a28dc12bd016a3f4790e012cbf7662561">getDataCount</a>() ;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordtype">int</span> lda     = nS;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keywordtype">int</span> ldb     = nS;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <span class="keywordtype">int</span> info ;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordtype">int</span> ipiv[nS];</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    std::vector&lt;int&gt; activeSet( <a class="code" href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">getActiveSet</a>() ) ;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordtype">double</span> *a = <span class="keyword">new</span> <span class="keywordtype">double</span> [lda * nS];</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    <span class="keywordtype">double</span> *b = <span class="keyword">new</span> <span class="keywordtype">double</span> [ldb * nrhs];</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    k=0 ;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">for</span>( j=0; j&lt;nrhs; ++j){</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp; i : activeSet ){</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            b[k] = <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[j][i];</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            ++k;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        }</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    }</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    k=0;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : activeSet ){</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;j : activeSet ){</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            dist = <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(<a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[j] - <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[i]) / m_supportRadius ;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            a[k] = <a class="code" href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">evalBasis</a>( dist ) ; </div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            k++;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;        }</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    info = LAPACKE_dgesv( LAPACK_COL_MAJOR, nS, nrhs, a, lda, ipiv, b, ldb );</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordflow">if</span>( info &gt; 0 ) {</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        printf( <span class="stringliteral">&quot;The diagonal element of the triangular factor of a,\n&quot;</span> );</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        printf( <span class="stringliteral">&quot;U(%i,%i) is zero, so that a is singular;\n&quot;</span>, info, info );</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        printf( <span class="stringliteral">&quot;the solution could not be computed.\n&quot;</span> );</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    }</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.resize(nrhs) ;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    k=0 ;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordflow">for</span>( j=0; j&lt;nrhs; ++j){</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[j].resize(m_nodes,0);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : activeSet ){</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[j][i] = b[k];</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            ++k;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keyword">delete</span>[] a;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keyword">delete</span>[] b;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    </div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;};</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a55f883989fe460bb597c47037d356a52">  664</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a55f883989fe460bb597c47037d356a52">RBF::greedy</a>( <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;tolerance){</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::PARAM)    <span class="keywordflow">return</span> -1;  </div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    </div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordtype">int</span>                     i, j ;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    <span class="keywordtype">double</span>                  error(1.e18) ;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    std::vector&lt;double&gt;     local(m_fields) ;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    m_error.resize(m_nodes) ;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;&amp; active : m_active )</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        active = false ;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keywordflow">for</span>( i=0; i&lt;m_nodes; ++i){</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordflow">for</span>( j=0; j&lt;m_fields; ++j){</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            local[j] = <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[j][i] ;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        m_error[i] = <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(local) ;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    }</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="keywordflow">while</span>( error &gt; tolerance){</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;        i = <a class="code" href="classbitpit_1_1RBF.xhtml#a70fffda108af8e0f3ac1e0226aea6384">addGreedyPoint</a>() ;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <span class="keywordflow">if</span>( i != -1) {</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            m_active[i] = true ;</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            <span class="comment">//solve() ;</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a46c645b54820c91087a1ec3b69d2ade3">solveLSQ</a>() ;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            error = <a class="code" href="classbitpit_1_1RBF.xhtml#ae3d4feea16d2d9e0e2063c6a7c699268">evalError</a>() ;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            std::cout &lt;&lt; std::scientific ;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot; error now &quot;</span> &lt;&lt; error &lt;&lt; <span class="stringliteral">&quot; active nodes&quot;</span> &lt;&lt; <a class="code" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">getActiveCount</a>() &lt;&lt; <span class="stringliteral">&quot; / &quot;</span> &lt;&lt; m_nodes &lt;&lt; std::endl ;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <span class="keywordflow">return</span> 1 ;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        };</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;    };</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;};</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;</div>
<div class="line"><a name="l00719"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">  719</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">RBF::fitDataToNodes</a>(){</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0;i&lt;m_fields; ++i){</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <a class="code" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">fitDataToNodes</a>(i);</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;    }</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div>
<div class="line"><a name="l00736"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#aaa9071da675cb021a380916b43b21fff">  736</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">RBF::fitDataToNodes</a>(<span class="keywordtype">int</span> <span class="keywordtype">id</span>){</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    <span class="keywordflow">if</span>(m_mode != RBFMode::PARAM)    <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[id].resize(m_nodes, 0.0);</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    <span class="keywordflow">else</span>                            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[id].resize(m_nodes,0.0);</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;}</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment">//PROTECTED RBF CLASS METHODS IMPLEMENTATION</span></div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00749"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">  749</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">RBF::evalBasis</a>( <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;dist ){</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="keywordflow">return</span> (*m_fPtr)(dist) ;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;};</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div>
<div class="line"><a name="l00758"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a70fffda108af8e0f3ac1e0226aea6384">  758</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a70fffda108af8e0f3ac1e0226aea6384">RBF::addGreedyPoint</a>( ){</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::PARAM) <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    </div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    <span class="keywordtype">int</span>     i(0), index(-1), nA( <a class="code" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">getActiveCount</a>() ) ;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    <span class="keywordtype">double</span>  maxError(0.), penal ;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    std::array&lt;double,3&gt;    myCoord ;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    std::vector&lt;int&gt;     active( <a class="code" href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">getActiveSet</a>() );</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> error : m_error ){</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="keywordflow">if</span>(!m_active[i] ){</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;            myCoord = <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[i] ;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <span class="keywordflow">if</span>( nA != 0){ </div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                penal = 1.e18 ;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                <span class="keywordflow">for</span>( <span class="keyword">auto</span> j : active ){</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    penal = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>(penal, <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>( myCoord - <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[j] ))  ;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                }; </div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            }</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            <span class="keywordflow">if</span>( error &gt; maxError ){</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                maxError = error ;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                index = i;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            };</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        }</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        ++i;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    };</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordflow">return</span> index;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;};</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00800"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#ae3d4feea16d2d9e0e2063c6a7c699268">  800</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1RBF.xhtml#ae3d4feea16d2d9e0e2063c6a7c699268">RBF::evalError</a>( ){</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::PARAM) <span class="keywordflow">return</span> -1.0;</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    <span class="keywordtype">int</span>                     i(0), j(0);</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="comment">//int                   index ;</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keywordtype">double</span>                  maxError(0), relError, realValue, <a class="code" href="group__MathFunctions.xhtml#ga2f62854fbef31a58c9c4a54a4f939af4">norm</a>;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    std::vector&lt;double&gt;     reconValues ;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;point : <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a> ){</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        reconValues = <a class="code" href="classbitpit_1_1RBF.xhtml#aade7b6d4d986c42647b61f905aa17b99">evalRBF</a>( point ) ;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        j=0;</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;        norm = 0. ;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        relError = 0. ;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">auto</span> &amp;val : reconValues ){</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            realValue = <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[j][i] ;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            relError += <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">std::pow</a>( (val - realValue), 2  ) ; </div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;            norm += <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">std::pow</a>( realValue, 2  ) ; </div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            ++j;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        };</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        relError = sqrt(relError); </div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        m_error[i] = relError ;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keywordflow">if</span>( relError &gt; maxError ){</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            maxError = relError ;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        }</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        ++i;</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    };</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    <span class="keywordflow">return</span> maxError;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;};</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;</div>
<div class="line"><a name="l00844"></a><span class="lineno"><a class="line" href="classbitpit_1_1RBF.xhtml#a46c645b54820c91087a1ec3b69d2ade3">  844</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1RBF.xhtml#a46c645b54820c91087a1ec3b69d2ade3">RBF::solveLSQ</a>(){</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keywordflow">if</span>(m_mode == RBFMode::PARAM) <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    <span class="keywordtype">int</span> i, j, k ;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;    <span class="keywordtype">double</span> dist;</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    </div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;    <span class="keywordtype">int</span> nR      = <a class="code" href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">getActiveCount</a>() ;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;    <span class="keywordtype">int</span> nP      = m_nodes ;</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;    <span class="keywordtype">int</span> nrhs    = <a class="code" href="classbitpit_1_1RBF.xhtml#a28dc12bd016a3f4790e012cbf7662561">getDataCount</a>() ;</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    </div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    </div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    std::vector&lt;int&gt; activeSet( <a class="code" href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">getActiveSet</a>() ) ;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    </div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;    <span class="keywordtype">int</span>     n ,m, lda, ldb, info, rank ;</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    <span class="keywordtype">double</span>  rcond = -1.0 ;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    <span class="comment">//double  rcond = 1.e-4 ;</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    </div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    m = nP;</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    n = nR;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    </div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    lda = m ;</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;    ldb = <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::max</a>(n,m) ;</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    </div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    <span class="keywordtype">double</span>  *a = <span class="keyword">new</span> <span class="keywordtype">double</span> [lda * n];</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keywordtype">double</span>  *b = <span class="keyword">new</span> <span class="keywordtype">double</span> [ldb * nrhs];</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    <span class="keywordtype">double</span>  *s = <span class="keyword">new</span> <span class="keywordtype">double</span> [m];</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    </div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    </div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keywordflow">for</span>( j=0; j&lt;nrhs; ++j){</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">for</span>( i=0; i&lt;nP; ++i){</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            k = j*ldb + i ;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;            b[k] = <a class="code" href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">m_value</a>[j][i];</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        }</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    }</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    </div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    k=0;</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;j : activeSet ){</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        <span class="keywordflow">for</span>( i=0; i&lt;nP; ++i){</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            dist = <a class="code" href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a>(<a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[j] - <a class="code" href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">m_node</a>[i]) / m_supportRadius ;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            a[k] = <a class="code" href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">evalBasis</a>( dist ) ; </div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            k++;</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;        }</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;    }</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    </div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;    info = LAPACKE_dgelsd( LAPACK_COL_MAJOR, nP, nR, nrhs, a, lda, b, ldb, s, rcond, &amp;rank ) ;</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    </div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keywordflow">if</span>( info &gt; 0 ) {</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <span class="keywordflow">return</span>( 1 );</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    }</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    </div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    </div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>.resize(nrhs) ;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    </div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    <span class="keywordflow">for</span>( j=0; j&lt;nrhs; ++j){</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[j].clear();</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[j].resize(m_nodes,0);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        </div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        k=0 ;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        <span class="keywordflow">for</span>( <span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : activeSet ){</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            <a class="code" href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">m_weight</a>[j][i] = b[j*ldb+k];</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;            ++k;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        }</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    }</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    </div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    </div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    <span class="keyword">delete</span>[] a;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <span class="keyword">delete</span>[] b;</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keyword">delete</span>[] s;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    </div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">return</span>(0);</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;};</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="comment">//RBF NAMESPACE UTILITIES </span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;</div>
<div class="line"><a name="l00922"></a><span class="lineno"><a class="line" href="namespacebitpit_1_1rbf.xhtml#ac6b9155e0ef734185569c3eca76d4b93">  922</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="namespacebitpit_1_1rbf.xhtml#ac6b9155e0ef734185569c3eca76d4b93">rbf::wendlandc2</a>( <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;dist ){</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    </div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keywordflow">if</span>( dist &gt; 1){</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keywordflow">return</span> 0.;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    } <span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keywordflow">return</span>( <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(1.-dist,4)*(4.*dist+1.) ) ;</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        </div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    }</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;    </div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;}; </div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a14c9d9cee0674fbf01c33c744bb53526"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a14c9d9cee0674fbf01c33c744bb53526">bitpit::RBF::removeNode</a></div><div class="ttdeci">bool removeNode(int)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00416">rbf.cpp:416</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_ae3d4feea16d2d9e0e2063c6a7c699268"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#ae3d4feea16d2d9e0e2063c6a7c699268">bitpit::RBF::evalError</a></div><div class="ttdeci">double evalError()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00800">rbf.cpp:800</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_af392e15db5d7f51949d37a4ce7d755cb"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#af392e15db5d7f51949d37a4ce7d755cb">bitpit::RBF::deactivateAllNodes</a></div><div class="ttdeci">void deactivateAllNodes()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00273">rbf.cpp:273</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a70fb2d737695522784160be5c7291c4c"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a70fb2d737695522784160be5c7291c4c">bitpit::RBF::addNode</a></div><div class="ttdeci">int addNode(const std::array&lt; double, 3 &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00378">rbf.cpp:378</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a350d405a94d582a07b7a267b654df121"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a350d405a94d582a07b7a267b654df121">bitpit::RBF::activateNode</a></div><div class="ttdeci">bool activateNode(const int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00211">rbf.cpp:211</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a70fffda108af8e0f3ac1e0226aea6384"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a70fffda108af8e0f3ac1e0226aea6384">bitpit::RBF::addGreedyPoint</a></div><div class="ttdeci">int addGreedyPoint()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00758">rbf.cpp:758</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a4bc0ee7870120b0d6ba0214c3871cd7e"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a4bc0ee7870120b0d6ba0214c3871cd7e">bitpit::RBF::setDataToNode</a></div><div class="ttdeci">void setDataToNode(const int &amp;, const std::vector&lt; double &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00320">rbf.cpp:320</a></div></div>
<div class="ttc" id="namespacebitpit_1_1rbf_xhtml_ac6b9155e0ef734185569c3eca76d4b93"><div class="ttname"><a href="namespacebitpit_1_1rbf.xhtml#ac6b9155e0ef734185569c3eca76d4b93">bitpit::rbf::wendlandc2</a></div><div class="ttdeci">double wendlandc2(const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00922">rbf.cpp:922</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_ada4a0c22e73da9f5fd98b2276788ba93"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#ada4a0c22e73da9f5fd98b2276788ba93">bitpit::RBF::removeAllData</a></div><div class="ttdeci">void removeAllData()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00544">rbf.cpp:544</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a55f883989fe460bb597c47037d356a52"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a55f883989fe460bb597c47037d356a52">bitpit::RBF::greedy</a></div><div class="ttdeci">int greedy(const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00664">rbf.cpp:664</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_aa317965660ba137ddcc47b9250b3defb"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#aa317965660ba137ddcc47b9250b3defb">bitpit::RBF::isActive</a></div><div class="ttdeci">bool isActive(const int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00202">rbf.cpp:202</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a540eb84fe8ae1f76714caf2c0346793a"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a540eb84fe8ae1f76714caf2c0346793a">bitpit::RBF::removeAllNodes</a></div><div class="ttdeci">void removeAllNodes()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00452">rbf.cpp:452</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a92f4053416fd5cd398d4b062b12ea34f"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a92f4053416fd5cd398d4b062b12ea34f">bitpit::RBF::m_maxFields</a></div><div class="ttdeci">int m_maxFields</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00076">rbf.hpp:76</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_abb9258ab96749ee16c6e063a667401a6"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#abb9258ab96749ee16c6e063a667401a6">bitpit::RBF::operator=</a></div><div class="ttdeci">RBF &amp; operator=(const RBF &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00091">rbf.cpp:91</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a8f123a42b009f821b65c40b118af0d92"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a8f123a42b009f821b65c40b118af0d92">bitpit::RBF::getActiveSet</a></div><div class="ttdeci">std::vector&lt; int &gt; getActiveSet()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00181">rbf.cpp:181</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a52d14a26c8b0d5a12db9626ccdad5934"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a52d14a26c8b0d5a12db9626ccdad5934">bitpit::RBF::getTotalNodesCount</a></div><div class="ttdeci">int getTotalNodesCount()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00173">rbf.cpp:173</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga6da0697577be6fda9b574b2344c58014"><div class="ttname"><a href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a></div><div class="ttdeci">std::array&lt; T, d &gt; pow(std::array&lt; T, d &gt; &amp;x, double p)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00637">MathOperators_array.tpp:637</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga2f62854fbef31a58c9c4a54a4f939af4"><div class="ttname"><a href="group__MathFunctions.xhtml#ga2f62854fbef31a58c9c4a54a4f939af4">norm</a></div><div class="ttdeci">double norm(const std::array&lt; T, d &gt; &amp;x, int p)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00754">MathOperators_array.tpp:754</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a568deeec3559afec4357e83bca414eae"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a568deeec3559afec4357e83bca414eae">bitpit::RBF::getMode</a></div><div class="ttdeci">RBFMode getMode()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00301">rbf.cpp:301</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a54452d4b63fc9d8c42a4fe5a6105d95b"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a54452d4b63fc9d8c42a4fe5a6105d95b">bitpit::RBF::setSupportRadius</a></div><div class="ttdeci">void setSupportRadius(const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00283">rbf.cpp:283</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a6d6005e661015145e860d7736492e50d"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a6d6005e661015145e860d7736492e50d">bitpit::RBF::getActiveCount</a></div><div class="ttdeci">int getActiveCount()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00158">rbf.cpp:158</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_aa3f1b0d74fd1f7a76a47d3d03af378f4"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#aa3f1b0d74fd1f7a76a47d3d03af378f4">bitpit::RBF::deactivateNode</a></div><div class="ttdeci">bool deactivateNode(const int &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00248">rbf.cpp:248</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a88dd64f51816cf1fa545a1de9ca65fda"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a88dd64f51816cf1fa545a1de9ca65fda">bitpit::RBF::setDataToAllNodes</a></div><div class="ttdeci">void setDataToAllNodes(const int &amp;, const std::vector&lt; double &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00351">rbf.cpp:351</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a3c9ce5329079c33c583fd33121265e90"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a3c9ce5329079c33c583fd33121265e90">bitpit::RBF::m_value</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; double &gt; &gt; m_value</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00074">rbf.hpp:74</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a05beb080163a1f663564cde967677fe5"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a05beb080163a1f663564cde967677fe5">bitpit::RBF::~RBF</a></div><div class="ttdeci">~RBF()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00056">rbf.cpp:56</a></div></div>
<div class="ttc" id="group__RBF_xhtml_ga8c8d1d0c1feea198901f77f168ec03e3"><div class="ttname"><a href="group__RBF.xhtml#ga8c8d1d0c1feea198901f77f168ec03e3">bitpit::RBFBasisFunction</a></div><div class="ttdeci">RBFBasisFunction</div><div class="ttdoc">Enum class defining types of RBF kernel functions that could be used in bitpit::RBF class...</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00042">rbf.hpp:42</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a46c645b54820c91087a1ec3b69d2ade3"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a46c645b54820c91087a1ec3b69d2ade3">bitpit::RBF::solveLSQ</a></div><div class="ttdeci">int solveLSQ()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00844">rbf.cpp:844</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_ab8198e0b6535e512ef6736c01b903ac7"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#ab8198e0b6535e512ef6736c01b903ac7">bitpit::RBF::activateAllNodes</a></div><div class="ttdeci">void activateAllNodes()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00237">rbf.cpp:237</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a040b1750152006d3f786e0db8fa46d09"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a040b1750152006d3f786e0db8fa46d09">bitpit::RBF::setMode</a></div><div class="ttdeci">void setMode(RBFMode mode)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00309">rbf.cpp:309</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_gabb983de64002faac55552e131e9096c0"><div class="ttname"><a href="group__MathFunctions.xhtml#gabb983de64002faac55552e131e9096c0">norm2</a></div><div class="ttdeci">double norm2(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00714">MathOperators_array.tpp:714</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a081331639259f567399c803452cc51e7"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a081331639259f567399c803452cc51e7">bitpit::RBF::fitDataToNodes</a></div><div class="ttdeci">void fitDataToNodes()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00719">rbf.cpp:719</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a9b592c701b4d3557769d50e274e5d006"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a9b592c701b4d3557769d50e274e5d006">bitpit::RBF::m_node</a></div><div class="ttdeci">std::vector&lt; std::array&lt; double, 3 &gt; &gt; m_node</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00077">rbf.hpp:77</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a7ff66321fc95da012630f3ca67168206"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a7ff66321fc95da012630f3ca67168206">bitpit::RBF::setFunction</a></div><div class="ttdeci">void setFunction(const RBFBasisFunction &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00118">rbf.cpp:118</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga119be619426d7a672ab67296a32f04e9"><div class="ttname"><a href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a></div><div class="ttdeci">std::array&lt; T, d &gt; max(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00306">MathOperators_array.tpp:306</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a9f7a389a44bafb0c9e8537a1f48cb5fc"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a9f7a389a44bafb0c9e8537a1f48cb5fc">bitpit::RBF::RBF</a></div><div class="ttdeci">RBF(RBFBasisFunction=RBFBasisFunction::WENDLANDC2)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00064">rbf.cpp:64</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a26fb7f094cf330b5327d0e3f1b8ba0a8"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a26fb7f094cf330b5327d0e3f1b8ba0a8">bitpit::RBF::getSupportRadius</a></div><div class="ttdeci">double getSupportRadius()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00293">rbf.cpp:293</a></div></div>
<div class="ttc" id="group__RBF_xhtml_gabdf6d0f18b513f0364ebe00ede3840e1"><div class="ttname"><a href="group__RBF.xhtml#gabdf6d0f18b513f0364ebe00ede3840e1">bitpit::RBFMode</a></div><div class="ttdeci">RBFMode</div><div class="ttdoc">Enum class defining behaviour of the bitpit::RBF class. </div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00050">rbf.hpp:50</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a28dc12bd016a3f4790e012cbf7662561"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a28dc12bd016a3f4790e012cbf7662561">bitpit::RBF::getDataCount</a></div><div class="ttdeci">int getDataCount()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00149">rbf.cpp:149</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a1fd231f352c790186d3c2f3db6cadf43"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a1fd231f352c790186d3c2f3db6cadf43">bitpit::RBF::m_weight</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; double &gt; &gt; m_weight</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00075">rbf.hpp:75</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a2f4558c02c58f1065a21329f6b11faf4"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a2f4558c02c58f1065a21329f6b11faf4">bitpit::RBF::addData</a></div><div class="ttdeci">int addData()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00466">rbf.cpp:466</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml">bitpit::RBF</a></div><div class="ttdoc">Handling of Radial Basis Function with a large set of nodes. </div><div class="ttdef"><b>Definition:</b> <a href="rbf_8hpp_source.xhtml#l00059">rbf.hpp:59</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_aade7b6d4d986c42647b61f905aa17b99"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#aade7b6d4d986c42647b61f905aa17b99">bitpit::RBF::evalRBF</a></div><div class="ttdeci">std::vector&lt; double &gt; evalRBF(const std::array&lt; double, 3 &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00559">rbf.cpp:559</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a07f7102bb895acff926fbb2190b93811"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a07f7102bb895acff926fbb2190b93811">bitpit::RBF::removeData</a></div><div class="ttdeci">bool removeData(int)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00504">rbf.cpp:504</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga88740c05f6c499a2784fcc1a221c1c9f"><div class="ttname"><a href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a></div><div class="ttdeci">std::array&lt; T, d &gt; min(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00067">MathOperators_array.tpp:67</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a901ba117bec44b2f76749d8594e3f141"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a901ba117bec44b2f76749d8594e3f141">bitpit::RBF::evalBasis</a></div><div class="ttdeci">double evalBasis(const double &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00749">rbf.cpp:749</a></div></div>
<div class="ttc" id="classbitpit_1_1RBF_xhtml_a0be260a62cbfff2a3d3dfee7f46e6684"><div class="ttname"><a href="classbitpit_1_1RBF.xhtml#a0be260a62cbfff2a3d3dfee7f46e6684">bitpit::RBF::solve</a></div><div class="ttdeci">int solve()</div><div class="ttdef"><b>Definition:</b> <a href="rbf_8cpp_source.xhtml#l00588">rbf.cpp:588</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/surfunstructured/surfunstructured.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1c10781a3acedb0d50b4e657ba9953fb.xhtml">surfunstructured</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">surfunstructured.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;bitpit_common.hpp&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;surfunstructured.hpp&quot;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#ac40ca285c703d11f468f563d1522f973">   52</a></span>&#160;<a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#ac40ca285c703d11f468f563d1522f973">SurfUnstructured::SurfUnstructured</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">int</span> patch_dim, <span class="keywordtype">int</span> space_dim)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    : <a class="code" href="classbitpit_1_1SurfaceKernel.xhtml">SurfaceKernel</a>(id, patch_dim, space_dim, true)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;}</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a42afcfd1bf78be2f2d6d3edc7f4255cf">   67</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a42afcfd1bf78be2f2d6d3edc7f4255cf">SurfUnstructured::setExpert</a>(<span class="keywordtype">bool</span> expert)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;{</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">SurfaceKernel::setExpert</a>(expert);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a4698fe1cfacd04fd363c7e694d046b5b">   78</a></span>&#160;<span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a4698fe1cfacd04fd363c7e694d046b5b">SurfUnstructured::_updateAdaption</a>(<span class="keywordtype">bool</span> trackAdaption)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Updating surface triangulation mesh\n&quot;</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="comment">// Adaption info</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::vector&lt;adaption::Info&gt; adaptionData;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keywordflow">if</span> (trackAdaption) {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">return</span> adaptionData;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;}</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a8558fe1c65cb2d7b98b8fcad48f62db0">  100</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a8558fe1c65cb2d7b98b8fcad48f62db0">SurfUnstructured::_markCellForRefinement</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a711dfbbff4a37af945148b8c0e88fdbf">  115</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a711dfbbff4a37af945148b8c0e88fdbf">SurfUnstructured::_markCellForCoarsening</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;}</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#afe962cb76f4bee148d792449d0490480">  131</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#afe962cb76f4bee148d792449d0490480">SurfUnstructured::_enableCellBalancing</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enabled)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    BITPIT_UNUSED(enabled);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a1f5589b94978098eaba0ca8410caa9d6">  152</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a1f5589b94978098eaba0ca8410caa9d6">SurfUnstructured::locatePoint</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    BITPIT_UNUSED(point);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">throw</span> std::runtime_error (<span class="stringliteral">&quot;The function &#39;locatePoint&#39; is not implemented yet&quot;</span>);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">//TODO: Aggiungere un metodo in SurfUnstructured per aggiungere più vertici.</span></div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a58a0ddd25390ac640cc4debc4e5a00bc">  169</a></span>&#160;<span class="comment"></span><span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a58a0ddd25390ac640cc4debc4e5a00bc">SurfUnstructured::extractEdgeNetwork</a>(<a class="code" href="classbitpit_1_1SurfUnstructured.xhtml">SurfUnstructured</a> &amp;net)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="comment">// Local variables</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">bool</span>                                        check;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordtype">int</span>                                         n_faces, n_adj, n_vert;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">long</span>                                        id;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    vector&lt;int&gt;                                 face_loc_connect;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    vector&lt;long&gt;                                face_connect;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">int</span>                                         i, j;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    vector&lt;int&gt;::const_iterator                 i_;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    vector&lt;long&gt;::iterator                      j_;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a>                              v_, ve_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">vertexEnd</a>();</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a>                                c_, ce_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="comment">// INITIALIZE DATA STRUCTURE                                              //</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    net.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">reserveCells</a>(net.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>() + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4a727482a16bcd0a45800bc96f02be25">countFaces</a>());</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    net.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">reserveVertices</a>(net.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>() + <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>());</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// ADD VERTEX TO net                                                      //</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">for</span> (v_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">vertexBegin</a>(); v_ != ve_; ++v_) {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        net.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">addVertex</a>(v_-&gt;getCoords(), v_-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>());</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    } <span class="comment">//next v_</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// ADD EDGES                                                              //</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">for</span> (c_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c">cellBegin</a>(); c_ != ce_; ++c_) {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordtype">id</span> = c_-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        n_faces = c_-&gt;getFaceCount();</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">for</span> (i = 0; i &lt; n_faces; ++i) {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            check = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            n_adj = c_-&gt;getAdjacencyCount(i);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keywordflow">for</span> (j = 0; j &lt; n_adj; ++j) {</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                check = check &amp;&amp; (<span class="keywordtype">id</span> &gt; c_-&gt;getAdjacency(i, j));</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            } <span class="comment">//next j</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">if</span> (check) {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                face_loc_connect = c_-&gt;getFaceLocalConnect(i);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                n_vert = face_loc_connect.size();</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                face_connect.resize(n_vert);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                j_ = face_connect.begin();</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">for</span> (i_ = face_loc_connect.cbegin(); i_ != face_loc_connect.cend(); ++i_) {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    *j_ = c_-&gt;getVertex(*i_);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    ++j_;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                } <span class="comment">//next i_</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                net.<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">addCell</a>(c_-&gt;getFaceType(i), <span class="keyword">true</span>, face_connect);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        } <span class="comment">//next i</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    } <span class="comment">//next c_</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">//TODO: normals??</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">//TODO: error flag on output</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">//TODO: import a specified solid (ascii format only)</span></div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a8a117925cc94016e13ef9fff09aaf079">  248</a></span>&#160;<span class="comment"></span><span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a8a117925cc94016e13ef9fff09aaf079">SurfUnstructured::importSTL</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;stl_name, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;isBinary, <span class="keywordtype">int</span> PIDOffset)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;{</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// Parameters</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keyword">const</span> unordered_map&lt;size_t, ElementInfo::Type&gt; ele_type{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        {0, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>},</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        {1, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760">ElementInfo::VERTEX</a>},</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        {2, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">ElementInfo::LINE</a>},</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        {3, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9">ElementInfo::TRIANGLE</a>},</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {4, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593">ElementInfo::QUAD</a>}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    };</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="comment">// STL Object</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <a class="code" href="classbitpit_1_1STLObj.xhtml">STLObj</a> STL(stl_name, isBinary);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// OPEN STL FILE                                                          //</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    STL.<a class="code" href="classbitpit_1_1STLObj.xhtml#adfec49d789f5092ba38030b644f13649">open</a>(<span class="stringliteral">&quot;in&quot;</span>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span> (STL.<a class="code" href="classbitpit_1_1STLObj.xhtml#a1621bb92f4ab3e4be1c518f19abf7ae9">err</a> != 0) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">return</span> STL.<a class="code" href="classbitpit_1_1STLObj.xhtml#a1621bb92f4ab3e4be1c518f19abf7ae9">err</a>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="comment">// LOAD ALL SOLID FROM THE STL FILE                                       //</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">int</span> pid = PIDOffset - 1;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="comment">// LOAD SOLID FROM THE STL FILE                                           //</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordtype">int</span> nVertex = 0;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordtype">int</span> nSimplex = 0;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        std::vector&lt;std::array&lt;double, 3&gt;&gt; vertexList;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        std::vector&lt;std::array&lt;double, 3&gt;&gt; normalList;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        std::vector&lt;std::vector&lt;int&gt;&gt; connectivityList;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        STL.loadSolid(nVertex, nSimplex, vertexList, normalList, connectivityList);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">if</span> (nVertex == 0) {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// PID OF THE SOLID                                                       //</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        ++pid;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="comment">// PREPARE MESH FOR DATA IMPORT                                           //</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">reserveVertices</a>(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>() + nVertex);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">reserveCells</a>(m_nInternals + m_nGhosts + nSimplex);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="comment">// ADD VERTICES TO MESH                                                   //</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        vector&lt;array&lt;double, 3&gt;&gt;::const_iterator v_, ve_;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        std::unordered_map&lt;long, long&gt; vertexMap;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        vertexMap.reserve(nVertex);</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordtype">long</span> v_counter = 0;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        ve_ = vertexList.cend();</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">for</span> (v_ = vertexList.cbegin(); v_ != ve_; ++v_) {</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a> i_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">addVertex</a>(*v_);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            vertexMap[v_counter] = i_-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            ++v_counter;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        } <span class="comment">//next v_</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="comment">// ADD CELLS TO MESH                                                      //</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        vector&lt;vector&lt;int&gt;&gt;::const_iterator c_, ce_;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        vector&lt;int&gt;::const_iterator w_, we_;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        ce_ = connectivityList.cend();</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">for</span> (c_ = connectivityList.cbegin(); c_ != ce_; ++c_) {</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="comment">// Remap STL connectivity</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordtype">int</span> n_v = c_-&gt;size();</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            std::vector&lt;long&gt; connect(n_v, Vertex::NULL_ID);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            we_ = c_-&gt;cend();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">for</span> (w_ = c_-&gt;cbegin(); w_ &lt; we_; ++w_) {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                connect[i] = vertexMap[*w_];</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                ++i;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            } <span class="comment">//next w_</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="comment">// Add cell</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a> cellIterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">addCell</a>(ele_type.at(n_v), <span class="keyword">true</span>, connect);</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            cellIterator-&gt;setPID(pid);</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        } <span class="comment">//next c_</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="comment">// Multi-body STL files are supported only in ASCII mode                        //</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="keywordflow">if</span> (isBinary) {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// CLOSE STL FILE                                                         //</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    STL.<a class="code" href="classbitpit_1_1STLObj.xhtml#a9fd51f8f6353d0f9480b8fb9dcdad07d">close</a>(<span class="stringliteral">&quot;in&quot;</span>);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment">//TODO: normals??</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">//TODO: error flag on output</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment">//TODO: conversion of quad into tria</span></div>
<div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#aa4c81c64d4c54c8f060a8535fa46c2e8">  374</a></span>&#160;<span class="comment"></span><span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#aa4c81c64d4c54c8f060a8535fa46c2e8">SurfUnstructured::exportSTL</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;stl_name, <span class="keyword">const</span> <span class="keywordtype">bool</span> &amp;isBinary, <span class="keywordtype">bool</span> exportInternalsOnly)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// Local variables</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordtype">int</span>                                         nVertex;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordtype">int</span>                                         nSimplex;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    vector&lt;array&lt;double, 3&gt;&gt;                    vertexList;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    vector&lt;array&lt;double, 3&gt;&gt;                    normalList;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    vector&lt;vector&lt;int&gt;&gt;                         connectivityList;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    unordered_map&lt;long, long&gt;                   vertexMap;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <span class="keywordtype">int</span>                                         v_count ,j;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    vector&lt;array&lt;double, 3&gt;&gt;::iterator          i_;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    vector&lt;vector&lt;int&gt;&gt;::iterator               j_;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    vector&lt;int&gt;::iterator                       k_, ke_;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a>                              v_, ve_;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a>                                c_, cb_, ce_;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="comment">// INITIALIZE DATA STRUCTURE                                              //</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    nSimplex = m_nInternals;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">if</span> (!exportInternalsOnly) nSimplex += m_nGhosts;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    vertexList.resize(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>());</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    normalList.resize(nSimplex);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    connectivityList.resize(nSimplex, vector&lt;int&gt;(3, 0));</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// CREATE VERTEX LIST                                                     //</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    i_ = vertexList.begin();</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    ve_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">vertexEnd</a>();</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    v_count = 0;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">for</span> (v_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">vertexBegin</a>(); v_ != ve_; ++v_) {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="comment">// Store vertex coordinates</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        *i_ = v_-&gt;getCoords();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        vertexMap[v_-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>()] = v_count;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="comment">// Update counters</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        ++v_count;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        ++i_;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    } <span class="comment">//next v_</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    nVertex = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>();</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// CREATE CONNECTIVITY                                                    //</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">if</span> (exportInternalsOnly) {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        cb_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a0b4f43e8c99cbb30c128e4b1392a77c2">internalBegin</a>();</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        ce_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aa1070753551cb033cdc13d1e727bb6da">internalEnd</a>();</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        cb_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c">cellBegin</a>();</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        ce_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    i_ = normalList.begin();</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    j_ = connectivityList.begin();</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">for</span> (c_ = cb_; c_ != ce_; ++c_) {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <span class="comment">// Build normals</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        *i_ = std::move(<a class="code" href="classbitpit_1_1SurfaceKernel.xhtml#a683a7221f7d402a740a53d4a96b24bb3">evalFacetNormal</a>(c_-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>()));</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="comment">// Build connectivity</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        ke_ = j_-&gt;end();</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        j = 0;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">for</span> (k_ = j_-&gt;begin(); k_ != ke_; ++k_) {</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            *k_ = vertexMap[c_-&gt;getVertex(j)];</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            ++j;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        } <span class="comment">//next k_</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="comment">// Update counters</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        ++j_;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        ++i_;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    } <span class="comment">//next c_</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="comment">// EXPORT STL DATA                                                        //</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <a class="code" href="classbitpit_1_1STLObj.xhtml">STLObj</a>                                      STL(stl_name, isBinary);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    STL.save(<span class="stringliteral">&quot;&quot;</span>, nVertex, nSimplex, vertexList, normalList, connectivityList);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;}</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#a8d2d096ac756965eb7b257f6218eac30">  471</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#a8d2d096ac756965eb7b257f6218eac30">SurfUnstructured::importDGF</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;dgf_name)</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;{</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="comment">// Parameters</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <span class="keyword">static</span> unordered_map&lt;size_t, ElementInfo::Type&gt;             ele_type{</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                                                                    {0, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">ElementInfo::UNDEFINED</a>},</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                                                                    {1, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760">ElementInfo::VERTEX</a>},</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                                                                    {2, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">ElementInfo::LINE</a>},</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                                                                    {3, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9">ElementInfo::TRIANGLE</a>},</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                                                                    {4, <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593">ElementInfo::QUAD</a>}</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                                                                };</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <span class="comment">// Local variables</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <a class="code" href="classbitpit_1_1DGFObj.xhtml">DGFObj</a>                                                      dgf_in(dgf_name);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">int</span>                                                         nV = 0, nS = 0;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="keywordtype">long</span>                                                        vcount, idx;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    std::vector&lt;std::array&lt;double, 3&gt;&gt;                          vertex_list;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    std::vector&lt;std::vector&lt;int&gt;&gt;                               simplex_list;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    std::vector&lt;long&gt;                                           vertex_map;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    std::vector&lt;long&gt;                                           connect;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;    std::vector&lt;std::array&lt;double, 3&gt;&gt;::const_iterator          v_, ve_;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    std::vector&lt;std::vector&lt;int&gt;&gt;::iterator                     c_, ce_;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    std::vector&lt;int&gt;::iterator                                  i_, ie_;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    std::vector&lt;long&gt;::iterator                                 j_, je_;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <span class="comment">// IMPORT DATA                                                            //</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// Read vertices and cells from DGF file</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    dgf_in.<a class="code" href="classbitpit_1_1DGFObj.xhtml#ac5294abd691729ad2338a70b8813cfdc">load</a>(nV, nS, vertex_list, simplex_list);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="comment">// Add vertices</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    ve_ = vertex_list.cend();</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    vcount = 0;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    vertex_map.resize(nV);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;    <span class="keywordflow">for</span> (v_ = vertex_list.cbegin(); v_ != ve_; ++v_) {</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        idx = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">addVertex</a>(*v_)-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        vertex_map[vcount] = idx;</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        ++vcount;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    } <span class="comment">//next v_</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <span class="comment">// Update connectivity infos</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    ce_ = simplex_list.end();</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="keywordflow">for</span> (c_ = simplex_list.begin(); c_ != ce_; ++c_) {</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        ie_ = c_-&gt;end();</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keywordflow">for</span> (i_ = c_-&gt;begin(); i_ != ie_; ++i_) {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;            *i_ = vertex_map[*i_];</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        } <span class="comment">//next i_</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;    } <span class="comment">//next c_</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="comment">// Add cells</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordflow">for</span> (c_ = simplex_list.begin(); c_ != ce_; ++c_) {</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        i_ = c_-&gt;begin();</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        connect.resize(c_-&gt;size(), Vertex::NULL_ID);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        je_ = connect.end();</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">for</span> (j_ = connect.begin(); j_ != je_; ++j_) {</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            *j_ = *i_;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            ++i_;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        } <span class="comment">//next j_</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">addCell</a>(ele_type[c_-&gt;size()], <span class="keyword">true</span>, connect);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    } <span class="comment">//next c_</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;}</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div>
<div class="line"><a name="l00548"></a><span class="lineno"><a class="line" href="classbitpit_1_1SurfUnstructured.xhtml#aa876ca84696f8fb80636bd01c166f724">  548</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <a class="code" href="classbitpit_1_1SurfUnstructured.xhtml#aa876ca84696f8fb80636bd01c166f724">SurfUnstructured::exportDGF</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> &amp;dgf_name)</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;{</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="comment">// VARIABLES DECLARATION                                                  //</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="comment">// Local variables</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <a class="code" href="classbitpit_1_1DGFObj.xhtml">DGFObj</a>                                                      dgf_in(dgf_name);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordtype">int</span>                                                         nV = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">getVertexCount</a>(), nS = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>();</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="keywordtype">int</span>                                                         v, nv;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordtype">long</span>                                                        vcount, ccount, idx;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    std::vector&lt;std::array&lt;double, 3&gt;&gt;                          vertex_list(nV);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    std::vector&lt;std::vector&lt;int&gt;&gt;                               simplex_list(nS);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    std::unordered_map&lt;long, long&gt;                              vertex_map;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">VertexIterator</a>                                              v_, ve_;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="classbitpit_1_1PiercedIterator.xhtml">CellIterator</a>                                                c_, ce_;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="comment">// EXPORT DATA                                                            //</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;    <span class="comment">// ====================================================================== //</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="comment">// Create vertex list</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    ve_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">vertexEnd</a>();</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    vcount = 0;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">for</span> (v_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">vertexBegin</a>(); v_ != ve_; ++v_) {</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        idx = v_-&gt;<a class="code" href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">getId</a>();</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        vertex_list[vcount] = v_-&gt;getCoords();</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        vertex_map[idx] = vcount;</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;        ++vcount;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    } <span class="comment">//next v_</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// Add cells</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    ce_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">cellEnd</a>();</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    ccount = 0;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <span class="keywordflow">for</span> (c_ = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c">cellBegin</a>(); c_ != ce_; ++c_) {</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        nv = c_-&gt;getVertexCount();</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        simplex_list[ccount].resize(nv);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        <span class="keywordflow">for</span> (v = 0; v &lt; nv; ++v) {</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            simplex_list[ccount][v] = vertex_map[c_-&gt;getVertex(v)];</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        } <span class="comment">//next v</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        ++ccount;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    } <span class="comment">//next c_</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">// Read vertices and cells from DGF file</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    dgf_in.<a class="code" href="classbitpit_1_1DGFObj.xhtml#a462f8fe0486ed183fbf36a43e0025a53">save</a>(nV, nS, vertex_list, simplex_list);</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;}</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a618377c0340d7e68a0ab2572275a5242"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">bitpit::PatchKernel::addCell</a></div><div class="ttdeci">CellIterator addCell(ElementInfo::Type type, const long &amp;id=Element::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01279">patch_kernel.cpp:1279</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml">bitpit::PiercedIterator</a></div><div class="ttdoc">Iterator for the class PiercedVector. </div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8hpp_source.xhtml#l00057">piercedVector.hpp:57</a></div></div>
<div class="ttc" id="classbitpit_1_1STLObj_xhtml_a1621bb92f4ab3e4be1c518f19abf7ae9"><div class="ttname"><a href="classbitpit_1_1STLObj.xhtml#a1621bb92f4ab3e4be1c518f19abf7ae9">bitpit::STLObj::err</a></div><div class="ttdeci">unsigned int err</div><div class="ttdef"><b>Definition:</b> <a href="STL_8hpp_source.xhtml#l00076">STL.hpp:76</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfaceKernel_xhtml_a683a7221f7d402a740a53d4a96b24bb3"><div class="ttname"><a href="classbitpit_1_1SurfaceKernel.xhtml#a683a7221f7d402a740a53d4a96b24bb3">bitpit::SurfaceKernel::evalFacetNormal</a></div><div class="ttdeci">virtual std::array&lt; double, 3 &gt; evalFacetNormal(const long &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="surface__kernel_8cpp_source.xhtml#l00467">surface_kernel.cpp:467</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a3a1edd7b839b26f6be70985d9f0931"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">bitpit::PatchKernel::addVertex</a></div><div class="ttdeci">VertexIterator addVertex(const std::array&lt; double, 3 &gt; &amp;coords, const long &amp;id=Vertex::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00685">patch_kernel.cpp:685</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a6eed7fad2562a3087e34b66152981dd4"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a6eed7fad2562a3087e34b66152981dd4">bitpit::PatchKernel::cellEnd</a></div><div class="ttdeci">CellIterator cellEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01150">patch_kernel.cpp:1150</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a8d2d096ac756965eb7b257f6218eac30"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a8d2d096ac756965eb7b257f6218eac30">bitpit::SurfUnstructured::importDGF</a></div><div class="ttdeci">unsigned short importDGF(const std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00471">surfunstructured.cpp:471</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a4698fe1cfacd04fd363c7e694d046b5b"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a4698fe1cfacd04fd363c7e694d046b5b">bitpit::SurfUnstructured::_updateAdaption</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; _updateAdaption(bool trackAdaption)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00078">surfunstructured.cpp:78</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af4ee7e8fca84bace7171038c37e8194e"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af4ee7e8fca84bace7171038c37e8194e">bitpit::PatchKernel::reserveVertices</a></div><div class="ttdeci">bool reserveVertices(size_t nVertices)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00345">patch_kernel.cpp:345</a></div></div>
<div class="ttc" id="classbitpit_1_1STLObj_xhtml_adfec49d789f5092ba38030b644f13649"><div class="ttname"><a href="classbitpit_1_1STLObj.xhtml#adfec49d789f5092ba38030b644f13649">bitpit::STLObj::open</a></div><div class="ttdeci">void open(std::string)</div><div class="ttdef"><b>Definition:</b> <a href="STL_8cpp_source.xhtml#l00151">STL.cpp:151</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a8a117925cc94016e13ef9fff09aaf079"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a8a117925cc94016e13ef9fff09aaf079">bitpit::SurfUnstructured::importSTL</a></div><div class="ttdeci">unsigned short importSTL(const std::string &amp;, const bool &amp;, int PIDOffset=0)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00248">surfunstructured.cpp:248</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314af962ccefc7ceb3e5f1c38513458505b9">bitpit::ElementInfo::UNDEFINED</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00047">element.hpp:47</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_aa876ca84696f8fb80636bd01c166f724"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#aa876ca84696f8fb80636bd01c166f724">bitpit::SurfUnstructured::exportDGF</a></div><div class="ttdeci">unsigned short exportDGF(const std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00548">surfunstructured.cpp:548</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a28d3bc5f4e3995d05c219eb1b15f9915"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a28d3bc5f4e3995d05c219eb1b15f9915">bitpit::PatchKernel::vertexBegin</a></div><div class="ttdeci">VertexIterator vertexBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00624">patch_kernel.cpp:624</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_ac40ca285c703d11f468f563d1522f973"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#ac40ca285c703d11f468f563d1522f973">bitpit::SurfUnstructured::SurfUnstructured</a></div><div class="ttdeci">SurfUnstructured(const int &amp;id, int patch_dim=2, int space_dim=3)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00052">surfunstructured.cpp:52</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a017835739bf197e3a61988acf0d348cc"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a017835739bf197e3a61988acf0d348cc">bitpit::PatchKernel::vertexEnd</a></div><div class="ttdeci">VertexIterator vertexEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00634">patch_kernel.cpp:634</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_afe962cb76f4bee148d792449d0490480"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#afe962cb76f4bee148d792449d0490480">bitpit::SurfUnstructured::_enableCellBalancing</a></div><div class="ttdeci">bool _enableCellBalancing(const long &amp;id, bool enabled)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00131">surfunstructured.cpp:131</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a1f5589b94978098eaba0ca8410caa9d6"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a1f5589b94978098eaba0ca8410caa9d6">bitpit::SurfUnstructured::locatePoint</a></div><div class="ttdeci">long locatePoint(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00152">surfunstructured.cpp:152</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">bitpit::ElementInfo::LINE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00049">element.hpp:49</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a01c96657baf31230e0820f780c257c5c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a01c96657baf31230e0820f780c257c5c">bitpit::PatchKernel::cellBegin</a></div><div class="ttdeci">CellIterator cellBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01140">patch_kernel.cpp:1140</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a42afcfd1bf78be2f2d6d3edc7f4255cf"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a42afcfd1bf78be2f2d6d3edc7f4255cf">bitpit::SurfUnstructured::setExpert</a></div><div class="ttdeci">void setExpert(bool expert)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00067">surfunstructured.cpp:67</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a21f33ddf3dcd1824484348286b4cda63"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">bitpit::PatchKernel::setExpert</a></div><div class="ttdeci">void setExpert(bool expert)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00492">patch_kernel.cpp:492</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfaceKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1SurfaceKernel.xhtml">bitpit::SurfaceKernel</a></div><div class="ttdoc">The SurfaceKernel class provides an interface for defining surface patches. </div><div class="ttdef"><b>Definition:</b> <a href="surface__kernel_8hpp_source.xhtml#l00032">surface_kernel.hpp:32</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3f366837c2cc93ec757c533813b1ebea"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">bitpit::PatchKernel::getCellCount</a></div><div class="ttdeci">virtual long getCellCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01017">patch_kernel.cpp:1017</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a82bc8db39ccc3df1508e13df4bc477f9">bitpit::ElementInfo::TRIANGLE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00050">element.hpp:50</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a0b4f43e8c99cbb30c128e4b1392a77c2"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a0b4f43e8c99cbb30c128e4b1392a77c2">bitpit::PatchKernel::internalBegin</a></div><div class="ttdeci">CellIterator internalBegin()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01160">patch_kernel.cpp:1160</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa51f57fff2126e9cb7f783a756ea3593">bitpit::ElementInfo::QUAD</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00053">element.hpp:53</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9f4e72f1fafb0743c9b17ce1b4cb558d"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9f4e72f1fafb0743c9b17ce1b4cb558d">bitpit::PatchKernel::getVertexCount</a></div><div class="ttdeci">virtual long getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00572">patch_kernel.cpp:572</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314a9f82429068add059795aa004101a1760">bitpit::ElementInfo::VERTEX</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00048">element.hpp:48</a></div></div>
<div class="ttc" id="classbitpit_1_1STLObj_xhtml_a9fd51f8f6353d0f9480b8fb9dcdad07d"><div class="ttname"><a href="classbitpit_1_1STLObj.xhtml#a9fd51f8f6353d0f9480b8fb9dcdad07d">bitpit::STLObj::close</a></div><div class="ttdeci">void close(std::string mode=&quot;&quot;)</div><div class="ttdef"><b>Definition:</b> <a href="STL_8cpp_source.xhtml#l00232">STL.cpp:232</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aa1070753551cb033cdc13d1e727bb6da"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aa1070753551cb033cdc13d1e727bb6da">bitpit::PatchKernel::internalEnd</a></div><div class="ttdeci">CellIterator internalEnd()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01170">patch_kernel.cpp:1170</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4a727482a16bcd0a45800bc96f02be25"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4a727482a16bcd0a45800bc96f02be25">bitpit::PatchKernel::countFaces</a></div><div class="ttdeci">long countFaces() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02427">patch_kernel.cpp:2427</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a8558fe1c65cb2d7b98b8fcad48f62db0"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a8558fe1c65cb2d7b98b8fcad48f62db0">bitpit::SurfUnstructured::_markCellForRefinement</a></div><div class="ttdeci">bool _markCellForRefinement(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00100">surfunstructured.cpp:100</a></div></div>
<div class="ttc" id="classbitpit_1_1DGFObj_xhtml"><div class="ttname"><a href="classbitpit_1_1DGFObj.xhtml">bitpit::DGFObj</a></div><div class="ttdoc">Interface to DGF I/O function. </div><div class="ttdef"><b>Definition:</b> <a href="DGF_8hpp_source.xhtml#l00078">DGF.hpp:78</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a711dfbbff4a37af945148b8c0e88fdbf"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a711dfbbff4a37af945148b8c0e88fdbf">bitpit::SurfUnstructured::_markCellForCoarsening</a></div><div class="ttdeci">bool _markCellForCoarsening(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00115">surfunstructured.cpp:115</a></div></div>
<div class="ttc" id="classbitpit_1_1PiercedIterator_xhtml_a18841f81fbb288de48b90666f40d9942"><div class="ttname"><a href="classbitpit_1_1PiercedIterator.xhtml#a18841f81fbb288de48b90666f40d9942">bitpit::PiercedIterator::getId</a></div><div class="ttdeci">id_t getId(const id_t &amp;fallback=-1) const noexcept</div><div class="ttdef"><b>Definition:</b> <a href="piercedVector_8tpp_source.xhtml#l00060">piercedVector.tpp:60</a></div></div>
<div class="ttc" id="classbitpit_1_1DGFObj_xhtml_a462f8fe0486ed183fbf36a43e0025a53"><div class="ttname"><a href="classbitpit_1_1DGFObj.xhtml#a462f8fe0486ed183fbf36a43e0025a53">bitpit::DGFObj::save</a></div><div class="ttdeci">void save(int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="DGF_8cpp_source.xhtml#l00614">DGF.cpp:614</a></div></div>
<div class="ttc" id="classbitpit_1_1STLObj_xhtml"><div class="ttname"><a href="classbitpit_1_1STLObj.xhtml">bitpit::STLObj</a></div><div class="ttdoc">Interface to STL I/O function. </div><div class="ttdef"><b>Definition:</b> <a href="STL_8hpp_source.xhtml#l00066">STL.hpp:66</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_aa4c81c64d4c54c8f060a8535fa46c2e8"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#aa4c81c64d4c54c8f060a8535fa46c2e8">bitpit::SurfUnstructured::exportSTL</a></div><div class="ttdeci">unsigned short exportSTL(const std::string &amp;, const bool &amp;, bool flag=true)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00374">surfunstructured.cpp:374</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml">bitpit::SurfUnstructured</a></div><div class="ttdoc">The SurfUnstructured class defines an unstructured surface triangulation. </div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8hpp_source.xhtml#l00036">surfunstructured.hpp:36</a></div></div>
<div class="ttc" id="classbitpit_1_1DGFObj_xhtml_ac5294abd691729ad2338a70b8813cfdc"><div class="ttname"><a href="classbitpit_1_1DGFObj.xhtml#ac5294abd691729ad2338a70b8813cfdc">bitpit::DGFObj::load</a></div><div class="ttdeci">void load(int &amp;, int &amp;, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="DGF_8cpp_source.xhtml#l00519">DGF.cpp:519</a></div></div>
<div class="ttc" id="classbitpit_1_1SurfUnstructured_xhtml_a58a0ddd25390ac640cc4debc4e5a00bc"><div class="ttname"><a href="classbitpit_1_1SurfUnstructured.xhtml#a58a0ddd25390ac640cc4debc4e5a00bc">bitpit::SurfUnstructured::extractEdgeNetwork</a></div><div class="ttdeci">void extractEdgeNetwork(SurfUnstructured &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="surfunstructured_8cpp_source.xhtml#l00169">surfunstructured.cpp:169</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aed8ade7111098a500e101d82337541b6"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aed8ade7111098a500e101d82337541b6">bitpit::PatchKernel::reserveCells</a></div><div class="ttdeci">bool reserveCells(size_t nCells)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00368">patch_kernel.cpp:368</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:24 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

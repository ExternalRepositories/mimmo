
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/common/utilsString.tpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_fdedb0aba14d44ce9d99bc100e026e6a.xhtml">common</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">utilsString.tpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">//                               STRING OPERATORS                                     //</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">//                                                                                    //</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// Basic operators for string.                                                        //</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// INFO                                                                               //</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// Author     : Alessandro Alaia                                                      //</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// Date       : Jul 16, 2013                                                          //</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">// Version    : v1.0                                                                  //</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">//                                                                                    //</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// All rights reserved.                                                               //</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">namespace </span>bitpit{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">namespace </span>utils{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">// Trimming operators =============================================================== //</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">   60</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> std::string &amp;<a class="code" href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">ltrim</a>(</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::string &amp;s</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;) {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                              //</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">// Local variables</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">// TRIM STRING                                                                        //</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;s.erase(s.begin(), std::find_if(s.begin(), s.end(), not1(std::ptr_fun&lt;int, int&gt;(std::isspace))));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keywordflow">return</span>(s); };</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">   91</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> std::string &amp;<a class="code" href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">rtrim</a>(</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    std::string &amp;s</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;) {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                              //</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">// Local variables</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">// TRIM STRING                                                                        //</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;s.erase(std::find_if(s.rbegin(), s.rend(), not1(std::ptr_fun&lt;int, int&gt;(isspace))).base(), s.end());</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordflow">return</span>(s); };</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">  122</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> std::string &amp;<a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">trim</a>(</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    std::string &amp;s</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;) {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                              //</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">// Local variables</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">// TRIM STRING                                                                        //</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keywordflow">return</span>(<a class="code" href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">ltrim</a>(<a class="code" href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">rtrim</a>(s))); };</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#gac258781ca67f8a33018b0cb1e87beba5">  153</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> std::string <a class="code" href="group__commonUtils.xhtml#gac258781ca67f8a33018b0cb1e87beba5">lfill</a>(</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;     <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nchar,</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;     std::string &amp;s,</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;     <span class="keywordtype">char</span>         c</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;) {</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                              //</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">// Local variables</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;std::stringstream               ss;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">// BUILD THE OUTPUT STRING                                                            //</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;ss &lt;&lt; std::string(nchar - s.length(), c) &lt;&lt; s;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keywordflow">return</span>(ss.str());</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga0979b1f2bec395e380ce10ca72d02553">  189</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> std::string <a class="code" href="group__commonUtils.xhtml#ga0979b1f2bec395e380ce10ca72d02553">rfill</a>(</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;     <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nchar,</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;     std::string &amp;s,</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;     <span class="keywordtype">char</span>         c</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;) {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                              //</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">// Local variables</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;std::stringstream               ss;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">// BUILD THE OUTPUT STRING                                                            //</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;ss &lt;&lt; s &lt;&lt; std::string(nchar - s.length(), c);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keywordflow">return</span>(ss.str());</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">// Padding operators ================================================================ //</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga00bf0377b50ac81c49b46fb69996414d">  230</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> std::string <a class="code" href="group__commonUtils.xhtml#ga00bf0377b50ac81c49b46fb69996414d">zeroPadNumber</a>(</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">int</span> nchar,</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordtype">int</span> num</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;) {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">// VARIABLES DECLARATION                                                              //</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">//  Local variables</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;std::ostringstream          ss;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">// Counters</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment">// none</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">// PADDING                                                                            //</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">// ================================================================================== //</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;ss &lt;&lt; std::setw(nchar) &lt;&lt; std::setfill(<span class="charliteral">&#39;0&#39;</span>) &lt;&lt; num;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keywordflow">return</span> (ss.str()); };</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga74c227d4f60cdedcd7264a7937fd09b2">  261</a></span>&#160;<span class="comment"></span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="group__commonUtils.xhtml#ga74c227d4f60cdedcd7264a7937fd09b2">keywordInString</a>( std::string line_, std::string key_){</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <span class="keywordtype">bool</span> exist= ( line_.find( key_) != std::string::npos ) ;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  <span class="keywordflow">return</span> exist  ;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;};</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">  279</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">convertString</a>( std::string input_, T &amp;output_ ){</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  std::vector&lt;T&gt;    temp_;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  T            x_;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  temp_.clear() ;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">trim</a>( input_ );</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  std::stringstream ss_( input_ );</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordflow">while</span>( ss_.good() ){</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    ss_ &gt;&gt; x_ ;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    temp_.push_back(x_);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  };</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keywordflow">if</span>( temp_.size() == 0 ){</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; no useful information in string &quot;</span> &lt;&lt; input_   &lt;&lt; std::endl;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; casting zero                   &quot;</span> &lt;&lt;  std::endl;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    x_ = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span> (0) ; </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  } </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>( temp_.size() == 1){</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    x_ = temp_[0] ;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>( temp_.size() &gt; 1){</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; more than one element in string &quot;</span> &lt;&lt; input_   &lt;&lt; std::endl;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; assigning first element             &quot;</span>  &lt;&lt; std::endl;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    x_ = temp_[0] ; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  };</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  output_ = x_ ;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  return ;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;};</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#ga9e86fe37cc205a03b2d4054980bade72">  330</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">convertString</a>( std::string input_, std::vector&lt;T&gt; &amp;output_){</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  std::vector&lt;T&gt;    temp_;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  T            x_;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  temp_.clear() ;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">trim</a>( input_ );</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  std::stringstream ss_( input_ );</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <span class="keywordflow">while</span>( ss_.good() ){</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    ss_ &gt;&gt; x_ ;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    temp_.push_back(x_);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  };</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">if</span>( temp_.size() == 0 ){</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; no useful information in string &quot;</span> &lt;&lt; input_   &lt;&lt; std::endl;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; returning void vector          &quot;</span> &lt;&lt;  std::endl;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  } ;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  output_= temp_ ;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  return ;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;};</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">// ---------------------------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">size_t</span> n&gt;</div>
<div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="group__commonUtils.xhtml#gab5933459e2cdaba505d8e52f9b32e6f0">  368</a></span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">convertString</a>( std::string input_, std::array&lt;T,n&gt; &amp;output_) {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  std::vector&lt;T&gt;    temp_;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  T            x_;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  temp_.clear() ;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">trim</a>( input_ );</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  std::stringstream ss_( input_ );</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordflow">while</span>( ss_.good() ){</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    ss_ &gt;&gt; x_ ;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    temp_.push_back(x_);</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  };</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <span class="keywordflow">if</span>( temp_.size() &lt; n ){</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; not enough useful information in string &quot;</span> &lt;&lt; input_   &lt;&lt; std::endl;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; casting zero into missing elements      &quot;</span> &lt;&lt;  std::endl;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    x_ = <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span> (0) ;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    output_.fill( x_ ) ;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;temp_.size(); i++){</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      output_[i] = temp_[i] ;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    };</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>( temp_.size() == n){</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;n; i++){</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      output_[i] = temp_[i] ;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    };</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>( temp_.size() &gt; n){</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; more than &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; elements in string &quot;</span> &lt;&lt; input_   &lt;&lt; std::endl;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot; assigning first element &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; elements &quot;</span>   &lt;&lt; std::endl;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;n; i++){</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      output_[i] = temp_[i] ;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    };</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  };</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  return ;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;};</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;}</div>
<div class="ttc" id="group__commonUtils_xhtml_ga74c227d4f60cdedcd7264a7937fd09b2"><div class="ttname"><a href="group__commonUtils.xhtml#ga74c227d4f60cdedcd7264a7937fd09b2">bitpit::utils::keywordInString</a></div><div class="ttdeci">bool keywordInString(std::string, std::string)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00261">utilsString.tpp:261</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga8c0a3a248295d848ab26d96ef239bf3c"><div class="ttname"><a href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a></div><div class="ttdeci">std::string &amp; trim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00122">utilsString.tpp:122</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga581867dae90ebcb56e2df3cb2a92e863"><div class="ttname"><a href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">bitpit::utils::rtrim</a></div><div class="ttdeci">std::string &amp; rtrim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00091">utilsString.tpp:91</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga0979b1f2bec395e380ce10ca72d02553"><div class="ttname"><a href="group__commonUtils.xhtml#ga0979b1f2bec395e380ce10ca72d02553">bitpit::utils::rfill</a></div><div class="ttdeci">std::string rfill(const int &amp;, std::string &amp;, char)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00189">utilsString.tpp:189</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga00bf0377b50ac81c49b46fb69996414d"><div class="ttname"><a href="group__commonUtils.xhtml#ga00bf0377b50ac81c49b46fb69996414d">bitpit::utils::zeroPadNumber</a></div><div class="ttdeci">std::string zeroPadNumber(int, int)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00230">utilsString.tpp:230</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga6d129095e8d03237f1ad81cee6efa771"><div class="ttname"><a href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">bitpit::utils::convertString</a></div><div class="ttdeci">void convertString(std::string, T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00279">utilsString.tpp:279</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_gac258781ca67f8a33018b0cb1e87beba5"><div class="ttname"><a href="group__commonUtils.xhtml#gac258781ca67f8a33018b0cb1e87beba5">bitpit::utils::lfill</a></div><div class="ttdeci">std::string lfill(const int &amp;, std::string &amp;, char)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00153">utilsString.tpp:153</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga105ed45338d1b589dd0f362c1ceb32c6"><div class="ttname"><a href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">bitpit::utils::ltrim</a></div><div class="ttdeci">std::string &amp; ltrim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00060">utilsString.tpp:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

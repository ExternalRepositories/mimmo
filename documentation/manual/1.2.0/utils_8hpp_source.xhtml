
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/common/utils.hpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_fdedb0aba14d44ce9d99bc100e026e6a.xhtml">common</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">utils.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef __BITPIT_UTILS_HPP__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __BITPIT_UTILS_HPP__</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;cfloat&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">// Macros to allow using oveload in preprocessing macro</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#define BITPIT_CAT(A, B) A ## B</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#define BITPIT_COUNT_ARGS_MAX6(_1, _2, _3, _4, _5, _6 </span><span class="comment">/* ad nauseam */</span><span class="preprocessor">, COUNT, ...) COUNT</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define BITPIT_EXPAND_ARGS_FOR_COUNT(ARGS) BITPIT_COUNT_ARGS_MAX6 ARGS</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define BITPIT_ARGS_SIZE(...) BITPIT_EXPAND_ARGS_FOR_COUNT((__VA_ARGS__, 6, 5, 4, 3, 2, 1, 0))</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#define BITPIT_SELECT_OVERLOAD(NAME, NUM) BITPIT_CAT(NAME ## _, NUM)</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define BITPIT_OVERLOAD_CALL(NAME, ...) BITPIT_SELECT_OVERLOAD(NAME, BITPIT_ARGS_SIZE(__VA_ARGS__))(__VA_ARGS__)</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">namespace </span>utils {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Comparator = std::less&lt;T&gt; &gt;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keywordtype">bool</span> addToOrderedVector(<span class="keyword">const</span> T &amp;value, std::vector&lt;T&gt; &amp;list, Comparator comparator = Comparator());</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Comparator = std::less&lt;T&gt; &gt;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">typename</span> std::vector&lt;T&gt;::const_iterator findInOrderedVector(<span class="keyword">const</span> T &amp;value, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;list, Comparator comparator = Comparator());</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespacebitpit_1_1utils.xhtml#af1decd85ef09fca51526234dd9093663">eraseValue</a>(std::vector&lt;T&gt; &amp;, <span class="keyword">const</span> T&amp;);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;std::vector&lt;T&gt; <a class="code" href="namespacebitpit_1_1utils.xhtml#a32d0b7a8f7e2b6e8e6290085c3538c79">intersectionVector</a>(<span class="keyword">const</span> std::vector&lt;T&gt;&amp;, <span class="keyword">const</span> std::vector&lt;T&gt;&amp;);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#ifndef __BITPIT_UTILS_SRC__</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="keyword">template</span> <span class="keywordtype">bool</span> addToOrderedVector&lt;&gt;(<span class="keyword">const</span> <span class="keywordtype">long</span>&amp;, std::vector&lt;long&gt;&amp;, std::less&lt;long&gt;);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">extern</span> <span class="keyword">template</span> <span class="keywordtype">bool</span> addToOrderedVector&lt;&gt;(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>&amp;, std::vector&lt;unsigned long&gt;&amp;, std::less&lt;unsigned long&gt;);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">extern</span> <span class="keyword">template</span> std::vector&lt;long&gt;::const_iterator findInOrderedVector&lt;&gt;(<span class="keyword">const</span> <span class="keywordtype">long</span>&amp;, <span class="keyword">const</span> std::vector&lt;long&gt;&amp;, std::less&lt;long&gt;);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">extern</span> <span class="keyword">template</span> std::vector&lt;unsigned long&gt;::const_iterator findInOrderedVector&lt;&gt;(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>&amp;, <span class="keyword">const</span> std::vector&lt;unsigned long&gt;&amp;, std::less&lt;unsigned long&gt;);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__commonUtils.xhtml#gaa23e28742c346e3492aa57b4e2975033">extractWithoutReplacement</a>(                                               <span class="comment">// Extract integers without replacement</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">int</span>                         ,                                             <span class="comment">// (input) number of integers to be extracted</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">int</span>                         ,                                             <span class="comment">// (input) upper bound of extraction interval</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    std::vector&lt;int&gt;           &amp;                                              <span class="comment">// (input/output) list of extracted value</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">// Trimming operators --------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">inline</span> std::string &amp;<a class="code" href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">ltrim</a>(                                                     <span class="comment">// STRING LEFT TRIMMING</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        std::string                             &amp;                                     <span class="comment">// (input) std::string to be trimmed</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        );</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">inline</span> std::string &amp;<a class="code" href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">rtrim</a>(                                                     <span class="comment">// STRING RIGHT TRIMMING</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        std::string                             &amp;                                     <span class="comment">// (input) std::string to be trimmed</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        );</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">inline</span> std::string &amp;<a class="code" href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">trim</a>(                                                      <span class="comment">// STRING TRIMMING</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        std::string                             &amp;                                     <span class="comment">// (input) std::string to be trimmed</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        );</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">// Padding operators ---------------------------------------------------------------- //</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="group__commonUtils.xhtml#gac258781ca67f8a33018b0cb1e87beba5">lfill</a>(                                                     <span class="comment">// Left filler for input string</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>                               &amp;,                            <span class="comment">// (input) Final string length</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        std::string                             &amp;,                            <span class="comment">// (input) input string</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">char</span>                                                                  <span class="comment">// (input) char used as filler</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="group__commonUtils.xhtml#ga0979b1f2bec395e380ce10ca72d02553">rfill</a>(                                                     <span class="comment">// Right filler for input string</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span>                               &amp;,                            <span class="comment">// (input) Final string length</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        std::string                             &amp;,                            <span class="comment">// (input) input string</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordtype">char</span>                                                                  <span class="comment">// (input) char used as filler</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keyword">inline</span> std::string <a class="code" href="group__commonUtils.xhtml#ga00bf0377b50ac81c49b46fb69996414d">zeroPadNumber</a>(                                              <span class="comment">// PERFORMS CONVERSION OF INTEGER INTO STRING</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordtype">int</span>                                      ,                                    <span class="comment">// (input) number of char in std::string</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordtype">int</span>                                                                           <span class="comment">// (input) integer to be padded</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        );</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">// Input stream operator ------------------------------------------------------------ //</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keywordtype">bool</span> getAfterKeyword(                                                               <span class="comment">// EXTRACT FIELD AFTER SPECIFIC KEYWORD</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        std::string                              ,                                    <span class="comment">// (input) std::string</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        std::string                              ,                                    <span class="comment">// (input) keyword</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordtype">char</span>                                     ,                                    <span class="comment">// (input) field delimiter</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        std::string                             &amp;                                     <span class="comment">// (input/output) field found</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        );</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">// returns true if key_ is present in line ------------------------------------------ //</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="group__commonUtils.xhtml#ga74c227d4f60cdedcd7264a7937fd09b2">keywordInString</a>(                                                 <span class="comment">// SEARCH KEYWORD IN STRING</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        std::string                              ,                                    <span class="comment">// (input) input string            </span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        std::string                                                                   <span class="comment">// (input) keyword</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        ) ;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">// converts a string to fundamental data types and vectors or arrays of them -------- //</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordtype">void</span> <a class="code" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">convertString</a>(                                                                  <span class="comment">// EXTRACT SCALAR FROM STRING</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        std::string                              ,                                    <span class="comment">// (input) input string</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        T                                       &amp;                                     <span class="comment">// (input/output) scalar</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        );</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">convertString</a>(                                                                 <span class="comment">// EXTRACT DATA FROM STRING AND STORE THEM INTO VECTOR</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        std::string                              ,                                    <span class="comment">// (input) string</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        std::vector&lt;T&gt;                          &amp;                                     <span class="comment">// (input/output) vector used to store string</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        );</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T, <span class="keywordtype">size_t</span> n&gt;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keywordtype">void</span>  <a class="code" href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">convertString</a>(                                                                 <span class="comment">// EXTRACT DATA FROM STRING AND STORE THEM INTO ARRAY</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        std::string                              ,                                    <span class="comment">// (input) string</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        std::array&lt;T,n&gt;                         &amp;                                     <span class="comment">// (input/output) array used to store data</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        );</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">  147</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">DoubleFloatingEqual</a></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml#a901846ac11374b358c7c6b51084cfe2b">  157</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml#a901846ac11374b358c7c6b51084cfe2b">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;y)<span class="keyword"> const</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">double</span> ABS_MAX_DIFF = 1e-14;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">double</span> REL_MAX_DIFF = DBL_EPSILON;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">// Check if the numbers are really close (needed when comparing</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// numbers near zero).</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordtype">double</span> diff = <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(x - y);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (diff &lt;= ABS_MAX_DIFF) {</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// Check if the numbers have the same sign</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">if</span> ((x &lt; 0 &amp;&amp; y &gt; 0) || (x &gt; 0 &amp;&amp; y &lt; 0)) {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">// Compare using a relative difference</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordtype">double</span> abs_x   = <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(x);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordtype">double</span> abs_y   = <a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(y);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordtype">double</span> largest = (abs_y &gt; abs_x) ? abs_y : abs_x;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> (diff &lt;= largest * REL_MAX_DIFF);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;};</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="namespacebitpit_1_1hashing.xhtml">  188</a></span>&#160;<span class="keyword">namespace </span>hashing {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// Code from boost</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// Reciprocal of the golden ratio helps spread entropy</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="comment">//     and handles duplicates.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="comment">// See Mike Seymour in magic-numbers-in-boosthash-combine:</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">//     http://stackoverflow.com/questions/4948780</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> hash_combine(std::size_t&amp; seed, T <span class="keyword">const</span>&amp; v)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        seed ^= std::hash&lt;T&gt;()(v) + 0x9e3779b9 + (seed&lt;&lt;6) + (seed&gt;&gt;2);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="comment">// Recursive template code derived from Matthieu M.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    template &lt;class Tuple, size_t Index = std::tuple_size&lt;Tuple&gt;::value - 1&gt;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">struct </span>HashValueImpl</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> apply(<span class="keywordtype">size_t</span> &amp; seed, Tuple <span class="keyword">const</span> &amp; tuple)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            HashValueImpl&lt;Tuple, Index-1&gt;::apply(seed, tuple);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            hash_combine(seed, std::get&lt;Index&gt;(tuple));</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    };</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">class</span> Tuple&gt;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">struct </span>HashValueImpl&lt;Tuple,0&gt;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keyword">static</span> <span class="keywordtype">void</span> apply(<span class="keywordtype">size_t</span> &amp; seed, Tuple <span class="keyword">const</span> &amp; tuple)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            hash_combine(seed, std::get&lt;0&gt;(tuple));</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    };</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> TT&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="structbitpit_1_1hashing_1_1hash.xhtml">  226</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structbitpit_1_1hashing_1_1hash.xhtml">hash</a></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordtype">size_t</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    operator()(TT <span class="keyword">const</span>&amp; tt)<span class="keyword"> const</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">return</span> std::hash&lt;TT&gt;()(tt);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;};</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ... TT&gt;</div>
<div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="structbitpit_1_1hashing_1_1hash_3_01std_1_1tuple_3_01TT_8_8_8_4_01_4.xhtml">  236</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structbitpit_1_1hashing_1_1hash.xhtml">hash</a>&lt;std::tuple&lt;TT...&gt;&gt;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;{</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">size_t</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    operator()(std::tuple&lt;TT...&gt; <span class="keyword">const</span> &amp; tt)<span class="keyword"> const</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordtype">size_t</span> seed = 0;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        HashValueImpl&lt;std::tuple&lt;TT...&gt; &gt;::apply(seed, tt);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">return</span> seed;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;};</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor"># include &quot;utilsString.tpp&quot;</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="group__commonUtils_xhtml_ga74c227d4f60cdedcd7264a7937fd09b2"><div class="ttname"><a href="group__commonUtils.xhtml#ga74c227d4f60cdedcd7264a7937fd09b2">bitpit::utils::keywordInString</a></div><div class="ttdeci">bool keywordInString(std::string, std::string)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00261">utilsString.tpp:261</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga8c0a3a248295d848ab26d96ef239bf3c"><div class="ttname"><a href="group__commonUtils.xhtml#ga8c0a3a248295d848ab26d96ef239bf3c">bitpit::utils::trim</a></div><div class="ttdeci">std::string &amp; trim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00122">utilsString.tpp:122</a></div></div>
<div class="ttc" id="structbitpit_1_1utils_1_1DoubleFloatingEqual_xhtml_a901846ac11374b358c7c6b51084cfe2b"><div class="ttname"><a href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml#a901846ac11374b358c7c6b51084cfe2b">bitpit::utils::DoubleFloatingEqual::operator()</a></div><div class="ttdeci">bool operator()(const double &amp;x, const double &amp;y) const </div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00157">utils.hpp:157</a></div></div>
<div class="ttc" id="namespacebitpit_1_1utils_xhtml_af1decd85ef09fca51526234dd9093663"><div class="ttname"><a href="namespacebitpit_1_1utils.xhtml#af1decd85ef09fca51526234dd9093663">bitpit::utils::eraseValue</a></div><div class="ttdeci">void eraseValue(std::vector&lt; T &gt; &amp;, const T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8tpp_source.xhtml#l00111">utils.tpp:111</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga581867dae90ebcb56e2df3cb2a92e863"><div class="ttname"><a href="group__commonUtils.xhtml#ga581867dae90ebcb56e2df3cb2a92e863">bitpit::utils::rtrim</a></div><div class="ttdeci">std::string &amp; rtrim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00091">utilsString.tpp:91</a></div></div>
<div class="ttc" id="structbitpit_1_1utils_1_1DoubleFloatingEqual_xhtml"><div class="ttname"><a href="structbitpit_1_1utils_1_1DoubleFloatingEqual.xhtml">bitpit::utils::DoubleFloatingEqual</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00147">utils.hpp:147</a></div></div>
<div class="ttc" id="namespacebitpit_1_1utils_xhtml_a32d0b7a8f7e2b6e8e6290085c3538c79"><div class="ttname"><a href="namespacebitpit_1_1utils.xhtml#a32d0b7a8f7e2b6e8e6290085c3538c79">bitpit::utils::intersectionVector</a></div><div class="ttdeci">std::vector&lt; T &gt; intersectionVector(const std::vector&lt; T &gt; &amp;, const std::vector&lt; T &gt; &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8tpp_source.xhtml#l00146">utils.tpp:146</a></div></div>
<div class="ttc" id="structbitpit_1_1hashing_1_1hash_xhtml"><div class="ttname"><a href="structbitpit_1_1hashing_1_1hash.xhtml">bitpit::hashing::hash</a></div><div class="ttdef"><b>Definition:</b> <a href="utils_8hpp_source.xhtml#l00226">utils.hpp:226</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga0979b1f2bec395e380ce10ca72d02553"><div class="ttname"><a href="group__commonUtils.xhtml#ga0979b1f2bec395e380ce10ca72d02553">bitpit::utils::rfill</a></div><div class="ttdeci">std::string rfill(const int &amp;, std::string &amp;, char)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00189">utilsString.tpp:189</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga00bf0377b50ac81c49b46fb69996414d"><div class="ttname"><a href="group__commonUtils.xhtml#ga00bf0377b50ac81c49b46fb69996414d">bitpit::utils::zeroPadNumber</a></div><div class="ttdeci">std::string zeroPadNumber(int, int)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00230">utilsString.tpp:230</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_gaa23e28742c346e3492aa57b4e2975033"><div class="ttname"><a href="group__commonUtils.xhtml#gaa23e28742c346e3492aa57b4e2975033">bitpit::utils::extractWithoutReplacement</a></div><div class="ttdeci">void extractWithoutReplacement(int n, int m, std::vector&lt; int &gt; &amp;list)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8cpp_source.xhtml#l00059">utils.cpp:59</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga6d129095e8d03237f1ad81cee6efa771"><div class="ttname"><a href="group__commonUtils.xhtml#ga6d129095e8d03237f1ad81cee6efa771">bitpit::utils::convertString</a></div><div class="ttdeci">void convertString(std::string, T &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00279">utilsString.tpp:279</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_gac258781ca67f8a33018b0cb1e87beba5"><div class="ttname"><a href="group__commonUtils.xhtml#gac258781ca67f8a33018b0cb1e87beba5">bitpit::utils::lfill</a></div><div class="ttdeci">std::string lfill(const int &amp;, std::string &amp;, char)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00153">utilsString.tpp:153</a></div></div>
<div class="ttc" id="group__commonUtils_xhtml_ga105ed45338d1b589dd0f362c1ceb32c6"><div class="ttname"><a href="group__commonUtils.xhtml#ga105ed45338d1b589dd0f362c1ceb32c6">bitpit::utils::ltrim</a></div><div class="ttdeci">std::string &amp; ltrim(std::string &amp;)</div><div class="ttdef"><b>Definition:</b> <a href="utilsString_8tpp_source.xhtml#l00060">utilsString.tpp:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:23 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/volcartesian/volcartesian.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_dbd5555f837292e8a065e21c68c7ebb2.xhtml">volcartesian</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">volcartesian.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;bitset&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;bitpit_common.hpp&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;volcartesian.hpp&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ae7f342e48ae2b7c9bcf68bcbc19600f3">   56</a></span>&#160;<a class="code" href="classbitpit_1_1VolCartesian.xhtml#ae7f342e48ae2b7c9bcf68bcbc19600f3">VolCartesian::VolCartesian</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dimension,</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                               <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;origin,</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                               <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;lengths,</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                               <span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;nCells)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    : <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>(id, dimension, false)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    initialize(origin, lengths, nCells);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a92602cbe55d9197447dfe77414f9c01b">   74</a></span>&#160;<a class="code" href="classbitpit_1_1VolCartesian.xhtml#ae7f342e48ae2b7c9bcf68bcbc19600f3">VolCartesian::VolCartesian</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dimension,</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                               <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;origin,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                               <span class="keywordtype">double</span> length, <span class="keywordtype">int</span> nCells1D)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    : <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>(id, dimension, false)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// Number of cells</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::array&lt;int, 3&gt; nCells;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; dimension; n++) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        nCells[n] = nCells1D;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        nCells[Vertex::COORD_Z] = 0;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="comment">// Domain lengths</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::array&lt;double, 3&gt; lengths;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; dimension; n++) {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        lengths[n] = length;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        lengths[Vertex::COORD_Z] = 0;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Patch initialization</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    initialize(origin, lengths, nCells);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#addc7510994337c198a120b269fc55563">  112</a></span>&#160;<a class="code" href="classbitpit_1_1VolCartesian.xhtml#ae7f342e48ae2b7c9bcf68bcbc19600f3">VolCartesian::VolCartesian</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dimension,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                               <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;origin,</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                               <span class="keywordtype">double</span> length, <span class="keywordtype">double</span> dh)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    : <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>(id, dimension, false)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// Number of cells</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    std::array&lt;int, 3&gt; nCells;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; dimension; n++) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        nCells[n] = (int) std::ceil(length / dh);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        nCells[Vertex::COORD_Z] = 0;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="comment">// Domain lengths</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    std::array&lt;double, 3&gt; lengths;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; dimension; n++) {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        lengths[n] = length;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        lengths[Vertex::COORD_Z] = 0;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Patch initialization</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    initialize(origin, lengths, nCells);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">void</span> VolCartesian::initialize(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;origin,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;lengths,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                <span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;nCells)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Initializing cartesian patch\n&quot;</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="comment">// Info sulle celle</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++n) {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="comment">// Initialize cells</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        m_nCells1D[n]     = nCells[n];</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        m_minCoords[n]    = origin[n];</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        m_maxCoords[n]    = origin[n] + lengths[n];</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        m_cellSpacings[n] = lengths[n] / m_nCells1D[n];</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        m_cellCenters[n].resize(m_nCells1D[n]);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_nCells1D[n]; i++) {</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            m_cellCenters[n][i] = m_minCoords[n] + (0.5 + i) * m_cellSpacings[n];</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  - Cell count along direction &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; m_nCells1D[n] &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// Initialize vertices</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        m_nVertices1D[n] = m_nCells1D[n] + 1;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        m_vertexCoords[n].resize(m_nVertices1D[n]);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_nVertices1D[n]; i++) {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            m_vertexCoords[n][i] = m_minCoords[n] + i * m_cellSpacings[n];</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        m_nCells1D[Vertex::COORD_Z]     = 0;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        m_minCoords[Vertex::COORD_Z]    = 0.;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        m_maxCoords[Vertex::COORD_Z]    = 0.;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        m_cellSpacings[Vertex::COORD_Z] = 0.;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        m_nVertices1D[Vertex::COORD_Z] = 0;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// Count the total number of vertices</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    m_nVertices = 1;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++n) {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        m_nVertices *= m_nVertices1D[n];</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  - Total vertex count: &quot;</span> &lt;&lt; m_nVertices &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// Count the total number of cells</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    m_nCells = 1;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++n) {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        m_nCells    *= m_nCells1D[n];</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  - Total cell count: &quot;</span> &lt;&lt; m_nCells &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">// Count the total number of interfaces</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    m_nInterfaces = 0;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); n++) {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        std::array&lt;int, 3&gt; interfaceCount1D = getInterfaceCountDirection(n);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordtype">int</span> nDirectionInterfaces = 1;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); n++) {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            nDirectionInterfaces *= interfaceCount1D[n];</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        m_nInterfaces += nDirectionInterfaces;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  - Total interface count: &quot;</span> &lt;&lt; m_nInterfaces &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="comment">// Interface area</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    initializeInterfaceArea();</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="comment">// Cell volume</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    initializeCellVolume();</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="comment">// Normals</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); n++) {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = -1; k &lt;= 1; k += 2) {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            std::array&lt;double, 3&gt; normal = {{0.0, 0.0, 0.0}};</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            normal[n] = k;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            m_normals[i++] = normal;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="comment">// Deltas for the evaluation of the vertex neighbours</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    m_vertexNeighDeltas = std::vector&lt;std::array&lt;int, 3&gt;&gt;(<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">std::pow</a>(2, <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>()));</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    m_vertexNeighDeltas[0] = {{ 0,  0, 0}};</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    m_vertexNeighDeltas[1] = {{-1,  0, 0}};</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    m_vertexNeighDeltas[2] = {{ 0, -1, 0}};</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    m_vertexNeighDeltas[3] = {{-1, -1, 0}};</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        m_vertexNeighDeltas[4] = {{ 0,  0, -1}};</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        m_vertexNeighDeltas[5] = {{-1,  0, -1}};</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        m_vertexNeighDeltas[6] = {{ 0, -1, -1}};</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        m_vertexNeighDeltas[7] = {{-1, -1, -1}};</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="comment">// Deltas for the evaluation of the edge neighbours</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    m_edgeNeighDeltas = std::vector&lt;std::array&lt;int, 3&gt;&gt;(12);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    m_edgeNeighDeltas[ 0] = {{-1,  0, -1}};</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    m_edgeNeighDeltas[ 1] = {{ 1,  0, -1}};</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    m_edgeNeighDeltas[ 2] = {{ 0, -1, -1}};</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    m_edgeNeighDeltas[ 3] = {{ 0,  1, -1}};</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    m_edgeNeighDeltas[ 4] = {{-1, -1,  0}};</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    m_edgeNeighDeltas[ 5] = {{ 1, -1,  0}};</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    m_edgeNeighDeltas[ 6] = {{-1,  1,  0}};</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    m_edgeNeighDeltas[ 7] = {{ 1,  1,  0}};</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    m_edgeNeighDeltas[ 8] = {{-1,  0,  1}};</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    m_edgeNeighDeltas[ 9] = {{ 1,  0,  1}};</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    m_edgeNeighDeltas[10] = {{ 0, -1,  1}};</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    m_edgeNeighDeltas[11] = {{ 0,  1,  1}};</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="comment">// Faces associated to the edges</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    m_edgeFaces = std::vector&lt;std::array&lt;int, 2&gt;&gt;(12);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    m_edgeFaces[ 0] = {{ 0, 4}};</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    m_edgeFaces[ 1] = {{ 1, 4}};</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    m_edgeFaces[ 2] = {{ 2, 4}};</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    m_edgeFaces[ 3] = {{ 3, 4}};</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    m_edgeFaces[ 4] = {{ 0, 2}};</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    m_edgeFaces[ 5] = {{ 1, 2}};</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    m_edgeFaces[ 6] = {{ 0, 3}};</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    m_edgeFaces[ 7] = {{ 1, 3}};</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    m_edgeFaces[ 8] = {{ 0, 5}};</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    m_edgeFaces[ 9] = {{ 1, 5}};</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    m_edgeFaces[10] = {{ 2, 5}};</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    m_edgeFaces[11] = {{ 3, 5}};</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="comment">// Set the bounding box</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a">setBoundingBox</a>(m_minCoords, m_maxCoords);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a4cee1aaca004bf6f3af1f11af40ef5a4">setBoundingBoxFrozen</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;}</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">void</span> VolCartesian::initializeCellVolume()</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    m_cellVolume = m_cellSpacings[Vertex::COORD_X] * m_cellSpacings[Vertex::COORD_Y];</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        m_cellVolume *= m_cellSpacings[Vertex::COORD_Z];</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;}</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keywordtype">void</span> VolCartesian::initializeInterfaceArea()</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;{</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++n) {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        m_interfaceArea[n] = m_cellVolume / m_cellSpacings[n];</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        m_interfaceArea[Vertex::COORD_Z] = 0.;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;}</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a90c2ef2f933d752d63431f84c0c0c6f8">  311</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a90c2ef2f933d752d63431f84c0c0c6f8">VolCartesian::getVertexCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keywordflow">return</span> m_nVertices;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a510828dab281674373600a930b5750c9">  321</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a510828dab281674373600a930b5750c9">VolCartesian::getCellCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> m_nCells;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#aecf0038029efdfc1d5290372fab37557">  332</a></span>&#160;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aeba11119684555c7a817d47e009e797d">VolCartesian::getCellType</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aeba11119684555c7a817d47e009e797d">getCellType</a>();</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#aeba11119684555c7a817d47e009e797d">  344</a></span>&#160;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aeba11119684555c7a817d47e009e797d">VolCartesian::getCellType</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">ElementInfo::VOXEL</a>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;}</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a16c13a47aaca402772ba593d66543f31">  358</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a16c13a47aaca402772ba593d66543f31">VolCartesian::getInterfaceCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">return</span> m_nInterfaces;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div>
<div class="line"><a name="l00369"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a523c7757b86f9a20cd9e6cc4d12813c1">  369</a></span>&#160;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ac79216d8035cea04a32070488711c828">VolCartesian::getInterfaceType</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ac79216d8035cea04a32070488711c828">getInterfaceType</a>();</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ac79216d8035cea04a32070488711c828">  381</a></span>&#160;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ac79216d8035cea04a32070488711c828">VolCartesian::getInterfaceType</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">ElementInfo::LINE</a>;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;}</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#aa54f07f5b15326a694961c9084b33a20">  396</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aa54f07f5b15326a694961c9084b33a20">VolCartesian::evalCellVolume</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> m_cellVolume;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a72264df84acb1e61011208a27686d496">  409</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a72264df84acb1e61011208a27686d496">VolCartesian::evalCellSize</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(m_cellVolume, 1. / <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>());</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div>
<div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a7ba99da1bbc9ea9a60124b400dcd8d4e">  422</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a7ba99da1bbc9ea9a60124b400dcd8d4e">VolCartesian::evalInterfaceArea</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= getInterface(id);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordtype">int</span> ownerFace = interface.<a class="code" href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">getOwnerFace</a>();</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordtype">int</span> direction = std::floor(ownerFace / 2.);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <span class="keywordflow">return</span> m_interfaceArea[direction];</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;}</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ac3de13023492238f8bd7534b04eecf99">  437</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ac3de13023492238f8bd7534b04eecf99">VolCartesian::evalInterfaceNormal</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;{</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= getInterface(id);</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordtype">int</span> ownerFace = interface.<a class="code" href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">getOwnerFace</a>();</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">return</span> m_normals[ownerFace];</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00450"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a7c5d9ff189006b5d1817ee495586758c">  450</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a7c5d9ff189006b5d1817ee495586758c">VolCartesian::getSpacing</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">return</span> m_cellSpacings;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;}</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a74303da0f02e473ef5dbcc9942f553e0">  462</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a7c5d9ff189006b5d1817ee495586758c">VolCartesian::getSpacing</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;direction)<span class="keyword"> const</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    <span class="keywordflow">return</span> m_cellSpacings[direction];</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;}</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#abc01f5fbd8e6079cebb601c5be386f3e">  473</a></span>&#160;<span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abc01f5fbd8e6079cebb601c5be386f3e">VolCartesian::_updateAdaption</a>(<span class="keywordtype">bool</span> trackAdaption)</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;{</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Updating cartesian mesh\n&quot;</span>;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="comment">// Enable advanced editing</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">setExpert</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="comment">// Reset the mesh</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9">reset</a>();</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="comment">// Definition of the mesh</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    addVertices();</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    addCells();</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    addInterfaces();</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    <span class="comment">// Disable advanced editing</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">setExpert</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="comment">// Adaption info</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    std::vector&lt;adaption::Info&gt; adaptionData;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    <span class="keywordflow">if</span> (trackAdaption) {</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        adaptionData.emplace_back();</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <a class="code" href="structbitpit_1_1adaption_1_1Info.xhtml">adaption::Info</a> &amp;adaptionCellInfo = adaptionData.back();</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        adaptionCellInfo.type   = adaption::TYPE_CREATION;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        adaptionCellInfo.entity = adaption::ENTITY_CELL;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        adaptionCellInfo.current.reserve(m_cells.size());</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;cell : m_cells) {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            adaptionCellInfo.current.emplace_back();</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keywordtype">long</span> &amp;cellId = adaptionCellInfo.current.back();</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            cellId = cell.getId();</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        adaptionData.emplace_back();</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        <a class="code" href="structbitpit_1_1adaption_1_1Info.xhtml">adaption::Info</a> &amp;adaptionInterfaceInfo = adaptionData.back();</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        adaptionInterfaceInfo.type   = adaption::TYPE_CREATION;</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        adaptionInterfaceInfo.entity = adaption::ENTITY_INTERFACE;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        adaptionInterfaceInfo.current.reserve(m_interfaces.size());</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;interface : m_interfaces) {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            adaptionInterfaceInfo.current.emplace_back();</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="keywordtype">long</span> &amp;interfaceId = adaptionInterfaceInfo.current.back();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            interfaceId = interface.getId();</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        adaptionData.emplace_back();</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    }</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">return</span> adaptionData;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;}</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keywordtype">void</span> VolCartesian::addVertices()</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  &gt;&gt; Creating vertices\n&quot;</span>;</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;    - Vertex count: &quot;</span> &lt;&lt; m_nVertices &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;    m_vertices.reserve(m_nVertices);</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) ? (k &lt; m_nVertices1D[Vertex::COORD_Z]) : (k &lt;= 0); k++) {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; m_nVertices1D[Vertex::COORD_Y]; j++) {</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_nVertices1D[Vertex::COORD_X]; i++) {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                <span class="comment">// Vertex coordinates</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                std::array&lt;double, 3&gt; coords;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                coords[Vertex::COORD_X] = m_vertexCoords[Vertex::COORD_X][i];</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                coords[Vertex::COORD_Y] = m_vertexCoords[Vertex::COORD_Y][j];</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                    coords[Vertex::COORD_Z] = m_vertexCoords[Vertex::COORD_Z][k];</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    coords[Vertex::COORD_Z] = 0.0;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                <span class="comment">// Add vertex</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                <span class="keywordtype">long</span> id_vertex = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i, j, k);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">VolumeKernel::addVertex</a>(std::move(coords), id_vertex);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        }</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;}</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="keywordtype">void</span> VolCartesian::addCells()</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;{</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  &gt;&gt; Creating cells\n&quot;</span>;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="comment">// Info on the cells</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aeba11119684555c7a817d47e009e797d">getCellType</a>();</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="comment">// Create the cells</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;    - Cell count: &quot;</span> &lt;&lt; m_nCells &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    m_cells.reserve(m_nCells);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) ? (k &lt; m_nCells1D[Vertex::COORD_Z]) : (k &lt;= 0); k++) {</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; m_nCells1D[Vertex::COORD_Y]; j++) {</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_nCells1D[Vertex::COORD_X]; i++) {</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                <span class="keywordtype">long</span> id_cell = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(i, j, k);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                CellIterator cellIterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">VolumeKernel::addCell</a>(cellType, <span class="keyword">true</span>, id_cell);</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                Cell &amp;cell = *cellIterator;</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                <span class="comment">// Connettività</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                cell.setVertex(0, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j,     k));</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                cell.setVertex(1, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j,     k));</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                cell.setVertex(2, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j + 1, k));</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                cell.setVertex(3, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j + 1, k));</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                    cell.setVertex(4, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j,     k + 1));</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    cell.setVertex(5, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j,     k + 1));</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    cell.setVertex(6, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j + 1, k + 1));</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    cell.setVertex(7, <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j + 1, k + 1));</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            }</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        }</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="keywordtype">void</span> VolCartesian::addInterfaces()</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;{</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  &gt;&gt; Creating interfaces\n&quot;</span>;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;    - Interface count: &quot;</span> &lt;&lt; m_nInterfaces &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    m_interfaces.reserve(m_nInterfaces);</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); n++) {</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        addInterfacesDirection(n);</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    }</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;}</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;std::array&lt;int, 3&gt; VolCartesian::getInterfaceCountDirection(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;direction)</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;{</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    std::array&lt;int, 3&gt; interfaceDirectionCount = m_nCells1D;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    interfaceDirectionCount[direction]++;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;    <span class="keywordflow">return</span> interfaceDirectionCount;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="keywordtype">void</span> VolCartesian::addInterfacesDirection(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;direction)</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;{</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;  &gt;&gt; Creating interfaces normal to direction &quot;</span> &lt;&lt; direction &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    <span class="comment">// Info on the interfaces</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> interfaceType = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ac79216d8035cea04a32070488711c828">getInterfaceType</a>();</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keyword">const</span> ElementInfo &amp;interfaceTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(interfaceType);</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> nInterfaceVertices = interfaceTypeInfo.nVertices;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    std::array&lt;int, 3&gt; interfaceCount1D = getInterfaceCountDirection(direction);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="comment">// Counters</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;    std::array&lt;int, 3&gt; counters = {{0, 0, 0}};</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordtype">int</span> &amp;i = counters[Vertex::COORD_X];</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordtype">int</span> &amp;j = counters[Vertex::COORD_Y];</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <span class="keywordtype">int</span> &amp;k = counters[Vertex::COORD_Z];</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="comment">// Creation of the interfaces</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;    <span class="keywordflow">for</span> (k = 0; (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) ? (k &lt; interfaceCount1D[Vertex::COORD_Z]) : (k &lt;= 0); k++) {</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keywordflow">for</span> (j = 0; j &lt; interfaceCount1D[Vertex::COORD_Y]; j++) {</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordflow">for</span> (i = 0; i &lt; interfaceCount1D[Vertex::COORD_X]; i++) {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                InterfaceIterator interfaceIterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">VolumeKernel::addInterface</a>(interfaceType);</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                Interface &amp;<span class="keyword">interface </span>= *interfaceIterator;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                <span class="comment">// Owner id</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                std::array&lt;int, 3&gt; ownerIJK;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; 3; n++) {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                    ownerIJK[n] = counters[n];</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                }</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                <span class="keywordflow">if</span> (counters[direction] == (interfaceCount1D[direction] - 1)) {</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    ownerIJK[direction] -= 1;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                }</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                <span class="keywordtype">long</span> ownerId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(ownerIJK);</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                <span class="comment">// Neighbour id</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                <span class="keywordtype">long</span> neighId;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keywordflow">if</span> (counters[direction] != 0 &amp;&amp; counters[direction] != interfaceCount1D[direction] - 1) {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                    std::array&lt;int, 3&gt; neighIJK;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; 3; n++) {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                        neighIJK[n] = counters[n];</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                    }</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    neighIJK[direction] -= 1;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    neighId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(neighIJK);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                    neighId = Element::NULL_ID;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                <span class="comment">// Owner data</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                Cell &amp;owner = m_cells[ownerId];</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordtype">int</span> ownerFace = 2 * direction;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                <span class="keywordflow">if</span> (counters[direction] == 0) {</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    ownerFace++;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                }</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                interface.setOwner(owner.getId(), ownerFace);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                owner.setInterface(ownerFace, 0, interface.getId());</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                owner.setAdjacency(ownerFace, 0, neighId);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="comment">// Neighbour data</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                <span class="keywordflow">if</span> (counters[direction] != 0 &amp;&amp; counters[direction] != interfaceCount1D[direction] - 1) {</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                    Cell &amp;neigh = m_cells[neighId];</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    <span class="keywordtype">int</span> neighFace = 2 * direction + 1;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                    interface.setNeigh(neigh.getId(), neighFace);</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                    neigh.setInterface(neighFace, 0, interface.getId());</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                    neigh.setAdjacency(neighFace, 0, ownerId);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                    interface.unsetNeigh();</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                }</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;                <span class="comment">// Connectivity</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                std::unique_ptr&lt;long[]&gt; connect = std::unique_ptr&lt;long[]&gt;(<span class="keyword">new</span> <span class="keywordtype">long</span>[nInterfaceVertices]);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                <span class="keywordflow">if</span> (direction == Vertex::COORD_X) {</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                    connect[0] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i, j,     k);</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                    connect[1] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i, j + 1, k);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                        connect[2] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i, j + 1, k + 1);</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                        connect[3] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i, j,     k + 1);</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                    }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (direction == Vertex::COORD_Y) {</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                    connect[0] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j,     k);</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                    connect[1] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j,     k);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                        connect[2] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j, k + 1);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                        connect[3] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j, k + 1);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                    }</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (direction == Vertex::COORD_Z) {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                    connect[0] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j,     k);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                    connect[1] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j,     k);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                        connect[2] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i + 1, j + 1, k);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                        connect[3] = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i,     j + 1, k);</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                    }</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                }</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                interface.setConnect(std::move(connect));</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            }</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;        }</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    }</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;</div>
<div class="line"><a name="l00740"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a818cac19b031e99a05a85b43dd9bcb74">  740</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a818cac19b031e99a05a85b43dd9bcb74">VolCartesian::_markCellForRefinement</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;{</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;}</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;</div>
<div class="line"><a name="l00755"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a891f3eefe72442a77f0b76cbee74bfbf">  755</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a891f3eefe72442a77f0b76cbee74bfbf">VolCartesian::_markCellForCoarsening</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;{</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;}</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00771"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a8c66efc0d250d2fa92130a719d3f3568">  771</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8c66efc0d250d2fa92130a719d3f3568">VolCartesian::_enableCellBalancing</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enabled)</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;{</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    BITPIT_UNUSED(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    BITPIT_UNUSED(enabled);</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;}</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;</div>
<div class="line"><a name="l00786"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a7124edd6bac9acc1d23f069fdee2be56">  786</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">VolCartesian::isPointInside</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;{</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    std::array&lt;int, 3&gt; cellIjk = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> EPS = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>();</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = 0; d &lt; 3; ++d){</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keywordtype">long</span> index = cellIjk[d];</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        <span class="keywordtype">double</span> spacing = m_cellSpacings[d];</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="keywordtype">double</span> cellMin = m_cellCenters[d][index] - 0.5 * spacing;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="keywordtype">double</span> cellMax = m_cellCenters[d][index] + 0.5 * spacing;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="keywordflow">if</span> (point[d]&lt; cellMin - EPS || point[d] &gt; cellMax + EPS) {</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        }</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;}</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div>
<div class="line"><a name="l00812"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">  812</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">VolCartesian::isPointInside</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;{</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> EPS = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>();</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); n++) {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        <span class="keywordflow">if</span> (point[n] &lt; m_minCoords[n] - EPS || point[n] &gt; m_maxCoords[n] + EPS) {</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        }</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    }</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;}</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;</div>
<div class="line"><a name="l00836"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a7e678bf1f4f1990dc0438eaa31796eab">  836</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a7e678bf1f4f1990dc0438eaa31796eab">VolCartesian::locatePoint</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;{</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    std::array&lt;int, 3&gt; pointIjk = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(point);</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">isCellCartesianIdValid</a>(pointIjk)) {</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(pointIjk);</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        <span class="keywordflow">return</span> Element::NULL_ID;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;}</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div>
<div class="line"><a name="l00856"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">  856</a></span>&#160;std::array&lt;int, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">VolCartesian::locatePointCartesian</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;{</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    std::array&lt;int, 3&gt; ijk;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">isPointInside</a>(point)) {</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        ijk[0] = -1;</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        ijk[1] = -1;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        ijk[2] = -1;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    }</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    ijk[0] = std::floor((point[Vertex::COORD_X] - m_minCoords[Vertex::COORD_X]) / m_cellSpacings[Vertex::COORD_X]);</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;    ijk[1] = std::floor((point[Vertex::COORD_Y] - m_minCoords[Vertex::COORD_Y]) / m_cellSpacings[Vertex::COORD_Y]);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        ijk[2] = std::floor((point[Vertex::COORD_Z] - m_minCoords[Vertex::COORD_Z]) / m_cellSpacings[Vertex::COORD_Z]);</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        ijk[2] = -1;</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    }</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;    <span class="keywordflow">return</span> ijk;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;}</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div>
<div class="line"><a name="l00882"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ad98c0867bdaf0be9b3bb5e9150859d93">  882</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ad98c0867bdaf0be9b3bb5e9150859d93">VolCartesian::locateClosestVertex</a>(std::array&lt;double,3&gt; <span class="keyword">const</span> &amp;point)<span class="keyword"> const</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a3a6238bd9e36a7173fdeeba8718879f4">locateClosestVertexCartesian</a>(point));</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;}</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div>
<div class="line"><a name="l00894"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a3a6238bd9e36a7173fdeeba8718879f4">  894</a></span>&#160;std::array&lt;int, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a3a6238bd9e36a7173fdeeba8718879f4">VolCartesian::locateClosestVertexCartesian</a>(std::array&lt;double,3&gt; <span class="keyword">const</span> &amp;point)<span class="keyword"> const</span></div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    std::array&lt;int, 3&gt; ijk;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++n) {</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        ijk[n] = <a class="code" href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">std::min</a>(m_nVertices1D[n] - 1, <a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::max</a>(0, (<span class="keywordtype">int</span>) round((point[n] - m_minCoords[n]) / m_cellSpacings[n])));</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    }</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        ijk[Vertex::COORD_Z] = -1;</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    }</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keywordflow">return</span> ijk;</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;}</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;</div>
<div class="line"><a name="l00911"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">  911</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">VolCartesian::getCellLinearId</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;k)<span class="keyword"> const</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    <span class="keywordtype">long</span> <span class="keywordtype">id</span> = i;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keywordtype">id</span> += m_nCells1D[Vertex::COORD_X] * j;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() == 3) {</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        <span class="keywordtype">id</span> += m_nCells1D[Vertex::COORD_Y] * m_nCells1D[Vertex::COORD_X] * k;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    }</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;    <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;}</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div>
<div class="line"><a name="l00925"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a55275e6d73e5855142c7e0da3d7c5f95">  925</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">VolCartesian::getCellLinearId</a>(<span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;ijk)<span class="keyword"> const</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(ijk[Vertex::COORD_X], ijk[Vertex::COORD_Y], ijk[Vertex::COORD_Z]);</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;}</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div>
<div class="line"><a name="l00938"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">  938</a></span>&#160;std::array&lt;int, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">VolCartesian::getCellCartesianId</a>(<span class="keywordtype">long</span> <span class="keyword">const</span> &amp;idx)<span class="keyword"> const</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    <span class="keywordtype">int</span> ijPlane = m_nCells1D[0] * m_nCells1D[1];</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    std::array&lt;int, 3&gt; id;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="keywordtype">id</span>[0] = idx % m_nCells1D[0];</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        <span class="keywordtype">id</span>[2] = idx / ijPlane;</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <span class="keywordtype">id</span>[1] = (idx - <span class="keywordtype">id</span>[2] * ijPlane) / m_nCells1D[0];</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        <span class="keywordtype">id</span>[2] = -1;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;        <span class="keywordtype">id</span>[1] = idx / m_nCells1D[0];</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    }</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;}</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div>
<div class="line"><a name="l00961"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">  961</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">VolCartesian::isCellCartesianIdValid</a>(<span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;ijk)<span class="keyword"> const</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++k) {</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        <span class="keywordflow">if</span> (ijk[k] &lt; 0 || ijk[k] &gt;= m_nCells1D[k]) {</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        }</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    }</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;}</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div>
<div class="line"><a name="l00975"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">  975</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">VolCartesian::getVertexLinearId</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;i, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;j, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;k)<span class="keyword"> const</span></div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    <span class="keywordtype">long</span> <span class="keywordtype">id</span> = i;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    <span class="keywordtype">id</span> += m_nVertices1D[Vertex::COORD_X] * j;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() == 3) {</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        <span class="keywordtype">id</span> += m_nVertices1D[Vertex::COORD_Y] * m_nVertices1D[Vertex::COORD_X] * k;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;    }</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;}</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div>
<div class="line"><a name="l00989"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a6c2e7e893b42fb35702bed2cf0679c20">  989</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">VolCartesian::getVertexLinearId</a>(<span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;ijk)<span class="keyword"> const</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(ijk[Vertex::COORD_X], ijk[Vertex::COORD_Y], ijk[Vertex::COORD_Z]);</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;}</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;</div>
<div class="line"><a name="l01002"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f"> 1002</a></span>&#160;std::array&lt;int, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">VolCartesian::getVertexCartesianId</a>(<span class="keywordtype">long</span> <span class="keyword">const</span> &amp;idx)<span class="keyword"> const</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    <span class="keywordtype">int</span> ijPlane = m_nVertices1D[0] * m_nVertices1D[1];</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;    std::array&lt;int, 3&gt; id;</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    <span class="keywordtype">id</span>[0] = idx % m_nVertices1D[0];</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <span class="keywordtype">id</span>[2] = idx / ijPlane;</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="keywordtype">id</span>[1] = (idx - <span class="keywordtype">id</span>[2] * ijPlane) / m_nVertices1D[0];</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        <span class="keywordtype">id</span>[2] = -1;</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        <span class="keywordtype">id</span>[1] = idx / m_nVertices1D[0];</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    }</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;}</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;</div>
<div class="line"><a name="l01028"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a8c5766b1f630eb4bae44051628032643"> 1028</a></span>&#160;std::array&lt;int, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">VolCartesian::getVertexCartesianId</a>(<span class="keywordtype">long</span> <span class="keyword">const</span> &amp;cellIdx, <span class="keywordtype">int</span> <span class="keyword">const</span> &amp;vertex)<span class="keyword"> const</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">getVertexCartesianId</a>(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(cellIdx), vertex);</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;}</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;</div>
<div class="line"><a name="l01042"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a02f788d29cc1cff627ed6a53113b46ef"> 1042</a></span>&#160;std::array&lt;int, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">VolCartesian::getVertexCartesianId</a>(<span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;cellIjk, <span class="keywordtype">int</span> <span class="keyword">const</span> &amp;vertex)<span class="keyword"> const</span></div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    std::bitset&lt;3&gt; vertexBitset(vertex);</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    std::array&lt;int, 3&gt; vertexIjk(cellIjk);</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 3; ++k) {</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;        vertexIjk[k] += vertexBitset[k];</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    }</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="keywordflow">return</span> vertexIjk;</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;}</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;</div>
<div class="line"><a name="l01059"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a982e8ed965c968a46d08c7fc2e29f76e"> 1059</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a982e8ed965c968a46d08c7fc2e29f76e">VolCartesian::isVertexCartesianIdValid</a>(<span class="keyword">const</span> std::array&lt;int, 3&gt; &amp;ijk)<span class="keyword"> const</span></div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++k) {</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        <span class="keywordflow">if</span> (ijk[k] &lt; 0 || ijk[k] &gt;= m_nVertices1D[k]) {</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        }</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    }</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;}</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;</div>
<div class="line"><a name="l01078"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#aa37d3e998c0b648c861a8d23e2c19cdd"> 1078</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aa37d3e998c0b648c861a8d23e2c19cdd">VolCartesian::_findCellFaceNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;face, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    <span class="keywordtype">int</span> neighSide      = face % 2;</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keywordtype">int</span> neighDirection = std::floor(face / 2);</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;    std::array&lt;int, 3&gt; neighIjk(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(<span class="keywordtype">id</span>));</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="keywordflow">if</span> (neighSide == 0) {</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;        neighIjk[neighDirection]--;</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;        neighIjk[neighDirection]++;</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    }</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">isCellCartesianIdValid</a>(neighIjk)) {</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;        <span class="keywordtype">long</span> neighId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(neighIjk);</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;        <span class="keywordflow">if</span> (std::find(blackList.begin(), blackList.end(), neighId) == blackList.end()) {</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;            neighs.push_back(neighId);</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        }</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    }</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;}</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div>
<div class="line"><a name="l01111"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a23304f57bc1d93ba5f1d97f7f0deefc1"> 1111</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a23304f57bc1d93ba5f1d97f7f0deefc1">VolCartesian::_findCellEdgeNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;edge, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;    assert(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>());</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;    }</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;    <span class="comment">// Diagonal neighbour</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;    std::array&lt;int, 3&gt; diagNeighIjk(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(<span class="keywordtype">id</span>) + m_edgeNeighDeltas[edge]);</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">isCellCartesianIdValid</a>(diagNeighIjk)) {</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        <span class="keywordtype">long</span> diagNeighId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(diagNeighIjk);</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;        <span class="keywordflow">if</span> (std::find(blackList.begin(), blackList.end(), diagNeighId) == blackList.end()) {</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;            utils::addToOrderedVector&lt;long&gt;(diagNeighId, neighs);</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        }</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    }</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;    <span class="comment">// Faces incident to the edge</span></div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;face : m_edgeFaces[edge]) {</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        std::vector&lt;long&gt; faceNeighIds = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#aa37d3e998c0b648c861a8d23e2c19cdd">_findCellFaceNeighs</a>(<span class="keywordtype">id</span>, face, blackList);</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;faceNeighId : faceNeighIds) {</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            utils::addToOrderedVector&lt;long&gt;(faceNeighId, neighs);</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;        }</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;    }</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;}</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;</div>
<div class="line"><a name="l01148"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a4dff65665378ce01e7eb55fc214455c6"> 1148</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a4dff65665378ce01e7eb55fc214455c6">VolCartesian::_findCellVertexNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;vertex, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;    std::array&lt;int, 3&gt; cellIjk   = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;    std::array&lt;int, 3&gt; vertexIjk = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">getVertexCartesianId</a>(cellIjk, vertex);</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;delta : m_vertexNeighDeltas) {</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;        <span class="comment">// Get the Cartesian index</span></div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        std::array&lt;int, 3&gt; neighIjk(vertexIjk + delta);</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        <span class="keywordflow">if</span> (neighIjk == cellIjk) {</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">isCellCartesianIdValid</a>(neighIjk)) {</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        }</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        <span class="comment">// Get the linear neighbour index and, if it&#39;s not on the blacklist,</span></div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        <span class="comment">// add it to the list of neighbours</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;        <span class="keywordtype">long</span> neighId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(neighIjk);</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        <span class="keywordflow">if</span> (std::find(blackList.begin(), blackList.end(), neighId) == blackList.end()) {</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neighId, neighs);</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;        }</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;    }</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;}</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;</div>
<div class="line"><a name="l01181"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36"> 1181</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36">VolCartesian::extractCellSubSet</a>(std::array&lt;int, 3&gt; <span class="keyword">const</span> &amp;ijkMin, std::array&lt;int, 3&gt; <span class="keyword">const</span> &amp;ijkMax)</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;{</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keywordtype">int</span> nSubsetCells_x = ijkMax[0] - ijkMin[0] + 1;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    <span class="keywordtype">int</span> nSubsetCells_y = ijkMax[1] - ijkMin[1] + 1;</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    <span class="keywordtype">int</span> nSubsetCells_z = ijkMax[2] - ijkMin[2] + 1;</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    std::vector&lt;long&gt; ids;</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;    ids.resize(nSubsetCells_x * nSubsetCells_y * nSubsetCells_z);</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    std::vector&lt;long&gt;::iterator it = ids.begin();</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = ijkMin[2]; k &lt;= ijkMax[2]; ++k) {</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = ijkMin[1]; j &lt;= ijkMax[1]; ++j) {</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = ijkMin[0]; i &lt;= ijkMax[0]; ++i) {</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;                *it = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(i, j, k);</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                ++it;</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;            }</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        }</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    }</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="keywordflow">return</span> ids;</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;}</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;</div>
<div class="line"><a name="l01210"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#adb41ab3b23569f97e1f447758e25a54b"> 1210</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36">VolCartesian::extractCellSubSet</a>(<span class="keywordtype">int</span> <span class="keyword">const</span> &amp;idxMin, <span class="keywordtype">int</span> <span class="keyword">const</span> &amp;idxMax)</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;{</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36">extractCellSubSet</a>(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(idxMin), <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(idxMax));</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;}</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;</div>
<div class="line"><a name="l01222"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a47d434dafc8c7172e15acc85af33653a"> 1222</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36">VolCartesian::extractCellSubSet</a>(std::array&lt;double, 3&gt; <span class="keyword">const</span> &amp;pointMin, std::array&lt;double, 3&gt; <span class="keyword">const</span> &amp;pointMax)</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;{</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36">extractCellSubSet</a>(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(pointMin), <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(pointMax));</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;}</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;</div>
<div class="line"><a name="l01234"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4"> 1234</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4">VolCartesian::extractVertexSubSet</a>(std::array&lt;int, 3&gt; <span class="keyword">const</span> &amp;ijkMin, std::array&lt;int, 3&gt; <span class="keyword">const</span> &amp;ijkMax)</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;{</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;    <span class="keywordtype">int</span> nSubsetVertices_x = ijkMax[0] - ijkMin[0] + 1;</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;    <span class="keywordtype">int</span> nSubsetVertices_y = ijkMax[1] - ijkMin[1] + 1;</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;    <span class="keywordtype">int</span> nSubsetVertices_z = ijkMax[2] - ijkMin[2] + 1;</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;    std::vector&lt;long&gt; ids;</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;    ids.resize(nSubsetVertices_x * nSubsetVertices_y * nSubsetVertices_z);</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    std::vector&lt;long&gt;::iterator it = ids.begin();</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = ijkMin[2]; k &lt;= ijkMax[2]; ++k) {</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = ijkMin[1]; j &lt;= ijkMax[1]; ++j) {</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = ijkMin[0]; i &lt;= ijkMax[0]; ++i) {</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;                *it = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i, j, k);</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                ++it;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;            }</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        }</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    }</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <span class="keywordflow">return</span> ids;</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;}</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;</div>
<div class="line"><a name="l01263"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a461e5e22cded41c82797a6a96db2ccc6"> 1263</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4">VolCartesian::extractVertexSubSet</a>(<span class="keywordtype">int</span> <span class="keyword">const</span> &amp;idxMin, <span class="keywordtype">int</span> <span class="keyword">const</span> &amp;idxMax)</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;{</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4">extractVertexSubSet</a>(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">getVertexCartesianId</a>(idxMin), <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">getVertexCartesianId</a>(idxMax));</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;}</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;</div>
<div class="line"><a name="l01275"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ab31fc78f27cc83725a22aa8882545259"> 1275</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4">VolCartesian::extractVertexSubSet</a>(std::array&lt;double, 3&gt; <span class="keyword">const</span> &amp;pointMin, std::array&lt;double, 3&gt; <span class="keyword">const</span> &amp;pointMax)</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;{</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4">extractVertexSubSet</a>(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(pointMin), <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(pointMax));</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;}</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;</div>
<div class="line"><a name="l01285"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ad24dc2f311148a2d1d8517309fdce280"> 1285</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ad24dc2f311148a2d1d8517309fdce280">VolCartesian::translate</a>(std::array&lt;double, 3&gt; translation)</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;{</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 1; n &lt; 3; ++n) {</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;        m_minCoords[n] += translation[n];</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;        m_maxCoords[n] += translation[n];</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; m_nVertices1D[n]; ++i) {</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;            m_vertexCoords[n][i] += translation[n];</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;            m_cellCenters[n][i]  += translation[n];</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        }</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;    }</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a">setBoundingBox</a>(m_minCoords, m_maxCoords);</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">VolumeKernel::translate</a>(translation);</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;}</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;</div>
<div class="line"><a name="l01308"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a543b2bebda50b86e4283dc045ef5f61d"> 1308</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a543b2bebda50b86e4283dc045ef5f61d">VolCartesian::scale</a>(std::array&lt;double, 3&gt; scaling)</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;{</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 1; n &lt; 3; ++n) {</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;        m_maxCoords[n] = m_minCoords[n] + scaling[n] * (m_maxCoords[n] - m_minCoords[n]);</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; m_nVertices1D[n]; ++i) {</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;            m_vertexCoords[n][i] = m_minCoords[n] + scaling[n] * (m_vertexCoords[n][i] - m_minCoords[n]);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;            m_cellCenters[n][i]  = m_minCoords[n] + scaling[n] * (m_cellCenters[n][i] - m_minCoords[n]);</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;        }</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;        m_cellSpacings[n] *= scaling[n];</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;    }</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    initializeInterfaceArea();</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;    initializeCellVolume();</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a">setBoundingBox</a>(m_minCoords, m_maxCoords);</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">VolumeKernel::scale</a>(scaling);</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;}</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div>
<div class="line"><a name="l01336"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#ade05cfb7af26dd9756ed06842d7bdecc"> 1336</a></span>&#160;std::vector&lt;double&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#ade05cfb7af26dd9756ed06842d7bdecc">VolCartesian::convertToVertexData</a>(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;cellData)<span class="keyword"> const</span></div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;    <span class="keywordtype">int</span> dimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;    std::vector&lt;int&gt; nodeCounter(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a90c2ef2f933d752d63431f84c0c0c6f8">getVertexCount</a>());</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;    std::vector&lt;double&gt; vertexData(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a90c2ef2f933d752d63431f84c0c0c6f8">getVertexCount</a>());</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;    std::fill (vertexData.begin(), vertexData.end(), 0.);</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; m_nCells1D[Vertex::COORD_Z]; ++k) {</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; m_nCells1D[Vertex::COORD_Y]; ++j) {</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_nCells1D[Vertex::COORD_X]; ++i) {</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;                <span class="comment">// Cell index</span></div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;                <span class="keywordtype">long</span> cellId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(i, j, k);</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; dimension - 1; ++n) {</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> m = 0; m &lt; 2; ++m) {</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> l = 0; l &lt; 2; ++l) {</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;                            <span class="comment">// Vertex index</span></div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                            <span class="keywordtype">int</span> i_v = i + l;</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;                            <span class="keywordtype">int</span> j_v = j + m;</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                            <span class="keywordtype">int</span> k_v = j + n;</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                            <span class="keywordtype">long</span> vertexId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i_v, j_v, k_v);</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                            vertexData[vertexId] += cellData[cellId];</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;                            nodeCounter[vertexId]++;</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;                        }</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                    }</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;                }</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;            }</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;        }</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    }</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;    <span class="comment">// Average values</span></div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a90c2ef2f933d752d63431f84c0c0c6f8">getVertexCount</a>(); ++i) {</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;        vertexData[i] /= nodeCounter[i];</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    }</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    <span class="keywordflow">return</span> vertexData;</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;}</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;</div>
<div class="line"><a name="l01383"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a90f99ba8c3e029f20bf729f6239574db"> 1383</a></span>&#160;std::vector&lt;double&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a90f99ba8c3e029f20bf729f6239574db">VolCartesian::convertToCellData</a>(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;vertexData)<span class="keyword"> const</span></div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <span class="keywordtype">int</span> dimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;    std::vector&lt;double&gt; cellData(<a class="code" href="classbitpit_1_1VolCartesian.xhtml#a510828dab281674373600a930b5750c9">getCellCount</a>());</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    std::fill (cellData.begin(), cellData.end(), 0.);</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; m_nCells1D[Vertex::COORD_Z]; ++k) {</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; m_nCells1D[Vertex::COORD_Y]; ++j) {</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; m_nCells1D[Vertex::COORD_X]; ++i) {</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;                    <span class="comment">// Cell index</span></div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;                <span class="keywordtype">long</span> cellId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(i, j, k);</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; dimension - 1; ++n) {</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> m = 0; m &lt; 2; ++m) {</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> l = 0; l &lt; 2; ++l) {</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                            <span class="comment">// Vertex index</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                            <span class="keywordtype">int</span> i_v = i + l;</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                            <span class="keywordtype">int</span> j_v = j + m;</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                            <span class="keywordtype">int</span> k_v = j + n;</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                            <span class="keywordtype">long</span> vertexId = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(i_v, j_v, k_v);</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;                            cellData[cellId] += vertexData[vertexId];</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                        }</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                    }</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;                }</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;            }</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;        }</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    }</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <span class="keywordtype">double</span> weight = <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(0.5, dimension);</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a510828dab281674373600a930b5750c9">getCellCount</a>(); ++i) {</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;        cellData[i] *= weight;</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;    }</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <span class="keywordflow">return</span> cellData;</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;}</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div>
<div class="line"><a name="l01435"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a8c47493e9daae3e08f42b1d3a7ac52fe"> 1435</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8c47493e9daae3e08f42b1d3a7ac52fe">VolCartesian::linearCellInterpolation</a>(std::array&lt;double,3&gt; &amp;point,</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;                                            std::vector&lt;int&gt; &amp;stencil,</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;                                            std::vector&lt;double&gt; &amp;weights)</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;{</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    std::array&lt;int, 3&gt; ijk_point = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(point);</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;    <span class="keywordflow">if</span> (ijk_point[0] &lt; 0) {</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        stencil.clear();</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;        weights.clear();</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    }</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    <span class="keywordtype">int</span> dimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;    std::array&lt;int, 3&gt; ijk_next;</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    std::array&lt;int, 3&gt; nS = {{1,1,1}};</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    std::array&lt; std::array&lt;int,2&gt;, 3&gt; cStencil;</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    std::array&lt; std::array&lt;double,2&gt;, 3&gt; cWeights;</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = 0; d &lt; dimension; ++d) {</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <span class="comment">// Find cell index</span></div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;        <span class="keywordflow">if</span> (point[d] &lt; m_cellCenters[d][ijk_point[d]]) {</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;            ijk_point[d] = ijk_point[d] - 1;</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;        }</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        ijk_next[d] = ijk_point[d] + 1;</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        <span class="keywordflow">if</span> (ijk_point[d] &lt; 0) {</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;            cStencil[d][0] = 0.;</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;            cWeights[d][0] = 1.;</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ijk_next[d] &gt; m_nCells1D[d] - 1) {</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;            cStencil[d][0] = m_nCells1D[d] - 1;</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;            cWeights[d][0] = 1.;</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;            nS[d] = 2;</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;            cStencil[d][0] = ijk_point[d];</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;            cStencil[d][1] = ijk_next[d];</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;            cWeights[d][1] = (point[d] - m_cellCenters[d][ijk_point[d]]) / m_cellSpacings[d]  ;</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;            cWeights[d][0] = 1.0 - cWeights[d][1];</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        }</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    }</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = dimension; d &lt; 3; ++d) {</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        cStencil[d][0] = 0.;</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;        cWeights[d][0] = 1.;</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;    }</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;    <span class="keywordtype">int</span> stencilSize = nS[0] * nS[1] * nS[2];</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;    stencil.resize(stencilSize);</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    weights.resize(stencilSize);</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    std::vector&lt;int&gt;::iterator itrStencil = stencil.begin();</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;    std::vector&lt;double&gt;::iterator itrWeights = weights.begin();</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nS[2]; ++k) {</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; nS[1]; ++j) {</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nS[0]; ++i) {</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;                <span class="keywordtype">int</span> &amp;is = cStencil[0][i];</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;                <span class="keywordtype">int</span> &amp;js = cStencil[1][j];</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;                <span class="keywordtype">int</span> &amp;ks = cStencil[2][k];</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;                <span class="keywordtype">double</span> &amp;iw = cWeights[0][i];</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;                <span class="keywordtype">double</span> &amp;jw = cWeights[1][j];</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;                <span class="keywordtype">double</span> &amp;kw = cWeights[2][k];</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;                *itrStencil = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">getCellLinearId</a>(is, js, ks);</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;                *itrWeights = iw *jw * kw;</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;                ++itrStencil;</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;                ++itrWeights;</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;            }</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;        }</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    }</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    <span class="keywordflow">return</span> stencilSize;</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;}</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;</div>
<div class="line"><a name="l01524"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#a45f1a9f7e5ef570e58a53a1c3a5da2ab"> 1524</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a45f1a9f7e5ef570e58a53a1c3a5da2ab">VolCartesian::linearVertexInterpolation</a>(std::array&lt;double,3&gt; &amp;point,</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;                                              std::vector&lt;int&gt; &amp;stencil,</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;                                              std::vector&lt;double&gt; &amp;weights)</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;{</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    std::array&lt;int, 3&gt; ijk_point = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">locatePointCartesian</a>(point);</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keywordflow">if</span> (ijk_point[0] &lt; 0) {</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        stencil.clear();</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;        weights.clear();</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    }</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordtype">int</span> dimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    std::array&lt;int, 3&gt; ijk_next;</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    std::array&lt; std::array&lt;int,2&gt;, 3&gt; cStencil;</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    std::array&lt; std::array&lt;double,2&gt;, 3&gt; cWeights;</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = 0; d &lt; dimension; ++d) {</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;        ijk_next[d] = ijk_point[d] +1;</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;        cStencil[d][0] = ijk_point[d];</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;        cStencil[d][1] = ijk_next[d];</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;        cWeights[d][1] = (point[d] - m_vertexCoords[d][ijk_point[d]]) / m_cellSpacings[d];</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;        cWeights[d][0] = 1.0 - cWeights[d][1];</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;    }</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = 0; d &lt; dimension; ++d) {</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;        cStencil[d][0] = 0;</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;        cWeights[d][0] = 1.;</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    }</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    <span class="keywordtype">int</span> stencilSize = <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(2, dimension);</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;    stencil.resize(stencilSize);</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    weights.resize(stencilSize);</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;    std::vector&lt;int&gt;::iterator itrStencil    = stencil.begin();</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    std::vector&lt;double&gt;::iterator itrWeights = weights.begin();</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; dimension - 1; ++k) {</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 2; ++j) {</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 2; ++i) {</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;                <span class="keywordtype">int</span> &amp;is = cStencil[0][i];</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;                <span class="keywordtype">int</span> &amp;js = cStencil[1][j];</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;                <span class="keywordtype">int</span> &amp;ks = cStencil[2][k];</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;                <span class="keywordtype">double</span> &amp;iw = cWeights[0][i];</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;                <span class="keywordtype">double</span> &amp;jw = cWeights[1][j];</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;                <span class="keywordtype">double</span> &amp;kw = cWeights[2][k];</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;                *itrStencil = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">getVertexLinearId</a>(is, js, ks);</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;                *itrWeights = iw * jw * kw;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;                ++itrStencil;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;                ++itrWeights;</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;            }</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;        }</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    }</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    <span class="keywordflow">return</span> stencilSize;</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;}</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;</div>
<div class="line"><a name="l01590"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolCartesian.xhtml#abff36312aeafa29c5dac1316e7490060"> 1590</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolCartesian.xhtml#abff36312aeafa29c5dac1316e7490060">VolCartesian::evalCellCentroid</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;{</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    std::array&lt;int, 3&gt; ijk = <a class="code" href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">getCellCartesianId</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;    std::array&lt;double, 3&gt; centroid = {{0, 0, 0}};</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>(); ++n) {</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;        centroid[n] = m_cellCenters[n][ijk[n]];</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;    }</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;    <span class="keywordflow">return</span> centroid;</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;}</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a618377c0340d7e68a0ab2572275a5242"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">bitpit::PatchKernel::addCell</a></div><div class="ttdeci">CellIterator addCell(ElementInfo::Type type, const long &amp;id=Element::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01279">patch_kernel.cpp:1279</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a778768bc1cea5e66f99b9bd8414f8583"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">bitpit::PatchKernel::translate</a></div><div class="ttdeci">virtual void translate(std::array&lt; double, 3 &gt; translation)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03309">patch_kernel.cpp:3309</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a7c5d9ff189006b5d1817ee495586758c"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a7c5d9ff189006b5d1817ee495586758c">bitpit::VolCartesian::getSpacing</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; getSpacing() const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00450">volcartesian.cpp:450</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a3a1edd7b839b26f6be70985d9f0931"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">bitpit::PatchKernel::addVertex</a></div><div class="ttdeci">VertexIterator addVertex(const std::array&lt; double, 3 &gt; &amp;coords, const long &amp;id=Vertex::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00685">patch_kernel.cpp:685</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae28ec9687875e8032b8f2696fd6b8bf9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">bitpit::PatchKernel::getDimension</a></div><div class="ttdeci">int getDimension() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00551">patch_kernel.cpp:551</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_ad98c0867bdaf0be9b3bb5e9150859d93"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#ad98c0867bdaf0be9b3bb5e9150859d93">bitpit::VolCartesian::locateClosestVertex</a></div><div class="ttdeci">long locateClosestVertex(std::array&lt; double, 3 &gt; const &amp;point) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00882">volcartesian.cpp:882</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a9796bd55d5bdd3a6bf9b7f4565307dd3"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a9796bd55d5bdd3a6bf9b7f4565307dd3">bitpit::VolCartesian::locatePointCartesian</a></div><div class="ttdeci">std::array&lt; int, 3 &gt; locatePointCartesian(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00856">volcartesian.cpp:856</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ad1e63f17f26ffb931517a252a23047a1"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">bitpit::PatchKernel::getTol</a></div><div class="ttdeci">double getTol() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03410">patch_kernel.cpp:3410</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a818cac19b031e99a05a85b43dd9bcb74"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a818cac19b031e99a05a85b43dd9bcb74">bitpit::VolCartesian::_markCellForRefinement</a></div><div class="ttdeci">bool _markCellForRefinement(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00740">volcartesian.cpp:740</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a3a6238bd9e36a7173fdeeba8718879f4"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a3a6238bd9e36a7173fdeeba8718879f4">bitpit::VolCartesian::locateClosestVertexCartesian</a></div><div class="ttdeci">std::array&lt; int, 3 &gt; locateClosestVertexCartesian(std::array&lt; double, 3 &gt; const &amp;point) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00894">volcartesian.cpp:894</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a91901f461650eb633e76dd9a50a0883f"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a91901f461650eb633e76dd9a50a0883f">bitpit::VolCartesian::getVertexCartesianId</a></div><div class="ttdeci">std::array&lt; int, 3 &gt; getVertexCartesianId(long const &amp;idx) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01002">volcartesian.cpp:1002</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a8c47493e9daae3e08f42b1d3a7ac52fe"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a8c47493e9daae3e08f42b1d3a7ac52fe">bitpit::VolCartesian::linearCellInterpolation</a></div><div class="ttdeci">int linearCellInterpolation(std::array&lt; double, 3 &gt; &amp;point, std::vector&lt; int &gt; &amp;stencil, std::vector&lt; double &gt; &amp;weights)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01435">volcartesian.cpp:1435</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_abff36312aeafa29c5dac1316e7490060"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#abff36312aeafa29c5dac1316e7490060">bitpit::VolCartesian::evalCellCentroid</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; evalCellCentroid(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01590">volcartesian.cpp:1590</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a48dbc36511022436397f590ae92f6e36"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a48dbc36511022436397f590ae92f6e36">bitpit::VolCartesian::extractCellSubSet</a></div><div class="ttdeci">std::vector&lt; long &gt; extractCellSubSet(std::array&lt; int, 3 &gt; const &amp;ijkMin, std::array&lt; int, 3 &gt; const &amp;ijkMax)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01181">volcartesian.cpp:1181</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_ad24dc2f311148a2d1d8517309fdce280"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#ad24dc2f311148a2d1d8517309fdce280">bitpit::VolCartesian::translate</a></div><div class="ttdeci">void translate(std::array&lt; double, 3 &gt; translation)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01285">volcartesian.cpp:1285</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml">bitpit::Interface</a></div><div class="ttdoc">The Interface class defines the interfaces among cells. </div><div class="ttdef"><b>Definition:</b> <a href="interface_8hpp_source.xhtml#l00037">interface.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a543b2bebda50b86e4283dc045ef5f61d"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a543b2bebda50b86e4283dc045ef5f61d">bitpit::VolCartesian::scale</a></div><div class="ttdeci">void scale(std::array&lt; double, 3 &gt; scaling)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01308">volcartesian.cpp:1308</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">bitpit::ElementInfo::LINE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00049">element.hpp:49</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a7e678bf1f4f1990dc0438eaa31796eab"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a7e678bf1f4f1990dc0438eaa31796eab">bitpit::VolCartesian::locatePoint</a></div><div class="ttdeci">long locatePoint(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00836">volcartesian.cpp:836</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_abc01f5fbd8e6079cebb601c5be386f3e"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#abc01f5fbd8e6079cebb601c5be386f3e">bitpit::VolCartesian::_updateAdaption</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; _updateAdaption(bool trackAdaption)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00473">volcartesian.cpp:473</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_ac79216d8035cea04a32070488711c828"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#ac79216d8035cea04a32070488711c828">bitpit::VolCartesian::getInterfaceType</a></div><div class="ttdeci">ElementInfo::Type getInterfaceType() const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00381">volcartesian.cpp:381</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga6da0697577be6fda9b574b2344c58014"><div class="ttname"><a href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a></div><div class="ttdeci">std::array&lt; T, d &gt; pow(std::array&lt; T, d &gt; &amp;x, double p)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00637">MathOperators_array.tpp:637</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a21f33ddf3dcd1824484348286b4cda63"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">bitpit::PatchKernel::setExpert</a></div><div class="ttdeci">void setExpert(bool expert)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00492">patch_kernel.cpp:492</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_aba522b94f433cb24065fc4ec325d68be"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#aba522b94f433cb24065fc4ec325d68be">bitpit::VolCartesian::isCellCartesianIdValid</a></div><div class="ttdeci">bool isCellCartesianIdValid(const std::array&lt; int, 3 &gt; &amp;ijk) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00961">volcartesian.cpp:961</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_aa37d3e998c0b648c861a8d23e2c19cdd"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#aa37d3e998c0b648c861a8d23e2c19cdd">bitpit::VolCartesian::_findCellFaceNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellFaceNeighs(const long &amp;id, const int &amp;face, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01078">volcartesian.cpp:1078</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a39757014e5155d78292ccd86f39596c8"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a39757014e5155d78292ccd86f39596c8">bitpit::VolCartesian::getVertexLinearId</a></div><div class="ttdeci">long getVertexLinearId(const int &amp;i, const int &amp;j, const int &amp;k) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00975">volcartesian.cpp:975</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a16c13a47aaca402772ba593d66543f31"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a16c13a47aaca402772ba593d66543f31">bitpit::VolCartesian::getInterfaceCount</a></div><div class="ttdeci">long getInterfaceCount() const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00358">volcartesian.cpp:358</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a982e8ed965c968a46d08c7fc2e29f76e"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a982e8ed965c968a46d08c7fc2e29f76e">bitpit::VolCartesian::isVertexCartesianIdValid</a></div><div class="ttdeci">bool isVertexCartesianIdValid(const std::array&lt; int, 3 &gt; &amp;ijk) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01059">volcartesian.cpp:1059</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a45f1a9f7e5ef570e58a53a1c3a5da2ab"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a45f1a9f7e5ef570e58a53a1c3a5da2ab">bitpit::VolCartesian::linearVertexInterpolation</a></div><div class="ttdeci">int linearVertexInterpolation(std::array&lt; double, 3 &gt; &amp;point, std::vector&lt; int &gt; &amp;stencil, std::vector&lt; double &gt; &amp;weights)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01524">volcartesian.cpp:1524</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a8c66efc0d250d2fa92130a719d3f3568"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a8c66efc0d250d2fa92130a719d3f3568">bitpit::VolCartesian::_enableCellBalancing</a></div><div class="ttdeci">bool _enableCellBalancing(const long &amp;id, bool enabled)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00771">volcartesian.cpp:771</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a317d53c60ef19408d789d7b2c08b3760"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">bitpit::ElementInfo::getElementInfo</a></div><div class="ttdeci">static const ElementInfo &amp; getElementInfo(ElementInfo::Type type)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00218">element.cpp:218</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a90c2ef2f933d752d63431f84c0c0c6f8"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a90c2ef2f933d752d63431f84c0c0c6f8">bitpit::VolCartesian::getVertexCount</a></div><div class="ttdeci">long getVertexCount() const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00311">volcartesian.cpp:311</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a2dc6ca101a1ca5a1cfe8c37bb2a8e9">bitpit::PatchKernel::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00280">patch_kernel.cpp:280</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a510828dab281674373600a930b5750c9"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a510828dab281674373600a930b5750c9">bitpit::VolCartesian::getCellCount</a></div><div class="ttdeci">long getCellCount() const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00321">volcartesian.cpp:321</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_ade05cfb7af26dd9756ed06842d7bdecc"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#ade05cfb7af26dd9756ed06842d7bdecc">bitpit::VolCartesian::convertToVertexData</a></div><div class="ttdeci">std::vector&lt; double &gt; convertToVertexData(const std::vector&lt; double &gt; &amp;cellData) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01336">volcartesian.cpp:1336</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8b4356bb02c54e12da168e7fa534be8f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">bitpit::PatchKernel::isThreeDimensional</a></div><div class="ttdeci">bool isThreeDimensional() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00562">patch_kernel.cpp:562</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_aeba11119684555c7a817d47e009e797d"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#aeba11119684555c7a817d47e009e797d">bitpit::VolCartesian::getCellType</a></div><div class="ttdeci">ElementInfo::Type getCellType() const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00344">volcartesian.cpp:344</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_ab119e1a1ca2b9e8ea242fc4c1cb18f07"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">bitpit::Interface::getOwnerFace</a></div><div class="ttdeci">int getOwnerFace() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00230">interface.cpp:230</a></div></div>
<div class="ttc" id="structbitpit_1_1adaption_1_1Info_xhtml"><div class="ttname"><a href="structbitpit_1_1adaption_1_1Info.xhtml">bitpit::adaption::Info</a></div><div class="ttdoc">The Info struct defines the information associated to an adaption. </div><div class="ttdef"><b>Definition:</b> <a href="adaption_8hpp_source.xhtml#l00055">adaption.hpp:55</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_abd201c857c686d6c8c67cb3ab1b3cb48"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#abd201c857c686d6c8c67cb3ab1b3cb48">bitpit::VolCartesian::getCellLinearId</a></div><div class="ttdeci">long getCellLinearId(const int &amp;i, const int &amp;j, const int &amp;k) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00911">volcartesian.cpp:911</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a8ba1e72fb83c7f65376d9986c7a89c18"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a8ba1e72fb83c7f65376d9986c7a89c18">bitpit::VolCartesian::getCellCartesianId</a></div><div class="ttdeci">std::array&lt; int, 3 &gt; getCellCartesianId(long const &amp;idx) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00938">volcartesian.cpp:938</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a2e93bed30dd4b9bdb6b721761731b7f4"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a2e93bed30dd4b9bdb6b721761731b7f4">bitpit::VolCartesian::extractVertexSubSet</a></div><div class="ttdeci">std::vector&lt; long &gt; extractVertexSubSet(std::array&lt; int, 3 &gt; const &amp;ijkMin, std::array&lt; int, 3 &gt; const &amp;ijkMax)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01234">volcartesian.cpp:1234</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a4cee1aaca004bf6f3af1f11af40ef5a4"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a4cee1aaca004bf6f3af1f11af40ef5a4">bitpit::PatchKernel::setBoundingBoxFrozen</a></div><div class="ttdeci">void setBoundingBoxFrozen(bool frozen)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03091">patch_kernel.cpp:3091</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_abcef3cebae85ce071be0fa775dbbb5a1"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#abcef3cebae85ce071be0fa775dbbb5a1">bitpit::VolCartesian::isPointInside</a></div><div class="ttdeci">bool isPointInside(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00812">volcartesian.cpp:812</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a72264df84acb1e61011208a27686d496"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a72264df84acb1e61011208a27686d496">bitpit::VolCartesian::evalCellSize</a></div><div class="ttdeci">double evalCellSize(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00409">volcartesian.cpp:409</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a90f99ba8c3e029f20bf729f6239574db"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a90f99ba8c3e029f20bf729f6239574db">bitpit::VolCartesian::convertToCellData</a></div><div class="ttdeci">std::vector&lt; double &gt; convertToCellData(const std::vector&lt; double &gt; &amp;nodeData) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01383">volcartesian.cpp:1383</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a140b6502bf890c117227aaab9a444804"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">bitpit::PatchKernel::scale</a></div><div class="ttdeci">virtual void scale(std::array&lt; double, 3 &gt; scaling)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03342">patch_kernel.cpp:3342</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">bitpit::ElementInfo::PIXEL</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00052">element.hpp:52</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga119be619426d7a672ab67296a32f04e9"><div class="ttname"><a href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a></div><div class="ttdeci">std::array&lt; T, d &gt; max(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00306">MathOperators_array.tpp:306</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a4dff65665378ce01e7eb55fc214455c6"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a4dff65665378ce01e7eb55fc214455c6">bitpit::VolCartesian::_findCellVertexNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellVertexNeighs(const long &amp;id, const int &amp;vertex, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01148">volcartesian.cpp:1148</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">bitpit::ElementInfo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00046">element.hpp:46</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a23304f57bc1d93ba5f1d97f7f0deefc1"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a23304f57bc1d93ba5f1d97f7f0deefc1">bitpit::VolCartesian::_findCellEdgeNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellEdgeNeighs(const long &amp;id, const int &amp;edge, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l01111">volcartesian.cpp:1111</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af4fe56dc2ac8e276a29b9fdd3c6c6c8a"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af4fe56dc2ac8e276a29b9fdd3c6c6c8a">bitpit::PatchKernel::setBoundingBox</a></div><div class="ttdeci">void setBoundingBox(const std::array&lt; double, 3 &gt; &amp;minPoint, const std::array&lt; double, 3 &gt; &amp;maxPoint)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03046">patch_kernel.cpp:3046</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a7ba99da1bbc9ea9a60124b400dcd8d4e"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a7ba99da1bbc9ea9a60124b400dcd8d4e">bitpit::VolCartesian::evalInterfaceArea</a></div><div class="ttdeci">double evalInterfaceArea(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00422">volcartesian.cpp:422</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_ae7f342e48ae2b7c9bcf68bcbc19600f3"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#ae7f342e48ae2b7c9bcf68bcbc19600f3">bitpit::VolCartesian::VolCartesian</a></div><div class="ttdeci">VolCartesian(const int &amp;id, const int &amp;dimension, const std::array&lt; double, 3 &gt; &amp;origin, const std::array&lt; double, 3 &gt; &amp;lengths, const std::array&lt; int, 3 &gt; &amp;nCells)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00056">volcartesian.cpp:56</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_ac3de13023492238f8bd7534b04eecf99"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#ac3de13023492238f8bd7534b04eecf99">bitpit::VolCartesian::evalInterfaceNormal</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; evalInterfaceNormal(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00437">volcartesian.cpp:437</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">bitpit::ElementInfo::VOXEL</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00055">element.hpp:55</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml">bitpit::VolumeKernel</a></div><div class="ttdoc">The VolumeKernel class provides an interface for defining volume patches. </div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8hpp_source.xhtml#l00032">volume_kernel.hpp:32</a></div></div>
<div class="ttc" id="namespacebitpit_1_1log_xhtml_ac9c385c32dc5a0331c601b1b07ab9952"><div class="ttname"><a href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">bitpit::log::cout</a></div><div class="ttdeci">Logger &amp; cout()</div><div class="ttdef"><b>Definition:</b> <a href="logger_8cpp_source.xhtml#l01280">logger.cpp:1280</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga88740c05f6c499a2784fcc1a221c1c9f"><div class="ttname"><a href="group__MathFunctions.xhtml#ga88740c05f6c499a2784fcc1a221c1c9f">min</a></div><div class="ttdeci">std::array&lt; T, d &gt; min(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00067">MathOperators_array.tpp:67</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_aa54f07f5b15326a694961c9084b33a20"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#aa54f07f5b15326a694961c9084b33a20">bitpit::VolCartesian::evalCellVolume</a></div><div class="ttdeci">double evalCellVolume(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00396">volcartesian.cpp:396</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5d6bb9aad26b0683e7f9c811700281c0"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5d6bb9aad26b0683e7f9c811700281c0">bitpit::PatchKernel::addInterface</a></div><div class="ttdeci">InterfaceIterator addInterface(ElementInfo::Type type, const long &amp;id=Element::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02240">patch_kernel.cpp:2240</a></div></div>
<div class="ttc" id="classbitpit_1_1VolCartesian_xhtml_a891f3eefe72442a77f0b76cbee74bfbf"><div class="ttname"><a href="classbitpit_1_1VolCartesian.xhtml#a891f3eefe72442a77f0b76cbee74bfbf">bitpit::VolCartesian::_markCellForCoarsening</a></div><div class="ttdeci">bool _markCellForCoarsening(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="volcartesian_8cpp_source.xhtml#l00755">volcartesian.cpp:755</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

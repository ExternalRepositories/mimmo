
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/voloctree/voloctree.cpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0eef72754324b964e7b10b5133407dd0.xhtml">voloctree</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">voloctree.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;bitpit_IO.hpp&quot;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;voloctree.hpp&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#ab5eefb77131bd2b33f52def7566bc2b7">   64</a></span>&#160;<a class="code" href="classbitpit_1_1VolOctree.xhtml#ab5eefb77131bd2b33f52def7566bc2b7">VolOctree::VolOctree</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dimension,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                 std::array&lt;double, 3&gt; origin, <span class="keywordtype">double</span> length, <span class="keywordtype">double</span> dh )</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    : <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a>(id, dimension, false),</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      m_tree(origin[0], origin[1], origin[2], length, dimension,</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;             <a class="code" href="classbitpit_1_1PabloUniform.xhtml">PabloUniform</a>::DEFAULT_MAX_LEVELS, <a class="code" href="classbitpit_1_1PabloUniform.xhtml">PabloUniform</a>::DEFAULT_LOG_FILE</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;#if BITPIT_ENABLE_MPI==1</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;             , MPI_COMM_NULL</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;#endif</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            ),</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      m_lastTreeOperation(OP_INITIALIZATION)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Initializing Octree mesh\n&quot;</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Initialize local edges/vertex/faces association</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() == 3) {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        m_octantLocalFacesOnVertex.reserve(8);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        m_octantLocalFacesOnVertex.push_back({{0, 2, 4}});</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        m_octantLocalFacesOnVertex.push_back({{1, 2, 4}});</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        m_octantLocalFacesOnVertex.push_back({{0, 3, 4}});</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        m_octantLocalFacesOnVertex.push_back({{1, 3, 4}});</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        m_octantLocalFacesOnVertex.push_back({{0, 2, 5}});</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        m_octantLocalFacesOnVertex.push_back({{1, 2, 5}});</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        m_octantLocalFacesOnVertex.push_back({{0, 3, 5}});</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        m_octantLocalFacesOnVertex.push_back({{1, 3, 5}});</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        m_octantLocalEdgesOnVertex.reserve(8);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{0, 2,  4}});</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{1, 2,  5}});</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{0, 3,  6}});</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{1, 3,  7}});</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{4, 8, 10}});</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{5, 9, 10}});</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{6, 8, 11}});</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        m_octantLocalEdgesOnVertex.push_back({{7, 9, 11}});</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        m_octantLocalFacesOnEdge.reserve(12);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        m_octantLocalFacesOnEdge.push_back({{0, 4}});</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        m_octantLocalFacesOnEdge.push_back({{1, 4}});</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        m_octantLocalFacesOnEdge.push_back({{2, 4}});</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        m_octantLocalFacesOnEdge.push_back({{3, 4}});</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        m_octantLocalFacesOnEdge.push_back({{0, 2}});</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        m_octantLocalFacesOnEdge.push_back({{1, 2}});</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        m_octantLocalFacesOnEdge.push_back({{0, 3}});</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        m_octantLocalFacesOnEdge.push_back({{1, 3}});</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        m_octantLocalFacesOnEdge.push_back({{0, 5}});</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        m_octantLocalFacesOnEdge.push_back({{1, 5}});</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        m_octantLocalFacesOnEdge.push_back({{2, 5}});</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        m_octantLocalFacesOnEdge.push_back({{3, 5}});</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        m_octantLocalFacesOnVertex.reserve(4);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        m_octantLocalFacesOnVertex.push_back({{0, 2}});</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        m_octantLocalFacesOnVertex.push_back({{1, 2}});</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        m_octantLocalFacesOnVertex.push_back({{0, 3}});</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        m_octantLocalFacesOnVertex.push_back({{1, 3}});</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// Inizializzazione dell&#39;octree</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">double</span> initial_level = ceil(log2(<a class="code" href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">std::max</a>(1., length / dh)));</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a0d210b4659cca3b083f6f07aa30577a7">setMarker</a>((uint32_t) 0, initial_level);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// Info sull&#39;octree</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    initializeTreeGeometry();</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="comment">// Info of the cell type</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        cellType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">ElementInfo::VOXEL</a>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        cellType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    m_cellTypeInfo = &amp;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(cellType);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// Info on the interface type</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> interfaceType;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        interfaceType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        interfaceType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">ElementInfo::LINE</a>;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    m_interfaceTypeInfo = &amp;<a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(interfaceType);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="comment">// Info sulle interfacce</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; dimension; i++) {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = -1; n &lt;= 1; n += 2) {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            std::array&lt;double, 3&gt; normal = {{0.0, 0.0, 0.0}};</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            normal[i] = n;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            m_normals.push_back(normal);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keywordtype">void</span> VolOctree::initializeTreeGeometry()</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;{</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordtype">int</span> maxLevels = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a61e270b61e5d025d4ba73ab9624de62d">getMaxLevel</a>();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">double</span> length = m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a684935849a0c41136d0c48b7bca72d0d">getL</a>();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    m_tree_dh.clear();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    m_tree_area.clear();</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    m_tree_volume.clear();</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    m_tree_dh.reserve(maxLevels);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    m_tree_area.reserve(maxLevels);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    m_tree_volume.reserve(maxLevels);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; maxLevels; i++) {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordtype">double</span> levelLength = length / ((double) <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(2,i));</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        m_tree_dh.push_back(<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(levelLength, 1.));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        m_tree_area.push_back(<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(levelLength, (<span class="keywordtype">double</span>) (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() - 1)));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        m_tree_volume.push_back(<a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(levelLength, (<span class="keywordtype">double</span>) (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>())));</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a8db3fefc682242c999cd2a8f6b9d36e3">  189</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a8db3fefc682242c999cd2a8f6b9d36e3">VolOctree::evalCellVolume</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;{</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">int</span> level = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">getCellLevel</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> m_tree_volume[level];</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a353e616c402bb91bfb6e5094d7fc5bfb">  202</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a353e616c402bb91bfb6e5094d7fc5bfb">VolOctree::evalCellCentroid</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="classbitpit_1_1Octant.xhtml">Octant</a> *octant;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        octant = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a2eff54ce1a781fe3844e6bcc698a03bc">getOctant</a>(octantInfo.id);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        octant = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#afb007fe22f8e4450f81e57508ddea43b">getGhostOctant</a>(octantInfo.id);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#ab4d8b1dc243f613f68eedc38a941cef2">getCenter</a>(octant);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a9a924c83cf4f7d96da91ecf1f4f58ebf">  222</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a9a924c83cf4f7d96da91ecf1f4f58ebf">VolOctree::evalCellSize</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;{</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">int</span> level = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">getCellLevel</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">return</span> m_tree_dh[level];</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#abd3d7ef0b19fa4e79d13f7c038ac3186">  235</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#abd3d7ef0b19fa4e79d13f7c038ac3186">VolOctree::evalInterfaceArea</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= getInterface(id);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">int</span> owner = interface.<a class="code" href="classbitpit_1_1Interface.xhtml#a35043572b022d41c46f802d6485e668d">getOwner</a>();</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordtype">int</span> level = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">getCellLevel</a>(owner);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> m_tree_area[level];</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a10ed404b82509d3f59fd60b0d4cc8c8c">  250</a></span>&#160;std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a10ed404b82509d3f59fd60b0d4cc8c8c">VolOctree::evalInterfaceNormal</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Interface.xhtml">Interface</a> &amp;<span class="keyword">interface </span>= getInterface(id);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordtype">int</span> ownerFace = interface.<a class="code" href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">getOwnerFace</a>();</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">return</span> m_normals[ownerFace];</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;}</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">  264</a></span>&#160;<a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">VolOctree::OctantInfo</a> <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">VolOctree::getCellOctant</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> octantInfo;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    octantInfo.internal = m_cells[id].isInterior();</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        octantInfo.id = m_cellToOctant.at(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        octantInfo.id = m_cellToGhost.at(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">return</span> octantInfo;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#abd350ce466388cc48e2a3879d472065b">  282</a></span>&#160;<a class="code" href="classbitpit_1_1PabloUniform.xhtml">PabloUniform</a> &amp; <a class="code" href="classbitpit_1_1VolOctree.xhtml#abd350ce466388cc48e2a3879d472065b">VolOctree::getTree</a>()</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;{</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordflow">return</span> m_tree;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">  293</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">VolOctree::getOctantId</a>(<span class="keyword">const</span> <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> &amp;octantInfo)<span class="keyword"> const</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    std::unordered_map&lt;uint32_t, long&gt;::const_iterator octantItr;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        octantItr = m_octantToCell.find(octantInfo.id);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <span class="keywordflow">if</span> (octantItr == m_octantToCell.end()) {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">return</span> Element::NULL_ID;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        octantItr = m_ghostToCell.find(octantInfo.id);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">if</span> (octantItr == m_ghostToCell.end()) {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">return</span> Element::NULL_ID;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">return</span> octantItr-&gt;second;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">  317</a></span>&#160;<span class="keyword">const</span> std::vector&lt;uint32_t&gt; &amp; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">VolOctree::getOctantConnect</a>(<span class="keyword">const</span> <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> &amp;octantInfo)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;{</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">return</span> m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a1307e35d8af0f03cb69f7e099c2c478d">getConnectivity</a>()[octantInfo.id];</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">return</span> m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#ad7eff9500a3dcc91ac47a2e2a9a553d0">getGhostConnectivity</a>()[octantInfo.id];</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;VolOctree::OctantHash VolOctree::evaluateOctantHash(<span class="keyword">const</span> OctantInfo &amp;octantInfo)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    uint8_t level   = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a6ffebc73d993ac8711c0efc04435d944">getLevel</a>(octantInfo.id);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    uint64_t morton = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#aaa305d49584ec25f5ec8d184e62ba5dd">getMorton</a>(octantInfo.id);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    OctantHash octantHash;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    octantHash |= morton;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    octantHash &lt;&lt;= 8;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    octantHash |= level;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">return</span> octantHash;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;}</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">  351</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">VolOctree::getCellLevel</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;{</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="classbitpit_1_1Octant.xhtml">Octant</a>* octant;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        octant = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a2eff54ce1a781fe3844e6bcc698a03bc">getOctant</a>(octantInfo.id);</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        octant = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#afb007fe22f8e4450f81e57508ddea43b">getGhostOctant</a>(octantInfo.id);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keywordflow">return</span> m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a6ffebc73d993ac8711c0efc04435d944">getLevel</a>(octant);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00371"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#ac6ca61c71806c0d2ca8f7a46d48909c4">  371</a></span>&#160;<span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#ac6ca61c71806c0d2ca8f7a46d48909c4">VolOctree::_updateAdaption</a>(<span class="keywordtype">bool</span> trackAdaption)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="comment">// Updating the tree</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Adapting tree...&quot;</span>;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <span class="keywordtype">bool</span> buildMapping = (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>() != 0);</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordtype">bool</span> updated = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a234a7e3bb6fdb72c14d6cdcaafda8395">adapt</a>(buildMapping);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">if</span> (trackAdaption) {</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        m_lastTreeOperation = OP_ADAPTION_MAPPED;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        m_lastTreeOperation = OP_ADAPTION_UNMAPPED;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">if</span> (!updated) {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Already updated&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">return</span> std::vector&lt;adaption::Info&gt;();</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Done&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="comment">// Sync the patch</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <span class="keywordflow">return</span> sync(trackAdaption);</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="keyword">const</span> std::vector&lt;adaption::Info&gt; VolOctree::sync(<span class="keywordtype">bool</span> trackChanges)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;{</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Syncing patch...&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment">// If the current mesh is empty we need to import all the octants</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordtype">bool</span> importAll = (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">getCellCount</a>() == 0);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="comment">// Last operation on the tree</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    TreeOperation lastTreeOperation = m_lastTreeOperation;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">if</span> (lastTreeOperation == OP_ADAPTION_UNMAPPED &amp;&amp; !importAll) {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">throw</span> std::runtime_error (<span class="stringliteral">&quot;Unable to sync the patch after an unmapped adaption&quot;</span>);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="comment">// Info on the tree</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keywordtype">long</span> nOctants = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#aedea46c7857bffcebb567995285d40db">getNumOctants</a>();</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    <span class="keywordtype">long</span> nPreviousOctants = m_octantToCell.size();</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Number of octants : &quot;</span> &lt;&lt; nOctants &lt;&lt; std::endl;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="comment">// Info on the tree</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordtype">long</span> nGhostsOctants = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a79732d79d809a863e4f8b918154da561">getNumGhosts</a>();</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordtype">long</span> nPreviousGhosts = m_ghostToCell.size();</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// Evaluate tree conenctivity</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Evaluating Octree connectivity...&quot;</span>;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a41d99b9833493d8b18bf927418bf7598">computeConnectivity</a>();</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Done&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// Initialize tracking data</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    adaption::InfoCollection adaptionData;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="comment">// Current rank</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordtype">int</span> currentRank = -1;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="preprocessor"></span>    currentRank = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#aa83578acd9b5aada55a02fa2caf7238b">getRank</a>();</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="comment">// Extract information for transforming the patch</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="comment">// If there are no cells in the mesh we need to import all</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    <span class="comment">// octants.</span></div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Extract information for transforming the patch...&quot;</span>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    std::vector&lt;bool&gt; unmappedOctants(nPreviousOctants, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    std::vector&lt;OctantInfo&gt; addedOctants;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    std::vector&lt;RenumberInfo&gt; renumberedOctants;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    std::vector&lt;DeleteInfo&gt; deletedOctants;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    addedOctants.reserve(nOctants + nGhostsOctants);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    renumberedOctants.reserve(nPreviousOctants + nPreviousGhosts);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    deletedOctants.reserve(nPreviousOctants + nPreviousGhosts);</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    uint32_t treeId = 0;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">while</span> (treeId &lt; (uint32_t) nOctants) {</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="comment">// Octant mapping</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        std::vector&lt;uint32_t&gt; mapper_octantMap;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        std::vector&lt;bool&gt; mapper_ghostFlag;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        std::vector&lt;int&gt; mapper_octantRank;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <span class="keywordflow">if</span> (!importAll) {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            m_tree.getMapping(treeId, mapper_octantMap, mapper_ghostFlag, mapper_octantRank);</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="comment">// Adaption type</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        <a class="code" href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">adaption::Type</a> adaptionType = adaption::TYPE_NONE;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <span class="keywordflow">if</span> (importAll) {</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            adaptionType = adaption::TYPE_CREATION;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lastTreeOperation == OP_ADAPTION_MAPPED) {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            <span class="keywordtype">bool</span> isNewR = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#aae044991bf24466248d94db58fc78176">getIsNewR</a>(treeId);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordflow">if</span> (isNewR) {</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                adaptionType = adaption::TYPE_REFINEMENT;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                <span class="keywordtype">bool</span> isNewC = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a7eb56df83ee7f033f828af5315e96201">getIsNewC</a>(treeId);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                <span class="keywordflow">if</span> (isNewC) {</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    adaptionType = adaption::TYPE_COARSENING;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (treeId != mapper_octantMap.front()) {</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    adaptionType = adaption::TYPE_RENUMBERING;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                }</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            }</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="preprocessor"></span>        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (lastTreeOperation == OP_LOAD_BALANCE) {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">if</span> (currentRank != mapper_octantRank.front()) {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                adaptionType = adaption::TYPE_PARTITION_RECV;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (treeId != mapper_octantMap.front()) {</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                adaptionType = adaption::TYPE_RENUMBERING;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="preprocessor"></span>        }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="comment">// If the octant cell has not been modified we can skip to the next</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <span class="comment">// octant.</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="keywordflow">if</span> (adaptionType == adaption::TYPE_NONE) {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            unmappedOctants[treeId] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            ++treeId;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="comment">// Re-numbered cells just need to be added to the proper list.</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;        <span class="comment">// Renumbered cells are not tracked, because the re-numbering</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <span class="comment">// only happens inside VolOctree.</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordflow">if</span> (adaptionType == adaption::TYPE_RENUMBERING) {</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            uint32_t previousTreeId = mapper_octantMap.front();</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            OctantInfo previousOctantInfo(previousTreeId, !mapper_ghostFlag.front());</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;            renumberedOctants.emplace_back(previousOctantInfo, treeId);</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            unmappedOctants[previousTreeId] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;            <span class="comment">// No more work needed, skip to the next octant</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            ++treeId;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        }</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="comment">// Handle other kind of adaption</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <span class="comment">// New octants need to be imported into the patch,</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="comment">// whereas cells associated to previous octants</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="comment">// need to be removed.</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="comment">// If the user want to track adaption, adaption</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="comment">// data needs to be filled.</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="comment">// Current tree ids that will be imported</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        <span class="keywordtype">long</span> nCurrentTreeIds;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <span class="keywordflow">if</span> (importAll) {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;            nCurrentTreeIds = nOctants - treeId;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (adaptionType == adaption::TYPE_REFINEMENT) {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            nCurrentTreeIds = <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(2, <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>());</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;            nCurrentTreeIds = 1;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        }</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">long</span> lastCurrentTreeId = treeId + nCurrentTreeIds;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> currentTreeId = treeId; currentTreeId &lt; lastCurrentTreeId; ++currentTreeId) {</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            addedOctants.emplace_back(currentTreeId, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="comment">// Cells that will be removed</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="comment">// Mark the cells associated to previous local octants for deletion.</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordtype">int</span> nPreviousTreeIds = mapper_octantMap.size();</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nPreviousTreeIds; ++k) {</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="preprocessor"></span>            <span class="comment">// Only local cells can be deleted</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            <span class="keywordflow">if</span> (mapper_octantRank[k] != currentRank) {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            <span class="comment">// Mark previous octant for deletion</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            uint32_t previousTreeId = mapper_octantMap[k];</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            OctantInfo previousOctantInfo(previousTreeId, !mapper_ghostFlag[k]);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            deletedOctants.emplace_back(previousOctantInfo, adaptionType);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            unmappedOctants[previousTreeId] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="comment">// Adaption tracking</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="comment">// The adaption info associated to the octants that has been received</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;        <span class="comment">// from external partitions will contain the current octants sorted by</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        <span class="comment">// their tree id (we are looping over the octants in that order), this</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        <span class="comment">// is the same order that will be used on the processor that has sent</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="comment">// the octants. Since the order is the same, the two processors are able</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <span class="comment">// to exchange cell data without any additional extra communication</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="comment">// (they already know the list of cells for which data is needed and</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        <span class="comment">// the order in which these data will be sent).</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordflow">if</span> (trackChanges) {</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="comment">// Rank assocated to the adaption info</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            <span class="keywordtype">int</span> rank = currentRank;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="preprocessor"></span>            <span class="keywordflow">if</span> (adaptionType == adaption::TYPE_PARTITION_RECV) {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                rank = mapper_octantRank[0];</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            }</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            <span class="comment">// Get the adaption info</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            std::size_t infoId = adaptionData.create(adaptionType, adaption::ENTITY_CELL, rank);</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;            adaption::Info &amp;adaptionInfo = adaptionData[infoId];</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            <span class="comment">// Current status</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;            <span class="comment">// We don&#39;t know the id of the current status, because those</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <span class="comment">// cells are not yet in the mesh. Store the trre id, and</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            <span class="comment">// make the translation later.</span></div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            <span class="comment">// WARNING: tree id are uint32_t wherase adaptionInfo stores</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            <span class="comment">//          id as long.</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            adaptionInfo.current.reserve(nCurrentTreeIds);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keyword">auto</span> addedOctantsIter = addedOctants.cend() - nCurrentTreeIds;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            <span class="keywordflow">while</span> (addedOctantsIter != addedOctants.cend()) {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                adaptionInfo.current.emplace_back();</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                <span class="keywordtype">long</span> &amp;adaptionId = adaptionInfo.current.back();</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                adaptionId = (*addedOctantsIter).id;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                addedOctantsIter++;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            }</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            <span class="comment">// Previous cells</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            <span class="comment">// A coarsening can merge togheter cells of different processors.</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <span class="comment">// However, since the coarsening is limited to one level, the</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="comment">// previous cells will always be internal or among the ghost of</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <span class="comment">// the current processor.</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordtype">int</span> nPreviousCellIds = mapper_octantMap.size();</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            adaptionInfo.previous.reserve(nPreviousCellIds);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nPreviousCellIds; ++k) {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                <span class="keywordtype">long</span> previousCellId;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="preprocessor"></span>                <span class="keywordflow">if</span> (mapper_octantRank[k] != currentRank) {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                    previousCellId = Cell::NULL_ID;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                } <span class="keywordflow">else</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor"></span>                {</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                    OctantInfo previousOctantInfo(mapper_octantMap[k], !mapper_ghostFlag[k]);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                    previousCellId = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(previousOctantInfo);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                adaptionInfo.previous.emplace_back();</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                <span class="keywordtype">long</span> &amp;adaptionId = adaptionInfo.previous.back();</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;                adaptionId = previousCellId;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        }</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="comment">// Incremente tree id</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        treeId += nCurrentTreeIds;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    }</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Done&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;<span class="preprocessor"></span>    <span class="comment">// Cells that have been send to other processors need to be removed</span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    std::unordered_map&lt;int, std::array&lt;uint32_t, 4&gt;&gt; sendOctants = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a200a8a6089ed396cd699b606a6b4bb9b">getSentIdx</a>();</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;rankEntry : sendOctants) {</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordtype">int</span> rank = rankEntry.first;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        <a class="code" href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">adaption::Type</a> deletionType;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">if</span> (rank == currentRank) {</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            deletionType = adaption::TYPE_DELETION;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            deletionType = adaption::TYPE_PARTITION_SEND;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        }</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; 2; ++k) {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            uint32_t beginTreeId = rankEntry.second[2 * k];</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            uint32_t endTreeId   = rankEntry.second[2 * k + 1];</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordflow">for</span> (uint32_t treeId = beginTreeId; treeId &lt; endTreeId; ++treeId) {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                OctantInfo octantInfo(treeId, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                deletedOctants.emplace_back(octantInfo, deletionType, rank);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                unmappedOctants[treeId] = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            }</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    }</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="comment">// Previous ghosts cells need to be removed</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    <span class="keywordflow">if</span> (nPreviousGhosts &gt; 0) {</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#abb0763840b53491d1c16b99973eb8bf7">clearGhostOwners</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keywordflow">for</span> (uint32_t ghostTreeId = 0; ghostTreeId &lt; nPreviousGhosts; ++ghostTreeId) {</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            OctantInfo ghostOctantInfo(ghostTreeId, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            deletedOctants.emplace_back(ghostOctantInfo, adaption::TYPE_DELETION);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;        }</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    }</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="comment">// New ghost octants need to be added</span></div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordflow">for</span> (uint32_t treeId = 0; treeId &lt; (uint32_t) nGhostsOctants; ++treeId) {</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        addedOctants.emplace_back(treeId, <span class="keyword">false</span>);</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    addedOctants.shrink_to_fit();</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="comment">// Remove unmapped octants</span></div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <span class="comment">// A coarsening that merges cells from different processors, can leave, on</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;    <span class="comment">// the processors which own the ghost octants involved in the coarsening,</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="comment">// some octants that are not mapped.</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keywordflow">for</span> (uint32_t previousTreeId = 0; previousTreeId &lt; nPreviousOctants; ++previousTreeId) {</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        <span class="keywordflow">if</span> (unmappedOctants[previousTreeId]) {</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            OctantInfo octantInfo = OctantInfo(previousTreeId, <span class="keyword">true</span>);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            deletedOctants.emplace_back(octantInfo, adaption::TYPE_DELETION);</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;        }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    }</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    <span class="comment">// Enable advanced editing</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">setExpert</a>(<span class="keyword">true</span>);</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;    <span class="comment">// Remove deleted octants</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    FaceInfoSet danglingFaces;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <span class="keywordflow">if</span> (deletedOctants.size() &gt; 0) {</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Removing non-existing cells...&quot;</span>;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        <span class="comment">// Track changes</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="comment">// The adaption info associated to the octants that has been sent</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="comment">// to external partitions will contain the current octants sorted by</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="comment">// their tree id (they were added to the deleted octants list in that</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="comment">// order), this is the same order that will be used on the processor</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        <span class="comment">// that has received the octants. Since the order is the same, the two</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        <span class="comment">// processors are able to exchange cell data without any additional</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="comment">// extra communication (they already know the list of cells for which</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        <span class="comment">// data is needed and the order in which these data will be sent).</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        <span class="keywordflow">if</span> (trackChanges) {</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;            <span class="comment">// Track deleted cells</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            std::unordered_set&lt;long&gt; sendAdaptionInfo;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            std::unordered_set&lt;long&gt; removedInterfaces;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> DeleteInfo &amp;deleteInfo : deletedOctants) {</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                <span class="comment">// Cell info</span></div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                <span class="keyword">const</span> OctantInfo &amp;octantInfo = deleteInfo.octantInfo;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                <span class="keywordtype">long</span> cellId = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(octantInfo);</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                <span class="comment">// Adaption tracking</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                <span class="comment">//</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                <span class="comment">// Only cells deleted from a real deletion or a partition send</span></div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                <span class="comment">// needs to be tracked here, the other cells will be tracked</span></div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                <span class="comment">// where the adaption that deleted the cell is tracked.</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                <a class="code" href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">adaption::Type</a> adaptionType = deleteInfo.trigger;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                <span class="keywordtype">bool</span> adaptionIsDeletion = (adaptionType == adaption::TYPE_DELETION);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                <span class="keywordtype">bool</span> adaptionIsSend = (adaptionType == adaption::TYPE_PARTITION_SEND);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                <span class="keywordflow">if</span> (adaptionIsDeletion || adaptionIsSend) {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                    <span class="keywordtype">int</span> rank = deleteInfo.rank;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                    std::size_t adaptionInfoId = adaptionData.create(adaptionType, adaption::ENTITY_CELL, rank);</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                    adaption::Info &amp;adaptionInfo = adaptionData[adaptionInfoId];</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                    adaptionInfo.previous.emplace_back();</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                    <span class="keywordtype">long</span> &amp;deletedId = adaptionInfo.previous.back();</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                    deletedId = cellId;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                    <span class="comment">// Keep track of adaption info for the send cells</span></div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    <span class="keywordflow">if</span> (adaptionIsSend) {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                        sendAdaptionInfo.insert(adaptionInfoId);</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                    }</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                }</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                <span class="comment">// List of deleted interfaces</span></div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                <span class="keyword">const</span> Cell &amp;cell = m_cells.at(cellId);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                <span class="keywordtype">long</span> nCellInterfaces = cell.getInterfaceCount();</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">long</span> *interfaces = cell.getInterfaces();</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellInterfaces; ++k) {</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                    <span class="keywordtype">long</span> interfaceId = interfaces[k];</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                    <span class="keywordflow">if</span> (interfaceId &gt;= 0) {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                        removedInterfaces.insert(interfaceId);</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                    }</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                }</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;            }</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="preprocessor"></span>            <span class="comment">// Sort sent cells</span></div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="comment">// We cannot use native functions to evaluate the position of the</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            <span class="comment">// cells because the octants associated to the cells no longer</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;            <span class="comment">// exist on the octree. The cells are still there, therefore we</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;            <span class="comment">// can evaluate the cell positions using generic patch functions.</span></div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> adaptionInfoId : sendAdaptionInfo) {</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                adaption::Info &amp;adaptionInfo = adaptionData[adaptionInfoId];</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                std::sort(adaptionInfo.previous.begin(), adaptionInfo.previous.end(), CellPositionLess(*<span class="keyword">this</span>, <span class="keyword">false</span>));</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            }</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;            <span class="comment">// Adaption info for the deleted interfaces</span></div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            std::size_t adaptionInfoId = adaptionData.create(adaption::TYPE_DELETION, adaption::ENTITY_INTERFACE, currentRank);</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            adaption::Info &amp;adaptionInfo = adaptionData[adaptionInfoId];</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;interfaceId : removedInterfaces) {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                adaptionInfo.previous.emplace_back();</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                <span class="keywordtype">long</span> &amp;deletedInterfaceId = adaptionInfo.previous.back();</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;                deletedInterfaceId = interfaceId;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        }</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        <span class="comment">// Delete cells</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        danglingFaces = deleteOctants(deletedOctants);</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Done&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Cells removed: &quot;</span> &lt;&lt;  deletedOctants.size() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    }</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    std::vector&lt;DeleteInfo&gt;().swap(deletedOctants);</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="comment">// Reserve space in the octant-to-cell maps</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    m_cellToOctant.reserve(nOctants);</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    m_octantToCell.reserve(nOctants);</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    <span class="comment">// Remap renumbered cells</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    <span class="keywordflow">if</span> (renumberedOctants.size() &gt; 0) {</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Rebuilding octant-to-cell map for renumbered cells...&quot;</span>;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        renumberOctants(renumberedOctants);</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Done&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Cells renumbered: &quot;</span> &lt;&lt;  renumberedOctants.size() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;    }</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    std::vector&lt;RenumberInfo&gt;().swap(renumberedOctants);</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="comment">// Reset ghost maps</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;    m_cellToGhost.clear();</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    m_cellToGhost.reserve(nGhostsOctants);</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    m_ghostToCell.clear();</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;    m_ghostToCell.reserve(nGhostsOctants);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    <span class="comment">// Import added octants</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    std::vector&lt;long&gt; createdCells;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keywordflow">if</span> (addedOctants.size() &gt; 0) {</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Importing new octants...&quot;</span>;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        createdCells = importOctants(addedOctants, danglingFaces);</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot; Done&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;&gt;&gt; Octants imported: &quot;</span> &lt;&lt;  addedOctants.size() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    FaceInfoSet().swap(danglingFaces);</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="comment">// Rebuild the ghost information</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;<span class="preprocessor"></span>    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9bf127dcd0f5233355f3dc1096c735a2">buildGhostExchangeData</a>();</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <span class="comment">// Disable advanced editing</span></div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">setExpert</a>(<span class="keyword">false</span>);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    <span class="comment">// Track mesh adaption</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <span class="keywordflow">if</span> (trackChanges) {</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        <span class="comment">// Complete mesh adaption info for the cells</span></div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;adaptionInfo : adaptionData.data()) {</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;            <span class="keywordflow">if</span> (adaptionInfo.entity != adaption::ENTITY_CELL) {</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            }</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            <span class="comment">// Map ids of the added cells</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            <span class="keywordtype">int</span> nCurrentIds = adaptionInfo.current.size();</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCurrentIds; ++k) {</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;                <span class="keywordtype">long</span> cellId = m_octantToCell.at(adaptionInfo.current[k]);</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;                adaptionInfo.current[k] = cellId;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            }</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="preprocessor"></span>            <span class="comment">// Sort received cells</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            <span class="comment">//</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;            <span class="comment">// To match the sorting done on the procesor that sent the cells,</span></div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;            <span class="comment">// we don&#39;t use the native functions to evaluate the position of</span></div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            <span class="comment">// the cells.</span></div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;            <a class="code" href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">adaption::Type</a> adaptionType = adaptionInfo.type;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;            <span class="keywordflow">if</span> (adaptionType == adaption::TYPE_PARTITION_RECV) {</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;                std::sort(adaptionInfo.current.begin(), adaptionInfo.current.end(), CellPositionLess(*<span class="keyword">this</span>, <span class="keyword">false</span>));</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;            }</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="preprocessor"></span>        }</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;        <span class="comment">// Track created ghosts cells</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (nGhostsOctants &gt; 0) {</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            std::size_t adaptionInfoId = adaptionData.create(adaption::TYPE_CREATION, adaption::ENTITY_CELL, currentRank);</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            adaption::Info &amp;adaptionInfo = adaptionData[adaptionInfoId];</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            adaptionInfo.current.reserve(nGhostsOctants);</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="keyword">auto</span> cellIterator = m_cellToGhost.cbegin();</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            <span class="keywordflow">while</span> (cellIterator != m_cellToGhost.cend()) {</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                adaptionInfo.current.emplace_back();</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                <span class="keywordtype">long</span> &amp;adaptionId = adaptionInfo.current.back();</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;                adaptionId = cellIterator-&gt;first;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;                cellIterator++;</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            }</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        }</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="comment">// Track created interfaces</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="keywordflow">if</span> (createdCells.size() &gt; 0) {</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;            <span class="comment">// List of unique interfaces that have been created</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;            std::unordered_set&lt;long&gt; createdInterfaces;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;cellId : createdCells) {</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;                <span class="keyword">const</span> Cell &amp;cell = m_cells.at(cellId);</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;                <span class="keywordtype">long</span> nCellInterfaces = cell.getInterfaceCount();</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">long</span> *interfaces = cell.getInterfaces();</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellInterfaces; ++k) {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                    <span class="keywordtype">long</span> interfaceId = interfaces[k];</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    <span class="keywordflow">if</span> (interfaceId &gt;= 0) {</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                        createdInterfaces.insert(interfaceId);</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                    }</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                }</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            }</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            <span class="comment">// Adaption info</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            std::size_t infoId = adaptionData.create(adaption::TYPE_CREATION, adaption::ENTITY_INTERFACE, currentRank);</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            adaption::Info &amp;adaptionInfo = adaptionData[infoId];</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;interfaceId : createdInterfaces) {</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                adaptionInfo.current.emplace_back();</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                <span class="keywordtype">long</span> &amp;createdInterfaceId = adaptionInfo.current.back();</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                createdInterfaceId = interfaceId;</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;            }</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        }</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    }</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="comment">// Delete tree conenctivity</span></div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a18ea1060724ddcd0a5fd25ee507b2f05">clearConnectivity</a>();</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="keywordflow">return</span> adaptionData.dump();</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;}</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="keywordtype">void</span> VolOctree::renumberOctants(std::vector&lt;RenumberInfo&gt; &amp;renumberedOctants)</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;{</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    <span class="comment">// Remove previous cell-to-tree associations</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    std::vector&lt;long&gt; cellIds;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    cellIds.reserve(renumberedOctants.size());</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> RenumberInfo &amp;renumberInfo : renumberedOctants) {</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        <span class="keyword">const</span> OctantInfo &amp;octantInfo = renumberInfo.octantInfo;</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="keywordtype">long</span> cellId = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(octantInfo);</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        cellIds.push_back(cellId);</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        uint32_t previousTreeId = octantInfo.id;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        m_octantToCell.erase(previousTreeId);</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    }</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="comment">// Creeate new cell-to-tree associations</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    std::vector&lt;long&gt;::iterator cellIdsItr = cellIds.begin();</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> RenumberInfo &amp;renumberInfo : renumberedOctants) {</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        uint32_t treeId = renumberInfo.newTreeId;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        <span class="keywordtype">long</span> cellId = (*cellIdsItr);</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        cellIdsItr++;</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        m_cellToOctant[cellId] = treeId;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;        m_octantToCell[treeId] = cellId;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;    }</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;}</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;std::vector&lt;long&gt; VolOctree::importOctants(std::vector&lt;OctantInfo&gt; &amp;octantInfoList)</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;{</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    FaceInfoSet danglingFaces;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;    <span class="keywordflow">return</span> importOctants(octantInfoList, danglingFaces);</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;}</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;std::vector&lt;long&gt; VolOctree::importOctants(std::vector&lt;OctantInfo&gt; &amp;octantInfoList,</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;                                           FaceInfoSet &amp;danglingFaces)</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;{</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    <span class="comment">// Info of the cells</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nCellVertices = m_cellTypeInfo-&gt;nVertices;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::vector&lt;int&gt;&gt; &amp;cellLocalFaceConnect = m_cellTypeInfo-&gt;faceConnect;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    <span class="comment">// Info on the interfaces</span></div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nInterfaceVertices = m_interfaceTypeInfo-&gt;nVertices;</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <span class="comment">// Add the vertex of the dangling faces to the vertex map</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    std::unordered_map&lt;uint32_t, long&gt; vertexMap;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;danglingFaceInfo : danglingFaces) {</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        <span class="comment">// List of faces with the vertx to be added</span></div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        <span class="comment">// We need to consider the dangling face itself and all interfaces</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="comment">// on that face.</span></div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        <span class="keywordtype">long</span> danglingId = danglingFaceInfo.id;</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        Cell &amp;danglingCell = m_cells[danglingId];</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;        <span class="keywordtype">int</span> danglingFace = danglingFaceInfo.face;</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        <span class="keywordtype">int</span> nInterfaces = danglingCell.getInterfaceCount(danglingFace);</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        std::vector&lt;FaceInfo&gt; vertexSourceList;</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        vertexSourceList.reserve(1 + nInterfaces);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;        vertexSourceList.emplace_back(danglingFaceInfo.id, danglingFaceInfo.face);</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nInterfaces; ++k) {</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            <span class="keywordtype">long</span> interfaceId = danglingCell.getInterface(danglingFace, k);</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            <span class="keywordflow">if</span> (interfaceId &lt; 0) {</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;            }</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;            Interface &amp;<span class="keyword">interface </span>= m_interfaces[interfaceId];</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            <span class="keywordflow">if</span> (interface.getOwner() != danglingId) {</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                vertexSourceList.emplace_back(interface.getOwner(), interface.getOwnerFace());</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                vertexSourceList.emplace_back(interface.getNeigh(), interface.getNeighFace());</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;            }</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;        }</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <span class="comment">// Add the vertices to the map</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp; vertexSource : vertexSourceList) {</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;            <span class="comment">// Cell data</span></div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;            Cell &amp;cell = m_cells[vertexSource.id];</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;            <span class="keyword">const</span> <span class="keywordtype">long</span> *cellConnect = cell.getConnect();</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            <span class="comment">// Octant data</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;            OctantInfo octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(vertexSource.id);</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;            <span class="keyword">const</span> std::vector&lt;uint32_t&gt; &amp;octantTreeConnect = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">getOctantConnect</a>(octantInfo);</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;            <span class="comment">// List of vertices</span></div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;            <span class="keyword">const</span> std::vector&lt;int&gt; &amp;localConnect = cellLocalFaceConnect[vertexSource.face];</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nInterfaceVertices; ++k) {</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                uint32_t vertexTreeId = octantTreeConnect[localConnect[k]];</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;                <span class="keywordflow">if</span> (vertexMap.count(vertexTreeId) == 0) {</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                    <span class="keywordtype">long</span> vertexId = cellConnect[localConnect[k]];</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;                    vertexMap.insert({{vertexTreeId, vertexId}});</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;                }</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            }</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        }</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    }</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;    <span class="comment">// Create the new vertices</span></div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;    <span class="keywordflow">for</span> (OctantInfo &amp;octantInfo : octantInfoList) {</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        <span class="keyword">const</span> std::vector&lt;uint32_t&gt; &amp;octantTreeConnect = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">getOctantConnect</a>(octantInfo);</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellVertices; ++k) {</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;            uint32_t vertexTreeId = octantTreeConnect[k];</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;            <span class="keywordflow">if</span> (vertexMap.count(vertexTreeId) == 0) {</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                vertexMap[vertexTreeId] = addVertex(vertexTreeId);</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;            }</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        }</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    }</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;    <span class="comment">// Add the cells</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    std::vector&lt;long&gt; createdCells;</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;    createdCells.reserve(octantInfoList.size());</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    <span class="keywordflow">for</span> (OctantInfo &amp;octantInfo : octantInfoList) {</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        <span class="comment">// Octant connectivity</span></div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keyword">const</span> std::vector&lt;uint32_t&gt; &amp;octantTreeConnect = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">getOctantConnect</a>(octantInfo);</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        <span class="comment">// Cell connectivity</span></div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;        std::unique_ptr&lt;long[]&gt; cellConnect = std::unique_ptr&lt;long[]&gt;(<span class="keyword">new</span> <span class="keywordtype">long</span>[nCellVertices]);</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellVertices; ++k) {</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;            uint32_t vertexTreeId = octantTreeConnect[k];</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;            cellConnect[k] = vertexMap.at(vertexTreeId);</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        }</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="comment">// Add cell</span></div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;        <span class="keywordtype">long</span> cellId = addCell(octantInfo, cellConnect);</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        createdCells.push_back(cellId);</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    }</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <span class="comment">// Build adjacencies</span></div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <a class="code" href="classbitpit_1_1VolOctree.xhtml#a4d3f8b18428f49d3b8d605e13c5f231a">updateAdjacencies</a>(createdCells, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5a23374e8cac5ebfe46acf6e6b3400e8">updateInterfaces</a>(createdCells, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    <span class="keywordflow">return</span> createdCells;</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;}</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;VolOctree::FaceInfoSet VolOctree::deleteOctants(std::vector&lt;DeleteInfo&gt; &amp;deletedOctants)</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;{</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;    FaceInfoSet danglingFaces;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <span class="comment">// Info of the cells</span></div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;        cellType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">ElementInfo::VOXEL</a>;</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;        cellType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    }</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    <span class="keyword">const</span> ElementInfo &amp;cellTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(cellType);</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="keyword">const</span> std::vector&lt;std::vector&lt;int&gt;&gt; &amp;cellLocalFaceConnect = cellTypeInfo.faceConnect;</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;    <span class="comment">// Info on the faces</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> faceType;</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;        faceType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;        faceType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">ElementInfo::LINE</a>;</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;    }</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;    <span class="keyword">const</span> ElementInfo &amp;faceTypeInfo = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">ElementInfo::getElementInfo</a>(faceType);</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;nFaceVertices = faceTypeInfo.nVertices;</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="comment">// List of cells ot delete</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;    std::unordered_set&lt;long&gt; deadCells;</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    deadCells.reserve(deletedOctants.size());</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> DeleteInfo &amp;deleteInfo : deletedOctants) {</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;        <span class="keywordtype">long</span> cellId = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(deleteInfo.octantInfo);</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;        deadCells.insert(cellId);</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;    }</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;    <span class="comment">// Delete the cells</span></div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;    std::unordered_set&lt;long&gt; deadVertices;</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;    std::unordered_set&lt;long&gt; deadInterfaces;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : deadCells) {</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;        Cell &amp;cell = m_cells[cellId];</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <span class="comment">// List vertices to remove</span></div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;        <span class="comment">// For now, all cell vertices will be listed. Later, the vertex of</span></div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        <span class="comment">// the dangling faces will be removed from the list.</span></div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;        <span class="keywordtype">int</span> nCellVertices = cell.getVertexCount();</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellVertices; ++k) {</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;            <span class="keywordtype">long</span> vertexId = cell.getVertex(k);</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;            deadVertices.insert(vertexId);</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        }</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        <span class="comment">// List of interfaces to delete</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        <span class="comment">// All the interfaces will be deleted, this means that some of the</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        <span class="comment">// cells that are not deleted will have a face not donnected to</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        <span class="comment">// anything. This faces is called dangling face.</span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;        <span class="comment">//</span></div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;        <span class="comment">// The vertices of a dangling face has to be kept. Morover information</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;        <span class="comment">// about adjacencies and interfaces of a dangling cell needs to be</span></div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;        <span class="comment">// updated (it it not necessary to update those information for the</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        <span class="comment">// cells that will be deleted, because they are going to be removed).</span></div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        <span class="keywordtype">int</span> nCellInterfaces = cell.getInterfaceCount();</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">long</span> *interfaces = cell.getInterfaces();</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellInterfaces; ++k) {</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;            <span class="keywordtype">long</span> interfaceId = interfaces[k];</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;            <span class="keywordflow">if</span> (interfaceId &lt; 0) {</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            }</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;            <span class="comment">// Interfaces has to be considered just once</span></div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;            <span class="keywordflow">if</span> (deadInterfaces.count(interfaceId) &gt; 0) {</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            }</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;            <span class="comment">// Find if the owner or the neighbour of the interface will be</span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;            <span class="comment">// kept. An interface whose owner or neighbour will not be</span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;            <span class="comment">// deleted is called dangling.</span></div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;            Interface &amp;<span class="keyword">interface </span>= m_interfaces[interfaceId];</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;            <span class="keywordtype">int</span> danglingSide = -1;</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;            <span class="keywordflow">if</span> (!interface.isBorder()) {</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                <span class="keywordflow">if</span> (deadCells.count(interface.getOwner()) == 0) {</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;                    danglingSide = 0;</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;                } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (deadCells.count(interface.getNeigh()) == 0) {</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                    danglingSide = 1;</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                }</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;            }</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;            <span class="comment">// Handle dangling faces</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;            <span class="keywordflow">if</span> (danglingSide &gt;= 0) {</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;                <span class="comment">// Info on the dangling face</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                <span class="keywordtype">long</span> danglingCellId;</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                <span class="keywordtype">long</span> danglingNeighId;</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                <span class="keywordtype">int</span> danglingCellFace;</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;                <span class="keywordflow">if</span> (danglingSide == 0) {</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                    danglingCellId   = interface.getOwner();</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                    danglingNeighId  = interface.getNeigh();</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                    danglingCellFace = interface.getOwnerFace();</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                    danglingCellId   = interface.getNeigh();</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                    danglingNeighId  = interface.getOwner();</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                    danglingCellFace = interface.getNeighFace();</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                }</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                Cell &amp;danglingCell = m_cells[danglingCellId];</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                <span class="comment">// Since the dangling cell will not be deleted, we have to</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                <span class="comment">// updated its interface and adjacency data structures.</span></div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                <span class="keywordtype">int</span> cellInterfaceIndex = danglingCell.findInterface(danglingCellFace, interfaceId);</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                danglingCell.deleteInterface(danglingCellFace, cellInterfaceIndex);</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                <span class="keywordtype">int</span> cellAdjacencyIndex = danglingCell.findAdjacency(danglingCellFace, danglingNeighId);</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                danglingCell.deleteAdjacency(danglingCellFace, cellAdjacencyIndex);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                <span class="comment">// Add the face to the dangling face list</span></div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                danglingFaces.insert({{danglingCellId, danglingCellFace}});</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;            }</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;            <span class="comment">// Add the interface to the list of interfaces to delete</span></div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;            deadInterfaces.insert(interfaceId);</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;        }</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;        <span class="comment">// Delete cell</span></div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;        deleteCell(cellId);</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;    }</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    <span class="comment">// Delete the interfaces</span></div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> interfaceId : deadInterfaces) {</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8d2ddea450eb53fb4c1d19695836f1f8">VolumeKernel::deleteInterface</a>(interfaceId, <span class="keyword">false</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    }</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;    <span class="comment">// All the vertices belonging to the dangling cells has to be kept</span></div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="comment">//</span></div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="comment">// It&#39;s not enough to consider only the vertices on the dangling faces,</span></div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;    <span class="comment">// we have to consider the vertices of the whole cell. That&#39;s because</span></div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    <span class="comment">// we may need to keep vertices on the edges of the cell, and those</span></div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;    <span class="comment">// vertices may not be on interfaces of the dangling face</span></div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> FaceInfo &amp;danglingFaceInfo : danglingFaces) {</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;        <span class="keyword">const</span> Cell &amp;cell = m_cells[danglingFaceInfo.id];</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="comment">// Vertices of the face</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;        <span class="keyword">const</span> std::vector&lt;int&gt; &amp;localConnect = cellLocalFaceConnect[danglingFaceInfo.face];</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; nFaceVertices; ++n) {</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;            <span class="keywordtype">int</span> localVertexId = localConnect[n];</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;            <span class="keywordtype">long</span> vertexId = cell.getVertex(localVertexId);</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;            deadVertices.erase(vertexId);</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        }</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;        <span class="comment">// Vertices of all other interfaces of the cell</span></div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        <span class="keywordtype">int</span> nCellInterfaces = cell.getInterfaceCount();</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">long</span> *interfaces = cell.getInterfaces();</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nCellInterfaces; ++k) {</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;            <span class="keywordtype">long</span> interfaceId = interfaces[k];</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;            <span class="keywordflow">if</span> (interfaceId &lt; 0) {</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;            }</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;            <span class="keyword">const</span> Interface &amp;<span class="keyword">interface </span>= m_interfaces[interfaceId];</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> n = 0; n &lt; nFaceVertices; ++n) {</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                <span class="keywordtype">long</span> vertexId = interface.getVertex(n);</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                deadVertices.erase(vertexId);</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;            }</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        }</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;    }</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;    <span class="comment">// Delete the vertices</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> vertexId : deadVertices) {</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#afd674220b1f6a8dd4b24ee90e742e97c">VolumeKernel::deleteVertex</a>(vertexId, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;    }</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <span class="keywordflow">return</span> danglingFaces;</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;}</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;<span class="keywordtype">long</span> VolOctree::addVertex(uint32_t treeId)</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;{</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    <span class="comment">// Vertex coordinates</span></div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;    std::array&lt;double, 3&gt; nodeCoords = m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#afd328463fcc54f3494265b980cc3fea1">getNodeCoordinates</a>(treeId);</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    <span class="comment">// Create the vertex</span></div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    VertexIterator vertexIterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">VolumeKernel::addVertex</a>(std::move(nodeCoords));</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <span class="keywordflow">return</span> vertexIterator-&gt;getId();</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;}</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;<span class="keywordtype">long</span> VolOctree::addCell(OctantInfo octantInfo, std::unique_ptr&lt;<span class="keywordtype">long</span>[]&gt; &amp;vertices)</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;{</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <span class="comment">// Create the cell</span></div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;    <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">ElementInfo::Type</a> cellType;</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        cellType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">ElementInfo::VOXEL</a>;</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        cellType = <a class="code" href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">ElementInfo::PIXEL</a>;</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;    }</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    CellIterator cellIterator = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">VolumeKernel::addCell</a>(cellType, octantInfo.internal);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;    Cell &amp;cell = *cellIterator;</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;    <span class="keywordtype">long</span> <span class="keywordtype">id</span> = cell.getId();</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;    <span class="comment">// Connectivity</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    cell.setConnect(std::move(vertices));</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;    <span class="comment">// If the cell is a ghost set its owner</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (!octantInfo.internal) {</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;        uint64_t globalTreeId = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a42d33b287b9791508295306854224e15">getGhostGlobalIdx</a>(octantInfo.id);</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;        <span class="keywordtype">int</span> rank = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a719af14a03bdc2938e50a463a119f861">getOwnerRank</a>(globalTreeId);</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;        <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a6a2a19b2838306f5854e2347e44e06b7">setGhostOwner</a>(<span class="keywordtype">id</span>, rank, <span class="keyword">false</span>);</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;    }</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;    <span class="comment">// Update cell to octant mapping</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;        m_cellToOctant.insert({{id, octantInfo.id}});</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;        m_octantToCell.insert({{octantInfo.id, <span class="keywordtype">id</span>}});</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;        m_cellToGhost.insert({{id, octantInfo.id}});</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;        m_ghostToCell.insert({{octantInfo.id, <span class="keywordtype">id</span>}});</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;    }</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;    <span class="comment">// Done</span></div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;    <span class="keywordflow">return</span> id;</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;}</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;<span class="keywordtype">void</span> VolOctree::deleteCell(<span class="keywordtype">long</span> <span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;{</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;    <span class="comment">// Remove the information that link the cell to the octant</span></div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;    <span class="keywordtype">bool</span> interior = m_cells[id].isInterior();</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;    std::unordered_map&lt;long, uint32_t, Element::IdHasher&gt; *cellMap;</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;    <span class="keywordflow">if</span> (interior) {</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        cellMap = &amp;m_cellToOctant;</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;        cellMap = &amp;m_cellToGhost;</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;    }</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;    std::unordered_map&lt;long, uint32_t, Element::IdHasher&gt;::const_iterator cellItr = cellMap-&gt;find(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <span class="keywordflow">if</span> (cellItr != cellMap-&gt;end()) {</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;        <span class="comment">// Delete octant-to-cell entry</span></div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;        std::unordered_map&lt;uint32_t, long&gt; *octantMap;</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;        <span class="keywordflow">if</span> (interior) {</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;            octantMap = &amp;m_octantToCell;</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;            octantMap = &amp;m_ghostToCell;</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;        }</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        uint32_t treeId = cellItr-&gt;second;</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        octantMap-&gt;erase(treeId);</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        <span class="comment">// Delete cell-to-octant entry</span></div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;        cellMap-&gt;erase(cellItr);</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;    }</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;    <span class="comment">// Delete the cell</span></div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a67d8ab97043866d9acf98923a9aebe15">VolumeKernel::deleteCell</a>(<span class="keywordtype">id</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;}</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;</div>
<div class="line"><a name="l01344"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a4d3f8b18428f49d3b8d605e13c5f231a"> 1344</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a4d3f8b18428f49d3b8d605e13c5f231a">VolOctree::updateAdjacencies</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;cellIds, <span class="keywordtype">bool</span> resetAdjacencies)</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;{</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="comment">// Face information</span></div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;    <span class="keywordtype">int</span> nCellFaces = 2 * <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;    uint8_t oppositeFace[nCellFaces];</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#ab31024f062e38b051512aa37e77ad111">getOppface</a>(oppositeFace);</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;    <span class="comment">// Reset the adjacencies</span></div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;    <span class="keywordflow">if</span> (resetAdjacencies) {</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : cellIds) {</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;            m_cells[cellId].resetAdjacencies();</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;        }</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    }</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;    <span class="comment">// Sort the cells beased on their tree level</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;    <span class="keywordtype">int</span> maxLevel = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a4aeb2d5da7a56a1421e94447cb35b8b4">getMaxDepth</a>();</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <span class="keywordtype">size_t</span> averageSize = cellIds.size() / maxLevel;</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;    std::vector&lt;std::vector&lt;long&gt;&gt; hierarchicalCellIds(maxLevel + 1);</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> level = 0; level &lt;= maxLevel; ++level) {</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        hierarchicalCellIds[level].reserve(averageSize);</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;    }</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : cellIds) {</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;        <span class="keywordtype">int</span> cellLevel = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">getCellLevel</a>(cellId);</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;        hierarchicalCellIds[cellLevel].push_back(cellId);</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;    }</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;    <span class="comment">// Update the adjacencies</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;    FaceInfoSet processedFaces;</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;    processedFaces.reserve(cellIds.size() * <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>());</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> level = 0; level &lt;= maxLevel; ++level) {</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">long</span> cellId : hierarchicalCellIds[level]) {</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;            <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_cells[cellId];</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;            <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(cellId);</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> face = 0; face &lt; nCellFaces; ++face) {</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;                FaceInfo currentFaceInfo(cellId, face);</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;                <span class="keywordflow">if</span> (processedFaces.count(currentFaceInfo) &gt; 0) {</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;                    <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;                }</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;                <span class="comment">// Find cell neighbours</span></div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;                std::vector&lt;uint32_t&gt; neighTreeIds;</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;                std::vector&lt;bool&gt; neighGhostFlags;</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                    m_tree.findNeighbours(octantInfo.id, face, 1, neighTreeIds, neighGhostFlags);</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#ad541d13021eeaf0f4e0820df8bd33737">findGhostNeighbours</a>(octantInfo.id, face, 1, neighTreeIds, neighGhostFlags);</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;                }</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;                <span class="comment">// Set the adjacencies</span></div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;                <span class="comment">//</span></div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                <span class="comment">// Adjacencies will processed twice, once while processing the</span></div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                <span class="comment">// current cell, and once while processing the neighbour cell.</span></div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                <span class="comment">// However they will be set only once, because the function that</span></div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                <span class="comment">// insert the adjacency in the cell will insert only unique</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                <span class="comment">// adjacencies.</span></div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;                <span class="keywordtype">int</span> nNeighs = neighTreeIds.size();</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; nNeighs; ++k) {</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;                    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> neighOctantInfo(neighTreeIds[k], !neighGhostFlags[k]);</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;                    <span class="keywordtype">long</span> neighId = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(neighOctantInfo);</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;                    <span class="comment">// Set cell data</span></div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;                    cell.<a class="code" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">pushAdjacency</a>(face, neighId);</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;                    <span class="comment">// Set neighbour data</span></div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;                    <span class="keywordtype">int</span> neighFace = oppositeFace[face];</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;                    <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;neigh = m_cells[neighId];</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;                    neigh.<a class="code" href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">pushAdjacency</a>(neighFace, cellId);</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                    FaceInfo neighFaceInfo(neighId, neighFace);</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                    processedFaces.insert(neighFaceInfo);</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;                }</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;            }</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;        }</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;    }</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;}</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;</div>
<div class="line"><a name="l01427"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a639c24be93e574abe6ba25bbb6422a87"> 1427</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a639c24be93e574abe6ba25bbb6422a87">VolOctree::_markCellForRefinement</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;{</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <span class="keywordflow">return</span> set_marker(<span class="keywordtype">id</span>, 1);</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;}</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;</div>
<div class="line"><a name="l01437"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a64311c41895ccbd1f51769af9197cbd6"> 1437</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a64311c41895ccbd1f51769af9197cbd6">VolOctree::_markCellForCoarsening</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>)</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;{</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">return</span> set_marker(<span class="keywordtype">id</span>, -1);</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;}</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;<span class="keywordtype">bool</span> VolOctree::set_marker(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> int8_t &amp;value)</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;{</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;    OctantInfo octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keywordflow">if</span> (!octantInfo.internal) {</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;    }</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a0d210b4659cca3b083f6f07aa30577a7">setMarker</a>(octantInfo.id, value);</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;}</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;</div>
<div class="line"><a name="l01466"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a2d2b90a16ba5dd54f3de55675d697ca9"> 1466</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2d2b90a16ba5dd54f3de55675d697ca9">VolOctree::_enableCellBalancing</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enabled)</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;{</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;    <span class="keywordflow">if</span> (!octantInfo.internal) {</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    }</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#adb875937b6ccc0473c48b66b73bf13d9">setBalance</a>(octantInfo.id, enabled);</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;}</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;</div>
<div class="line"><a name="l01484"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8"> 1484</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8">VolOctree::isPointInside</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;{</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <span class="keywordflow">return</span> (m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a93f26e96858fa536e8ef97a95193176b">getPointOwner</a>(point) != <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;}</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;</div>
<div class="line"><a name="l01496"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#afdc3aa266ff8d2a7d9991c582a5d815c"> 1496</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8">VolOctree::isPointInside</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;{</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    <span class="keyword">const</span> <a class="code" href="classbitpit_1_1Cell.xhtml">Cell</a> &amp;cell = m_cells[id];</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    <span class="keywordtype">int</span> lowerLeftVertex  = 0;</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    <span class="keywordtype">int</span> upperRightVertex = <a class="code" href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a>(2, <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>()) - 1;</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    std::array&lt;double, 3&gt; lowerLeft  = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(lowerLeftVertex));</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;    std::array&lt;double, 3&gt; upperRight = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">getVertexCoords</a>(cell.<a class="code" href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">getVertex</a>(upperRightVertex));</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> EPS = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">getTol</a>();</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> d = 0; d &lt; 3; ++d){</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;        <span class="keywordflow">if</span> (point[d] &lt; lowerLeft[d] - EPS || point[d] &gt; upperRight[d] + EPS) {</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;        }</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    }</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;}</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;</div>
<div class="line"><a name="l01526"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a22fedca8b132b743770103e75842d2c1"> 1526</a></span>&#160;<span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a22fedca8b132b743770103e75842d2c1">VolOctree::locatePoint</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point)</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;{</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    <a class="code" href="classbitpit_1_1Octant.xhtml">Octant</a> *octant = m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a93f26e96858fa536e8ef97a95193176b">getPointOwner</a>(point);</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <span class="keywordflow">if</span> (m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a93f26e96858fa536e8ef97a95193176b">getPointOwner</a>(point) == <span class="keyword">nullptr</span>) {</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;        <span class="keywordflow">return</span> Element::NULL_ID;</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    }</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> octantInfo(m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#ae472f571eba613f76780933baacf0635">getIdx</a>(octant), <span class="keyword">true</span>);</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(octantInfo);</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;}</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;</div>
<div class="line"><a name="l01543"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#ac3cc8ba2e1f03b6d7de5516a814260c9"> 1543</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#ac3cc8ba2e1f03b6d7de5516a814260c9">VolOctree::_setTol</a>(<span class="keywordtype">double</span> tolerance)</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;{</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a937deb6033ec3e6266c2409cd3567747">setTol</a>(tolerance);</div>
<div class="line"><a name="l01546"></a><span class="lineno"> 1546</span>&#160;</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">VolumeKernel::_setTol</a>(tolerance);</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;}</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div>
<div class="line"><a name="l01553"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a64a8e5e394f0c34773eba601ebac3d01"> 1553</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a64a8e5e394f0c34773eba601ebac3d01">VolOctree::_resetTol</a>()</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;{</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a937deb6033ec3e6266c2409cd3567747">setTol</a>();</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    <span class="keywordtype">double</span> tolerance = m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#a2c26c8040d659917e40f6ab2d5d350b7">getTol</a>();</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">VolumeKernel::_setTol</a>(tolerance);</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;}</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;</div>
<div class="line"><a name="l01566"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a1447e8c1293f830324e8ba9427b21dff"> 1566</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a1447e8c1293f830324e8ba9427b21dff">VolOctree::translate</a>(std::array&lt;double, 3&gt; translation)</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;{</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a2e27cc9434afd76503f81f97d1583216">setOrigin</a>(m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#ac242e134fe72f4ae3455eec44411904e">getOrigin</a>() + translation);</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">VolumeKernel::translate</a>(translation);</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;}</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;</div>
<div class="line"><a name="l01578"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#ad416f15806d3f2eb2122e31ab7425e8d"> 1578</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#ad416f15806d3f2eb2122e31ab7425e8d">VolOctree::scale</a>(std::array&lt;double, 3&gt; scaling)</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;{</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;    <span class="keywordtype">bool</span> uniformScaling = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;    uniformScaling &amp;= (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(scaling[0] - scaling[1]) &gt; 1e-14);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;    uniformScaling &amp;= (<a class="code" href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">std::abs</a>(scaling[0] - scaling[2]) &gt; 1e-14);</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;    assert(uniformScaling);</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;    <span class="keywordflow">if</span> (!uniformScaling) {</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;        <a class="code" href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">log::cout</a>() &lt;&lt; <span class="stringliteral">&quot;octree patch only allows uniform scaling)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    }</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;    m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a3e0b3568169ffde855b407ddb8b2be21">setL</a>(m_tree.<a class="code" href="classbitpit_1_1PabloUniform.xhtml#a684935849a0c41136d0c48b7bca72d0d">getL</a>() * scaling[0]);</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;    initializeTreeGeometry();</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;    <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">VolumeKernel::scale</a>(scaling);</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;}</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;</div>
<div class="line"><a name="l01606"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#a4dcc79bac82b518439d1772e9f66f1aa"> 1606</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a4dcc79bac82b518439d1772e9f66f1aa">VolOctree::_findCellEdgeNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;edge, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;    assert(<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>());</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;        <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    }</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;    <span class="comment">// Get edge neighbours</span></div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;    <span class="keywordtype">int</span> codimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>() - 1;</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;    neighs = findCellCodimensionNeighs(<span class="keywordtype">id</span>, edge, codimension, blackList);</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;    <span class="comment">// Add face neighbours</span></div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> face : m_octantLocalFacesOnEdge[edge]) {</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;neigh : <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">_findCellFaceNeighs</a>(<span class="keywordtype">id</span>, face, blackList)) {</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neigh, neighs);</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;        }</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;    }</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;}</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;</div>
<div class="line"><a name="l01636"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml#af30fcfd3c169f4b2fd68c1f5345cc9fd"> 1636</a></span>&#160;std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#af30fcfd3c169f4b2fd68c1f5345cc9fd">VolOctree::_findCellVertexNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;vertex, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;    <span class="comment">// Get vertex neighbours</span></div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    <span class="keywordtype">int</span> codimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;    neighs = findCellCodimensionNeighs(<span class="keywordtype">id</span>, vertex, codimension, blackList);</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;    <span class="comment">// Add edge neighbours or face neighbours</span></div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">isThreeDimensional</a>()) {</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> edge : m_octantLocalEdgesOnVertex[vertex]) {</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;neigh : <a class="code" href="classbitpit_1_1VolOctree.xhtml#a4dcc79bac82b518439d1772e9f66f1aa">_findCellEdgeNeighs</a>(<span class="keywordtype">id</span>, edge, blackList)) {</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;                utils::addToOrderedVector&lt;long&gt;(neigh, neighs);</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;            }</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;        }</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> face : m_octantLocalFacesOnVertex[vertex]) {</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;neigh : <a class="code" href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">_findCellFaceNeighs</a>(<span class="keywordtype">id</span>, face, blackList)) {</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;                utils::addToOrderedVector&lt;long&gt;(neigh, neighs);</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;            }</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;        }</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;    }</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;}</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;std::vector&lt;long&gt; VolOctree::findCellCodimensionNeighs(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;index,</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;                                                       <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;codimension, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList)<span class="keyword"> const</span></div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;    std::vector&lt;long&gt; neighs;</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;    <span class="keywordtype">int</span> dimension = <a class="code" href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">getDimension</a>();</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;    <span class="keywordflow">if</span> (codimension &gt; dimension || codimension &lt;= 0) {</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;        <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;    }</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;    OctantInfo octantInfo = <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;    std::vector&lt;uint32_t&gt; neighTreeIds;</div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;    std::vector&lt;bool&gt; neighGhostFlags;</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;    <span class="keywordflow">if</span> (octantInfo.internal) {</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;        m_tree.findNeighbours(octantInfo.id, index, codimension, neighTreeIds, neighGhostFlags);</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;        m_tree.<a class="code" href="classbitpit_1_1ParaTree.xhtml#ad541d13021eeaf0f4e0820df8bd33737">findGhostNeighbours</a>(octantInfo.id, index, codimension, neighTreeIds, neighGhostFlags);</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;    }</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;    <span class="keywordtype">int</span> nNeighs = neighTreeIds.size();</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; nNeighs; ++i) {</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;        OctantInfo neighOctantInfo(neighTreeIds[i], !neighGhostFlags[i]);</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;        <span class="keywordtype">long</span> neighId = <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(neighOctantInfo);</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;        <span class="keywordflow">if</span> (std::find(blackList.begin(), blackList.end(), neighId) == blackList.end()) {</div>
<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;            utils::addToOrderedVector&lt;long&gt;(neighId, neighs);</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;        }</div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;    }</div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;</div>
<div class="line"><a name="l01703"></a><span class="lineno"> 1703</span>&#160;    <span class="keywordflow">return</span> neighs;</div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;}</div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;}</div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a618377c0340d7e68a0ab2572275a5242"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a618377c0340d7e68a0ab2572275a5242">bitpit::PatchKernel::addCell</a></div><div class="ttdeci">CellIterator addCell(ElementInfo::Type type, const long &amp;id=Element::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01279">patch_kernel.cpp:1279</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a778768bc1cea5e66f99b9bd8414f8583"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a778768bc1cea5e66f99b9bd8414f8583">bitpit::PatchKernel::translate</a></div><div class="ttdeci">virtual void translate(std::array&lt; double, 3 &gt; translation)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03309">patch_kernel.cpp:3309</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5a23374e8cac5ebfe46acf6e6b3400e8"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5a23374e8cac5ebfe46acf6e6b3400e8">bitpit::PatchKernel::updateInterfaces</a></div><div class="ttdeci">virtual void updateInterfaces(const std::vector&lt; long &gt; &amp;cellIds, bool resetInterfaces=true)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02843">patch_kernel.cpp:2843</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a42d33b287b9791508295306854224e15"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a42d33b287b9791508295306854224e15">bitpit::ParaTree::getGhostGlobalIdx</a></div><div class="ttdeci">uint64_t getGhostGlobalIdx(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00991">ParaTree.cpp:991</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_a35043572b022d41c46f802d6485e668d"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#a35043572b022d41c46f802d6485e668d">bitpit::Interface::getOwner</a></div><div class="ttdeci">long getOwner() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00220">interface.cpp:220</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a639c24be93e574abe6ba25bbb6422a87"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a639c24be93e574abe6ba25bbb6422a87">bitpit::VolOctree::_markCellForRefinement</a></div><div class="ttdeci">bool _markCellForRefinement(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01427">voloctree.cpp:1427</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9a3a1edd7b839b26f6be70985d9f0931"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9a3a1edd7b839b26f6be70985d9f0931">bitpit::PatchKernel::addVertex</a></div><div class="ttdeci">VertexIterator addVertex(const std::array&lt; double, 3 &gt; &amp;coords, const long &amp;id=Vertex::NULL_ID)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00685">patch_kernel.cpp:685</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_abb0763840b53491d1c16b99973eb8bf7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#abb0763840b53491d1c16b99973eb8bf7">bitpit::PatchKernel::clearGhostOwners</a></div><div class="ttdeci">void clearGhostOwners(bool updateExchangeData=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00496">patch_kernel_parallel.cpp:496</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_ac242e134fe72f4ae3455eec44411904e"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#ac242e134fe72f4ae3455eec44411904e">bitpit::PabloUniform::getOrigin</a></div><div class="ttdeci">darray3 getOrigin()</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00111">PabloUniform.cpp:111</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ae28ec9687875e8032b8f2696fd6b8bf9"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ae28ec9687875e8032b8f2696fd6b8bf9">bitpit::PatchKernel::getDimension</a></div><div class="ttdeci">int getDimension() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00551">patch_kernel.cpp:551</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a6a2a19b2838306f5854e2347e44e06b7"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a6a2a19b2838306f5854e2347e44e06b7">bitpit::PatchKernel::setGhostOwner</a></div><div class="ttdeci">void setGhostOwner(int id, int rank, bool updateExchangeData=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00452">patch_kernel_parallel.cpp:452</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_a3e0b3568169ffde855b407ddb8b2be21"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#a3e0b3568169ffde855b407ddb8b2be21">bitpit::PabloUniform::setL</a></div><div class="ttdeci">void setL(double L)</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00151">PabloUniform.cpp:151</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a41d99b9833493d8b18bf927418bf7598"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a41d99b9833493d8b18bf927418bf7598">bitpit::ParaTree::computeConnectivity</a></div><div class="ttdeci">void computeConnectivity()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02792">ParaTree.cpp:2792</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a719af14a03bdc2938e50a463a119f861"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a719af14a03bdc2938e50a463a119f861">bitpit::ParaTree::getOwnerRank</a></div><div class="ttdeci">int getOwnerRank(const uint64_t &amp;globalIdx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02774">ParaTree.cpp:2774</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_adb875937b6ccc0473c48b66b73bf13d9"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#adb875937b6ccc0473c48b66b73bf13d9">bitpit::ParaTree::setBalance</a></div><div class="ttdeci">void setBalance(uint32_t idx, bool balance)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01026">ParaTree.cpp:1026</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ad1e63f17f26ffb931517a252a23047a1"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ad1e63f17f26ffb931517a252a23047a1">bitpit::PatchKernel::getTol</a></div><div class="ttdeci">double getTol() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03410">patch_kernel.cpp:3410</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a234a7e3bb6fdb72c14d6cdcaafda8395"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a234a7e3bb6fdb72c14d6cdcaafda8395">bitpit::ParaTree::adapt</a></div><div class="ttdeci">bool adapt(bool mapper_flag=false)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02515">ParaTree.cpp:2515</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ac3cc8ba2e1f03b6d7de5516a814260c9"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ac3cc8ba2e1f03b6d7de5516a814260c9">bitpit::VolOctree::_setTol</a></div><div class="ttdeci">void _setTol(double tolerance)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01543">voloctree.cpp:1543</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_ac588184ef6e5d280a963a0fde8dcbdd3"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#ac588184ef6e5d280a963a0fde8dcbdd3">bitpit::PatchKernel::getVertexCoords</a></div><div class="ttdeci">const std::array&lt; double, 3 &gt; &amp; getVertexCoords(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01007">patch_kernel.cpp:1007</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ad416f15806d3f2eb2122e31ab7425e8d"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ad416f15806d3f2eb2122e31ab7425e8d">bitpit::VolOctree::scale</a></div><div class="ttdeci">void scale(std::array&lt; double, 3 &gt; scaling)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01578">voloctree.cpp:1578</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a1447e8c1293f830324e8ba9427b21dff"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a1447e8c1293f830324e8ba9427b21dff">bitpit::VolOctree::translate</a></div><div class="ttdeci">void translate(std::array&lt; double, 3 &gt; translation)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01566">voloctree.cpp:1566</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_a93f26e96858fa536e8ef97a95193176b"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#a93f26e96858fa536e8ef97a95193176b">bitpit::PabloUniform::getPointOwner</a></div><div class="ttdeci">Octant * getPointOwner(darray3 point)</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00729">PabloUniform.cpp:729</a></div></div>
<div class="ttc" id="namespacebitpit_1_1adaption_xhtml_acd94e1004d190c95756c226592e13d72"><div class="ttname"><a href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">bitpit::adaption::Type</a></div><div class="ttdeci">Type</div><div class="ttdoc">The Type enum defines the type of adaption that has been performed. </div><div class="ttdef"><b>Definition:</b> <a href="adaption_8hpp_source.xhtml#l00036">adaption.hpp:36</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_afd674220b1f6a8dd4b24ee90e742e97c"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#afd674220b1f6a8dd4b24ee90e742e97c">bitpit::PatchKernel::deleteVertex</a></div><div class="ttdeci">bool deleteVertex(const long &amp;id, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00750">patch_kernel.cpp:750</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_aa83578acd9b5aada55a02fa2caf7238b"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#aa83578acd9b5aada55a02fa2caf7238b">bitpit::PatchKernel::getRank</a></div><div class="ttdeci">int getRank() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00129">patch_kernel_parallel.cpp:129</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a64311c41895ccbd1f51769af9197cbd6"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a64311c41895ccbd1f51769af9197cbd6">bitpit::VolOctree::_markCellForCoarsening</a></div><div class="ttdeci">bool _markCellForCoarsening(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01437">voloctree.cpp:1437</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ab5eefb77131bd2b33f52def7566bc2b7"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ab5eefb77131bd2b33f52def7566bc2b7">bitpit::VolOctree::VolOctree</a></div><div class="ttdeci">VolOctree(const int &amp;id, const int &amp;dimension, std::array&lt; double, 3 &gt; origin, double length, double dh)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00064">voloctree.cpp:64</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a0d210b4659cca3b083f6f07aa30577a7"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a0d210b4659cca3b083f6f07aa30577a7">bitpit::ParaTree::setMarker</a></div><div class="ttdeci">void setMarker(uint32_t idx, int8_t marker)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01017">ParaTree.cpp:1017</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a80fce164ad5e6920f538298d9117e3b2"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">bitpit::VolOctree::getCellLevel</a></div><div class="ttdeci">int getCellLevel(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00351">voloctree.cpp:351</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a1ec9d99b50a6bc6326191fba0210c646"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a1ec9d99b50a6bc6326191fba0210c646">bitpit::PatchKernel::_findCellFaceNeighs</a></div><div class="ttdeci">virtual std::vector&lt; long &gt; _findCellFaceNeighs(const long &amp;id, const int &amp;face, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01787">patch_kernel.cpp:1787</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_ab4d8b1dc243f613f68eedc38a941cef2"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#ab4d8b1dc243f613f68eedc38a941cef2">bitpit::PabloUniform::getCenter</a></div><div class="ttdeci">void getCenter(uint32_t idx, darray3 &amp;center)</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00266">PabloUniform.cpp:266</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_adc3114ce50826ca33118ce55b4e1fee8"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8">bitpit::VolOctree::isPointInside</a></div><div class="ttdeci">bool isPointInside(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01484">voloctree.cpp:1484</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_aedea46c7857bffcebb567995285d40db"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#aedea46c7857bffcebb567995285d40db">bitpit::ParaTree::getNumOctants</a></div><div class="ttdeci">uint32_t getNumOctants() const </div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01390">ParaTree.cpp:1390</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a937deb6033ec3e6266c2409cd3567747"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a937deb6033ec3e6266c2409cd3567747">bitpit::ParaTree::setTol</a></div><div class="ttdeci">void setTol(double tol=1.0e-14)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00655">ParaTree.cpp:655</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_abd3d7ef0b19fa4e79d13f7c038ac3186"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#abd3d7ef0b19fa4e79d13f7c038ac3186">bitpit::VolOctree::evalInterfaceArea</a></div><div class="ttdeci">double evalInterfaceArea(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00235">voloctree.cpp:235</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8d2ddea450eb53fb4c1d19695836f1f8"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8d2ddea450eb53fb4c1d19695836f1f8">bitpit::PatchKernel::deleteInterface</a></div><div class="ttdeci">bool deleteInterface(const long &amp;id, bool updateNeighs=true, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02311">patch_kernel.cpp:2311</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml">bitpit::Interface</a></div><div class="ttdoc">The Interface class defines the interfaces among cells. </div><div class="ttdef"><b>Definition:</b> <a href="interface_8hpp_source.xhtml#l00037">interface.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314afee97e8a97cb04d2f1bf413f5a04bace">bitpit::ElementInfo::LINE</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00049">element.hpp:49</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a5b3fca22041b1081dcd5cecfc2e46b0f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a5b3fca22041b1081dcd5cecfc2e46b0f">bitpit::PatchKernel::_setTol</a></div><div class="ttdeci">virtual void _setTol(double tolerance)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03400">patch_kernel.cpp:3400</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a79732d79d809a863e4f8b918154da561"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a79732d79d809a863e4f8b918154da561">bitpit::ParaTree::getNumGhosts</a></div><div class="ttdeci">uint32_t getNumGhosts() const </div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01398">ParaTree.cpp:1398</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_afb007fe22f8e4450f81e57508ddea43b"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#afb007fe22f8e4450f81e57508ddea43b">bitpit::ParaTree::getGhostOctant</a></div><div class="ttdeci">Octant * getGhostOctant(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01748">ParaTree.cpp:1748</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga6da0697577be6fda9b574b2344c58014"><div class="ttname"><a href="group__MathFunctions.xhtml#ga6da0697577be6fda9b574b2344c58014">pow</a></div><div class="ttdeci">std::array&lt; T, d &gt; pow(std::array&lt; T, d &gt; &amp;x, double p)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00637">MathOperators_array.tpp:637</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_abd350ce466388cc48e2a3879d472065b"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#abd350ce466388cc48e2a3879d472065b">bitpit::VolOctree::getTree</a></div><div class="ttdeci">PabloUniform &amp; getTree()</div><div class="ttdoc">Gets a reference to the octree associated with the patch. </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00282">voloctree.cpp:282</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a10ed404b82509d3f59fd60b0d4cc8c8c"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a10ed404b82509d3f59fd60b0d4cc8c8c">bitpit::VolOctree::evalInterfaceNormal</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; evalInterfaceNormal(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00250">voloctree.cpp:250</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a21f33ddf3dcd1824484348286b4cda63"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a21f33ddf3dcd1824484348286b4cda63">bitpit::PatchKernel::setExpert</a></div><div class="ttdeci">void setExpert(bool expert)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00492">patch_kernel.cpp:492</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a3f366837c2cc93ec757c533813b1ebea"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a3f366837c2cc93ec757c533813b1ebea">bitpit::PatchKernel::getCellCount</a></div><div class="ttdeci">virtual long getCellCount() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01017">patch_kernel.cpp:1017</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_aaa305d49584ec25f5ec8d184e62ba5dd"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#aaa305d49584ec25f5ec8d184e62ba5dd">bitpit::ParaTree::getMorton</a></div><div class="ttdeci">uint64_t getMorton(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00869">ParaTree.cpp:869</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a9a924c83cf4f7d96da91ecf1f4f58ebf"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a9a924c83cf4f7d96da91ecf1f4f58ebf">bitpit::VolOctree::evalCellSize</a></div><div class="ttdeci">double evalCellSize(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00222">voloctree.cpp:222</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ac6ca61c71806c0d2ca8f7a46d48909c4"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ac6ca61c71806c0d2ca8f7a46d48909c4">bitpit::VolOctree::_updateAdaption</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; _updateAdaption(bool trackAdaption)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00371">voloctree.cpp:371</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a2c26c8040d659917e40f6ab2d5d350b7"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a2c26c8040d659917e40f6ab2d5d350b7">bitpit::ParaTree::getTol</a></div><div class="ttdeci">double getTol()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00629">ParaTree.cpp:629</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml">bitpit::PabloUniform</a></div><div class="ttdoc">PABLO Uniform is an example of user class derived from ParaTree to map ParaTree in a uniform (square/...</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8hpp_source.xhtml#l00062">PabloUniform.hpp:62</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a317d53c60ef19408d789d7b2c08b3760"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a317d53c60ef19408d789d7b2c08b3760">bitpit::ElementInfo::getElementInfo</a></div><div class="ttdeci">static const ElementInfo &amp; getElementInfo(ElementInfo::Type type)</div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l00218">element.cpp:218</a></div></div>
<div class="ttc" id="structbitpit_1_1VolOctree_1_1OctantInfo_xhtml"><div class="ttname"><a href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">bitpit::VolOctree::OctantInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8hpp_source.xhtml#l00050">voloctree.hpp:50</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a1307e35d8af0f03cb69f7e099c2c478d"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a1307e35d8af0f03cb69f7e099c2c478d">bitpit::ParaTree::getConnectivity</a></div><div class="ttdeci">const u32vector2D &amp; getConnectivity()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02815">ParaTree.cpp:2815</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a6ffebc73d993ac8711c0efc04435d944"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a6ffebc73d993ac8711c0efc04435d944">bitpit::ParaTree::getLevel</a></div><div class="ttdeci">uint8_t getLevel(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00860">ParaTree.cpp:860</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a8b4356bb02c54e12da168e7fa534be8f"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a8b4356bb02c54e12da168e7fa534be8f">bitpit::PatchKernel::isThreeDimensional</a></div><div class="ttdeci">bool isThreeDimensional() const </div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l00562">patch_kernel.cpp:562</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a8db3fefc682242c999cd2a8f6b9d36e3"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a8db3fefc682242c999cd2a8f6b9d36e3">bitpit::VolOctree::evalCellVolume</a></div><div class="ttdeci">double evalCellVolume(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00189">voloctree.cpp:189</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml">bitpit::Cell</a></div><div class="ttdoc">The Cell class defines the cells. </div><div class="ttdef"><b>Definition:</b> <a href="cell_8hpp_source.xhtml#l00044">cell.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_af89310e69dbcdd20e131e7bc51c3ef06"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">bitpit::VolOctree::getCellOctant</a></div><div class="ttdeci">OctantInfo getCellOctant(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00264">voloctree.cpp:264</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a85b5cb10454acec56e4a32d8ca08b242"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">bitpit::VolOctree::getOctantId</a></div><div class="ttdeci">long getOctantId(const OctantInfo &amp;octantInfo) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00293">voloctree.cpp:293</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_a684935849a0c41136d0c48b7bca72d0d"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#a684935849a0c41136d0c48b7bca72d0d">bitpit::PabloUniform::getL</a></div><div class="ttdeci">double getL()</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00143">PabloUniform.cpp:143</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_afd328463fcc54f3494265b980cc3fea1"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#afd328463fcc54f3494265b980cc3fea1">bitpit::PabloUniform::getNodeCoordinates</a></div><div class="ttdeci">darray3 getNodeCoordinates(uint32_t inode)</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00784">PabloUniform.cpp:784</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a18ea1060724ddcd0a5fd25ee507b2f05"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a18ea1060724ddcd0a5fd25ee507b2f05">bitpit::ParaTree::clearConnectivity</a></div><div class="ttdeci">void clearConnectivity()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02799">ParaTree.cpp:2799</a></div></div>
<div class="ttc" id="classbitpit_1_1Interface_xhtml_ab119e1a1ca2b9e8ea242fc4c1cb18f07"><div class="ttname"><a href="classbitpit_1_1Interface.xhtml#ab119e1a1ca2b9e8ea242fc4c1cb18f07">bitpit::Interface::getOwnerFace</a></div><div class="ttdeci">int getOwnerFace() const </div><div class="ttdef"><b>Definition:</b> <a href="interface_8cpp_source.xhtml#l00230">interface.cpp:230</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a4aeb2d5da7a56a1421e94447cb35b8b4"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a4aeb2d5da7a56a1421e94447cb35b8b4">bitpit::ParaTree::getMaxDepth</a></div><div class="ttdeci">uint8_t getMaxDepth() const </div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02728">ParaTree.cpp:2728</a></div></div>
<div class="ttc" id="classbitpit_1_1Cell_xhtml_a703f2ce12319b53c6804c5d0b54a0ca1"><div class="ttname"><a href="classbitpit_1_1Cell.xhtml#a703f2ce12319b53c6804c5d0b54a0ca1">bitpit::Cell::pushAdjacency</a></div><div class="ttdeci">void pushAdjacency(const int &amp;face, const long &amp;adjacency)</div><div class="ttdef"><b>Definition:</b> <a href="cell_8cpp_source.xhtml#l00496">cell.cpp:496</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a140b6502bf890c117227aaab9a444804"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a140b6502bf890c117227aaab9a444804">bitpit::PatchKernel::scale</a></div><div class="ttdeci">virtual void scale(std::array&lt; double, 3 &gt; scaling)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l03342">patch_kernel.cpp:3342</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a2eff54ce1a781fe3844e6bcc698a03bc"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a2eff54ce1a781fe3844e6bcc698a03bc">bitpit::ParaTree::getOctant</a></div><div class="ttdeci">Octant * getOctant(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01736">ParaTree.cpp:1736</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_ad541d13021eeaf0f4e0820df8bd33737"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#ad541d13021eeaf0f4e0820df8bd33737">bitpit::ParaTree::findGhostNeighbours</a></div><div class="ttdeci">void findGhostNeighbours(uint32_t idx, uint8_t iface, uint8_t codim, u32vector &amp;neighbours) const </div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01904">ParaTree.cpp:1904</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314aa47bb638838f02d8df2c540aeb4a29b7">bitpit::ElementInfo::PIXEL</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00052">element.hpp:52</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga119be619426d7a672ab67296a32f04e9"><div class="ttname"><a href="group__MathFunctions.xhtml#ga119be619426d7a672ab67296a32f04e9">max</a></div><div class="ttdeci">std::array&lt; T, d &gt; max(const std::array&lt; T, d &gt; &amp;x, const std::array&lt; T, d &gt; &amp;y)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00306">MathOperators_array.tpp:306</a></div></div>
<div class="ttc" id="classbitpit_1_1Octant_xhtml"><div class="ttname"><a href="classbitpit_1_1Octant.xhtml">bitpit::Octant</a></div><div class="ttdoc">Octant class definition. </div><div class="ttdef"><b>Definition:</b> <a href="Octant_8hpp_source.xhtml#l00079">Octant.hpp:79</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_af30fcfd3c169f4b2fd68c1f5345cc9fd"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#af30fcfd3c169f4b2fd68c1f5345cc9fd">bitpit::VolOctree::_findCellVertexNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellVertexNeighs(const long &amp;id, const int &amp;vertex, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01636">voloctree.cpp:1636</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314">bitpit::ElementInfo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00046">element.hpp:46</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a200a8a6089ed396cd699b606a6b4bb9b"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a200a8a6089ed396cd699b606a6b4bb9b">bitpit::ParaTree::getSentIdx</a></div><div class="ttdeci">const std::unordered_map&lt; int, std::array&lt; uint32_t, 4 &gt; &gt; &amp; getSentIdx()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01796">ParaTree.cpp:1796</a></div></div>
<div class="ttc" id="group__MathFunctions_xhtml_ga4ec6338e8f898ec64973b2e7eb886ac7"><div class="ttname"><a href="group__MathFunctions.xhtml#ga4ec6338e8f898ec64973b2e7eb886ac7">abs</a></div><div class="ttdeci">std::array&lt; T, d &gt; abs(const std::array&lt; T, d &gt; &amp;x)</div><div class="ttdef"><b>Definition:</b> <a href="MathOperators__array_8tpp_source.xhtml#l00591">MathOperators_array.tpp:591</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a2d2b90a16ba5dd54f3de55675d697ca9"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a2d2b90a16ba5dd54f3de55675d697ca9">bitpit::VolOctree::_enableCellBalancing</a></div><div class="ttdeci">bool _enableCellBalancing(const long &amp;id, bool enabled)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01466">voloctree.cpp:1466</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a64a8e5e394f0c34773eba601ebac3d01"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a64a8e5e394f0c34773eba601ebac3d01">bitpit::VolOctree::_resetTol</a></div><div class="ttdeci">void _resetTol()</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01553">voloctree.cpp:1553</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a61e270b61e5d025d4ba73ab9624de62d"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a61e270b61e5d025d4ba73ab9624de62d">bitpit::ParaTree::getMaxLevel</a></div><div class="ttdeci">int getMaxLevel()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00408">ParaTree.cpp:408</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_aae044991bf24466248d94db58fc78176"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#aae044991bf24466248d94db58fc78176">bitpit::ParaTree::getIsNewR</a></div><div class="ttdeci">bool getIsNewR(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00925">ParaTree.cpp:925</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a4dcc79bac82b518439d1772e9f66f1aa"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a4dcc79bac82b518439d1772e9f66f1aa">bitpit::VolOctree::_findCellEdgeNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellEdgeNeighs(const long &amp;id, const int &amp;edge, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01606">voloctree.cpp:1606</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a4d3f8b18428f49d3b8d605e13c5f231a"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a4d3f8b18428f49d3b8d605e13c5f231a">bitpit::VolOctree::updateAdjacencies</a></div><div class="ttdeci">void updateAdjacencies(const std::vector&lt; long &gt; &amp;cellIds, bool resetAdjacencies=true)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01344">voloctree.cpp:1344</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_a7eb56df83ee7f033f828af5315e96201"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#a7eb56df83ee7f033f828af5315e96201">bitpit::ParaTree::getIsNewC</a></div><div class="ttdeci">bool getIsNewC(uint32_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00934">ParaTree.cpp:934</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_ab31024f062e38b051512aa37e77ad111"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#ab31024f062e38b051512aa37e77ad111">bitpit::ParaTree::getOppface</a></div><div class="ttdeci">void getOppface(uint8_t oppface[6])</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l00478">ParaTree.cpp:478</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_ad7eff9500a3dcc91ac47a2e2a9a553d0"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#ad7eff9500a3dcc91ac47a2e2a9a553d0">bitpit::ParaTree::getGhostConnectivity</a></div><div class="ttdeci">const u32vector2D &amp; getGhostConnectivity()</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l02869">ParaTree.cpp:2869</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a22fedca8b132b743770103e75842d2c1"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a22fedca8b132b743770103e75842d2c1">bitpit::VolOctree::locatePoint</a></div><div class="ttdeci">long locatePoint(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01526">voloctree.cpp:1526</a></div></div>
<div class="ttc" id="classbitpit_1_1ElementInfo_xhtml_a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26"><div class="ttname"><a href="classbitpit_1_1ElementInfo.xhtml#a36e5066a1792c06c621c565a9b5fa314ae8015dc104c5762a7f1ce41eb18ffc26">bitpit::ElementInfo::VOXEL</a></div><div class="ttdef"><b>Definition:</b> <a href="element_8hpp_source.xhtml#l00055">element.hpp:55</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a67d8ab97043866d9acf98923a9aebe15"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a67d8ab97043866d9acf98923a9aebe15">bitpit::PatchKernel::deleteCell</a></div><div class="ttdeci">bool deleteCell(const long &amp;id, bool updateNeighs=true, bool delayed=false)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l01426">patch_kernel.cpp:1426</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml">bitpit::VolumeKernel</a></div><div class="ttdoc">The VolumeKernel class provides an interface for defining volume patches. </div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8hpp_source.xhtml#l00032">volume_kernel.hpp:32</a></div></div>
<div class="ttc" id="namespacebitpit_1_1log_xhtml_ac9c385c32dc5a0331c601b1b07ab9952"><div class="ttname"><a href="namespacebitpit_1_1log.xhtml#ac9c385c32dc5a0331c601b1b07ab9952">bitpit::log::cout</a></div><div class="ttdeci">Logger &amp; cout()</div><div class="ttdef"><b>Definition:</b> <a href="logger_8cpp_source.xhtml#l01280">logger.cpp:1280</a></div></div>
<div class="ttc" id="classbitpit_1_1ParaTree_xhtml_ae472f571eba613f76780933baacf0635"><div class="ttname"><a href="classbitpit_1_1ParaTree.xhtml#ae472f571eba613f76780933baacf0635">bitpit::ParaTree::getIdx</a></div><div class="ttdeci">uint32_t getIdx(Octant *oct)</div><div class="ttdef"><b>Definition:</b> <a href="ParaTree_8cpp_source.xhtml#l01314">ParaTree.cpp:1314</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a353e616c402bb91bfb6e5094d7fc5bfb"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a353e616c402bb91bfb6e5094d7fc5bfb">bitpit::VolOctree::evalCellCentroid</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; evalCellCentroid(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00202">voloctree.cpp:202</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_a9bf127dcd0f5233355f3dc1096c735a2"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#a9bf127dcd0f5233355f3dc1096c735a2">bitpit::PatchKernel::buildGhostExchangeData</a></div><div class="ttdeci">void buildGhostExchangeData()</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel__parallel_8cpp_source.xhtml#l00534">patch_kernel_parallel.cpp:534</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml_a2e27cc9434afd76503f81f97d1583216"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml#a2e27cc9434afd76503f81f97d1583216">bitpit::PabloUniform::setOrigin</a></div><div class="ttdeci">void setOrigin(darray3 origin)</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8cpp_source.xhtml#l00159">PabloUniform.cpp:159</a></div></div>
<div class="ttc" id="classbitpit_1_1Element_xhtml_a611e1742519f6391eb9a80433dabb83a"><div class="ttname"><a href="classbitpit_1_1Element.xhtml#a611e1742519f6391eb9a80433dabb83a">bitpit::Element::getVertex</a></div><div class="ttdeci">long getVertex(const int &amp;vertex) const </div><div class="ttdef"><b>Definition:</b> <a href="element_8cpp_source.xhtml#l01272">element.cpp:1272</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a2f1fb0fa33f6376c1c87b0419a725190"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">bitpit::VolOctree::getOctantConnect</a></div><div class="ttdeci">const std::vector&lt; uint32_t &gt; &amp; getOctantConnect(const OctantInfo &amp;octantInfo)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00317">voloctree.cpp:317</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>

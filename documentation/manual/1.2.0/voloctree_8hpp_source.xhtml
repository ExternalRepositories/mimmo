
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta name="description" content="bitpit is a C++ library for scientific High Performance Computing." />
    <meta name="keywords" content="bitpit, HPC, octree, PABLO, levelset, RBF, mesh, grid" />
    <link rel="shortcut icon" href="/bitpit-private/images/bitpit_icon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/normalize.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/base.css" />
    <link rel="stylesheet" type="text/css" href="/bitpit-private/stylesheets/slideshow.css" />
    <script type="text/javascript" src="/bitpit-private/scripts/jquery-1.12.4.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function(){
        });
    </script>
    <meta name="generator" content="Doxygen 1.8.5"/>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="manual.css" rel="stylesheet" type="text/css"/>
    <title>bitpit - Manual - src/voloctree/voloctree.hpp Source File</title>
</head>
<body>
<!-- Header-->
<div id="header" class="">
    <div class="logo"><a href="/bitpit-private">bitpit</a></div>
    <div class="menu-line"></div>
<ul class="menu">
    <li>
        <span>Modules</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/modules/overview.html">Overview</a></li>
            <li><a href="/bitpit-private/modules/PABLO.html">PABLO</a></li>
            <li><a href="/bitpit-private/modules/RBF.html">RBF</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/examples">Examples</a>
    </li>
    <li class="current">
        <span>Documentation</span>
        <ul class="sub-menu">
            <li><a href="/bitpit-private/documentation/installation.html">Installation guide</a></li>
            <li><a href="/bitpit-private/documentation/manual/1.2.0/index.xhtml">Programmer's manual</a></li>
        </ul>
    </li>
    <li>
        <a href="/bitpit-private/downloads">Downloads</a>
    </li>
</ul>
<script type="text/javascript">
$('.menu li').hover(
    function() {
        $('ul', this).css('height', 'auto');
        $('ul', this).stop().slideDown(200);
    },
    function() {
        $('ul', this).stop().slideUp(200, function() {
            $(this).attr('style','');
        });
    }
);
</script>
</div>
<div id="content" class="">
<div id="manual">
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_0eef72754324b964e7b10b5133407dd0.xhtml">voloctree</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">voloctree.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*---------------------------------------------------------------------------*\</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *  bitpit</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *  Copyright (C) 2015-2016 OPTIMAD engineering Srl</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> *  -------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *  License</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *  This file is part of bitbit.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> *  bitpit is free software: you can redistribute it and/or modify it</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *  under the terms of the GNU Lesser General Public License v3 (LGPL)</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *  as published by the Free Software Foundation.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *  bitpit is distributed in the hope that it will be useful, but WITHOUT</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *  License for more details.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  You should have received a copy of the GNU Lesser General Public License</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  along with bitpit. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">\*---------------------------------------------------------------------------*/</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef __BITPIT_VOLOCTREE_HPP__</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define __BITPIT_VOLOCTREE_HPP__</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;bitpit_PABLO.hpp&quot;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;bitpit_patchkernel.hpp&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span>bitpit {</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="structbitpit_1_1OctreeLevelInfo.xhtml">   37</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structbitpit_1_1OctreeLevelInfo.xhtml">OctreeLevelInfo</a>{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">int</span>    level;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">double</span> h;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordtype">double</span> area;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">double</span> volume;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;};</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classbitpit_1_1VolOctree.xhtml">   44</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbitpit_1_1VolOctree.xhtml">VolOctree</a> : <span class="keyword">public</span> <a class="code" href="classbitpit_1_1VolumeKernel.xhtml">VolumeKernel</a> {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">using</span> <a class="code" href="classbitpit_1_1VolumeKernel.xhtml#a7726692acedc30fb4a4b4667e7dcdec7">VolumeKernel::isPointInside</a>;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">using</span> <a class="code" href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">PatchKernel::locatePoint</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">   50</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> {</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a>() : id(0), <span class="keyword">internal</span>(<span class="keyword">true</span>) {};</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a>(uint32_t _id, <span class="keywordtype">bool</span> _internal) : id(_id), <span class="keyword">internal</span>(_internal) {};</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> &amp;other)<span class="keyword"> const</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">return</span> (<span class="keywordtype">id</span> == other.id &amp;&amp; <span class="keyword">internal</span> == other.internal);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        uint32_t id;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordtype">bool</span> <span class="keyword">internal</span>;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    };</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="structbitpit_1_1VolOctree_1_1OctantInfoHasher.xhtml">   63</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfoHasher.xhtml">OctantInfoHasher</a></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="comment">// We can just use the id for the hash, beacuse only two different</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="comment">// octants can be assigned to the same id: the internal octant and</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="comment">// the ghost octant. It&#39;s not worth including the ghost flag in the</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="comment">// hash.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        std::size_t operator()(<span class="keyword">const</span> <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a>&amp; k)<span class="keyword"> const</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">return</span> std::hash&lt;uint32_t&gt;()(k.id);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    };</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="classbitpit_1_1VolOctree.xhtml#ab5eefb77131bd2b33f52def7566bc2b7">VolOctree</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;dimension, std::array&lt;double, 3&gt; origin,</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordtype">double</span> length, <span class="keywordtype">double</span> dh);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a8db3fefc682242c999cd2a8f6b9d36e3">evalCellVolume</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a9a924c83cf4f7d96da91ecf1f4f58ebf">evalCellSize</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a353e616c402bb91bfb6e5094d7fc5bfb">evalCellCentroid</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#abd3d7ef0b19fa4e79d13f7c038ac3186">evalInterfaceArea</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    std::array&lt;double, 3&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a10ed404b82509d3f59fd60b0d4cc8c8c">evalInterfaceNormal</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> <a class="code" href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">getCellOctant</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">getCellLevel</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">getOctantId</a>(<span class="keyword">const</span> <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> &amp;octantInfo) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">const</span> std::vector&lt;uint32_t&gt; &amp; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">getOctantConnect</a>(<span class="keyword">const</span> <a class="code" href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">OctantInfo</a> &amp;octantInfo);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="classbitpit_1_1PabloUniform.xhtml">PabloUniform</a> &amp; <a class="code" href="classbitpit_1_1VolOctree.xhtml#abd350ce466388cc48e2a3879d472065b">getTree</a>();</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8">isPointInside</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8">isPointInside</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordtype">long</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a22fedca8b132b743770103e75842d2c1">locatePoint</a>(<span class="keyword">const</span> std::array&lt;double, 3&gt; &amp;point);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a1447e8c1293f830324e8ba9427b21dff">translate</a>(std::array&lt;double, 3&gt; translation);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#ad416f15806d3f2eb2122e31ab7425e8d">scale</a>(std::array&lt;double, 3&gt; scaling);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a4d3f8b18428f49d3b8d605e13c5f231a">updateAdjacencies</a>(<span class="keyword">const</span> std::vector&lt;long&gt; &amp;cellIds, <span class="keywordtype">bool</span> resetAdjacencies = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">void</span> <a class="code" href="group__voloctree.xhtml#gaaadadc7a354a66eb590ad11ecee6bf4c">setCommunicator</a>(MPI_Comm communicator);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#ac6ca61c71806c0d2ca8f7a46d48909c4">_updateAdaption</a>(<span class="keywordtype">bool</span> trackAdaption);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a639c24be93e574abe6ba25bbb6422a87">_markCellForRefinement</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a64311c41895ccbd1f51769af9197cbd6">_markCellForCoarsening</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a2d2b90a16ba5dd54f3de55675d697ca9">_enableCellBalancing</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enabled);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#ac3cc8ba2e1f03b6d7de5516a814260c9">_setTol</a>(<span class="keywordtype">double</span> tolerance);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classbitpit_1_1VolOctree.xhtml#a64a8e5e394f0c34773eba601ebac3d01">_resetTol</a>();</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#a4dcc79bac82b518439d1772e9f66f1aa">_findCellEdgeNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;edge, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList = std::vector&lt;long&gt;()) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::vector&lt;long&gt; <a class="code" href="classbitpit_1_1VolOctree.xhtml#af30fcfd3c169f4b2fd68c1f5345cc9fd">_findCellVertexNeighs</a>(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;vertex, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList = std::vector&lt;long&gt;()) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#if BITPIT_ENABLE_MPI==1</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span>    <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; <a class="code" href="group__voloctree.xhtml#gaf69c34b5038571eed4c27a02a7325459">_balancePartition</a>(<span class="keywordtype">bool</span> trackChanges);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">typedef</span> std::bitset&lt;72&gt; OctantHash;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">enum</span> TreeOperation {</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        OP_INITIALIZATION,</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        OP_ADAPTION_MAPPED,</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        OP_ADAPTION_UNMAPPED,</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        OP_LOAD_BALANCE</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    };</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keyword">struct </span>RenumberInfo {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        RenumberInfo()</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            : octantInfo(), newTreeId(0)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        };</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        RenumberInfo(OctantInfo _octantInfo, uint32_t _newTreeId)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            : octantInfo(_octantInfo), newTreeId(_newTreeId)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        };</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        OctantInfo octantInfo;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        uint32_t newTreeId;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    };</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">struct </span>DeleteInfo {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        DeleteInfo()</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            : octantInfo(), trigger(adaption::TYPE_UNKNOWN), rank(-1)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        };</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        DeleteInfo(OctantInfo _octantInfo, <a class="code" href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">adaption::Type</a> _trigger, <span class="keywordtype">int</span> _rank = -1)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            : octantInfo(_octantInfo), trigger(_trigger), rank(_rank)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        };</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        OctantInfo octantInfo;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">adaption::Type</a> trigger;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordtype">int</span> rank;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    };</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">struct </span>FaceInfo {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        FaceInfo() : id(Element::NULL_ID), face(-1) {};</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        FaceInfo(<span class="keywordtype">long</span> _id, <span class="keywordtype">int</span> _face) : id(_id), face(_face) {};</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> FaceInfo &amp;other)<span class="keyword"> const</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> (<span class="keywordtype">id</span> == other.id &amp;&amp; face == other.face);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordtype">long</span> id;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordtype">int</span> face;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    };</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">struct </span>FaceInfoHasher</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// We can just use the id for the hash, because a cell can have only</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">// a limited amount of faces. It&#39;s not worth including the face index</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">// in the hash.</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        std::size_t operator()(<span class="keyword">const</span> FaceInfo&amp; k)<span class="keyword"> const</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">return</span> std::hash&lt;long&gt;()(k.id);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    };</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">typedef</span> std::unordered_set&lt;FaceInfo, FaceInfoHasher&gt; FaceInfoSet;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    std::vector&lt;std::vector&lt;int&gt;&gt; m_octantLocalFacesOnVertex;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    std::vector&lt;std::vector&lt;int&gt;&gt; m_octantLocalFacesOnEdge;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    std::vector&lt;std::vector&lt;int&gt;&gt; m_octantLocalEdgesOnVertex;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> ElementInfo *m_cellTypeInfo;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> ElementInfo *m_interfaceTypeInfo;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    std::unordered_map&lt;long, uint32_t, Element::IdHasher&gt; m_cellToOctant;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    std::unordered_map&lt;long, uint32_t, Element::IdHasher&gt; m_cellToGhost;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    std::unordered_map&lt;uint32_t, long&gt; m_octantToCell;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    std::unordered_map&lt;uint32_t, long&gt; m_ghostToCell;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    PabloUniform m_tree;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    std::vector&lt;double&gt; m_tree_dh;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::vector&lt;double&gt; m_tree_area;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    std::vector&lt;double&gt; m_tree_volume;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    TreeOperation m_lastTreeOperation;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    std::vector&lt;std::array&lt;double, 3&gt; &gt; m_normals;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordtype">void</span> initializeTreeGeometry();</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">bool</span> set_marker(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> int8_t &amp;value);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    OctantHash evaluateOctantHash(<span class="keyword">const</span> OctantInfo &amp;octantInfo);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    std::vector&lt;long&gt; importOctants(std::vector&lt;OctantInfo&gt; &amp;octantTreeIds);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    std::vector&lt;long&gt; importOctants(std::vector&lt;OctantInfo&gt; &amp;octantTreeIds, FaceInfoSet &amp;danglingFaces);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordtype">void</span> renumberOctants(std::vector&lt;RenumberInfo&gt; &amp;renumberedOctants);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    FaceInfoSet deleteOctants(std::vector&lt;DeleteInfo&gt; &amp;deletedOctants);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordtype">long</span> addVertex(uint32_t treeId);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">long</span> addCell(OctantInfo octantInfo, std::unique_ptr&lt;<span class="keywordtype">long</span>[]&gt; &amp;vertices);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordtype">void</span> deleteCell(<span class="keywordtype">long</span> <span class="keywordtype">id</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">const</span> std::vector&lt;adaption::Info&gt; sync(<span class="keywordtype">bool</span> trackChanges);</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    std::vector&lt;long&gt; findCellCodimensionNeighs(<span class="keyword">const</span> <span class="keywordtype">long</span> &amp;<span class="keywordtype">id</span>, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;index,</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;codimension, <span class="keyword">const</span> std::vector&lt;long&gt; &amp;blackList) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;};</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a639c24be93e574abe6ba25bbb6422a87"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a639c24be93e574abe6ba25bbb6422a87">bitpit::VolOctree::_markCellForRefinement</a></div><div class="ttdeci">bool _markCellForRefinement(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01427">voloctree.cpp:1427</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ac3cc8ba2e1f03b6d7de5516a814260c9"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ac3cc8ba2e1f03b6d7de5516a814260c9">bitpit::VolOctree::_setTol</a></div><div class="ttdeci">void _setTol(double tolerance)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01543">voloctree.cpp:1543</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ad416f15806d3f2eb2122e31ab7425e8d"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ad416f15806d3f2eb2122e31ab7425e8d">bitpit::VolOctree::scale</a></div><div class="ttdeci">void scale(std::array&lt; double, 3 &gt; scaling)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01578">voloctree.cpp:1578</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a1447e8c1293f830324e8ba9427b21dff"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a1447e8c1293f830324e8ba9427b21dff">bitpit::VolOctree::translate</a></div><div class="ttdeci">void translate(std::array&lt; double, 3 &gt; translation)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01566">voloctree.cpp:1566</a></div></div>
<div class="ttc" id="namespacebitpit_1_1adaption_xhtml_acd94e1004d190c95756c226592e13d72"><div class="ttname"><a href="namespacebitpit_1_1adaption.xhtml#acd94e1004d190c95756c226592e13d72">bitpit::adaption::Type</a></div><div class="ttdeci">Type</div><div class="ttdoc">The Type enum defines the type of adaption that has been performed. </div><div class="ttdef"><b>Definition:</b> <a href="adaption_8hpp_source.xhtml#l00036">adaption.hpp:36</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a64311c41895ccbd1f51769af9197cbd6"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a64311c41895ccbd1f51769af9197cbd6">bitpit::VolOctree::_markCellForCoarsening</a></div><div class="ttdeci">bool _markCellForCoarsening(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01437">voloctree.cpp:1437</a></div></div>
<div class="ttc" id="classbitpit_1_1PatchKernel_xhtml_af101fc33cf0e24716e772f885e98adbf"><div class="ttname"><a href="classbitpit_1_1PatchKernel.xhtml#af101fc33cf0e24716e772f885e98adbf">bitpit::PatchKernel::locatePoint</a></div><div class="ttdeci">long locatePoint(const double &amp;x, const double &amp;y, const double &amp;z)</div><div class="ttdef"><b>Definition:</b> <a href="patch__kernel_8cpp_source.xhtml#l02653">patch_kernel.cpp:2653</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ab5eefb77131bd2b33f52def7566bc2b7"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ab5eefb77131bd2b33f52def7566bc2b7">bitpit::VolOctree::VolOctree</a></div><div class="ttdeci">VolOctree(const int &amp;id, const int &amp;dimension, std::array&lt; double, 3 &gt; origin, double length, double dh)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00064">voloctree.cpp:64</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a80fce164ad5e6920f538298d9117e3b2"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a80fce164ad5e6920f538298d9117e3b2">bitpit::VolOctree::getCellLevel</a></div><div class="ttdeci">int getCellLevel(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00351">voloctree.cpp:351</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_adc3114ce50826ca33118ce55b4e1fee8"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#adc3114ce50826ca33118ce55b4e1fee8">bitpit::VolOctree::isPointInside</a></div><div class="ttdeci">bool isPointInside(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01484">voloctree.cpp:1484</a></div></div>
<div class="ttc" id="group__voloctree_xhtml_gaaadadc7a354a66eb590ad11ecee6bf4c"><div class="ttname"><a href="group__voloctree.xhtml#gaaadadc7a354a66eb590ad11ecee6bf4c">bitpit::VolOctree::setCommunicator</a></div><div class="ttdeci">void setCommunicator(MPI_Comm communicator)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree__parallel_8cpp_source.xhtml#l00046">voloctree_parallel.cpp:46</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_abd3d7ef0b19fa4e79d13f7c038ac3186"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#abd3d7ef0b19fa4e79d13f7c038ac3186">bitpit::VolOctree::evalInterfaceArea</a></div><div class="ttdeci">double evalInterfaceArea(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00235">voloctree.cpp:235</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_abd350ce466388cc48e2a3879d472065b"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#abd350ce466388cc48e2a3879d472065b">bitpit::VolOctree::getTree</a></div><div class="ttdeci">PabloUniform &amp; getTree()</div><div class="ttdoc">Gets a reference to the octree associated with the patch. </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00282">voloctree.cpp:282</a></div></div>
<div class="ttc" id="structbitpit_1_1VolOctree_1_1OctantInfoHasher_xhtml"><div class="ttname"><a href="structbitpit_1_1VolOctree_1_1OctantInfoHasher.xhtml">bitpit::VolOctree::OctantInfoHasher</a></div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8hpp_source.xhtml#l00063">voloctree.hpp:63</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a10ed404b82509d3f59fd60b0d4cc8c8c"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a10ed404b82509d3f59fd60b0d4cc8c8c">bitpit::VolOctree::evalInterfaceNormal</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; evalInterfaceNormal(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00250">voloctree.cpp:250</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a9a924c83cf4f7d96da91ecf1f4f58ebf"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a9a924c83cf4f7d96da91ecf1f4f58ebf">bitpit::VolOctree::evalCellSize</a></div><div class="ttdeci">double evalCellSize(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00222">voloctree.cpp:222</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml">bitpit::VolOctree</a></div><div class="ttdoc">The VolOctree defines a Octree patch. </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8hpp_source.xhtml#l00044">voloctree.hpp:44</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_ac6ca61c71806c0d2ca8f7a46d48909c4"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#ac6ca61c71806c0d2ca8f7a46d48909c4">bitpit::VolOctree::_updateAdaption</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; _updateAdaption(bool trackAdaption)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00371">voloctree.cpp:371</a></div></div>
<div class="ttc" id="classbitpit_1_1PabloUniform_xhtml"><div class="ttname"><a href="classbitpit_1_1PabloUniform.xhtml">bitpit::PabloUniform</a></div><div class="ttdoc">PABLO Uniform is an example of user class derived from ParaTree to map ParaTree in a uniform (square/...</div><div class="ttdef"><b>Definition:</b> <a href="PabloUniform_8hpp_source.xhtml#l00062">PabloUniform.hpp:62</a></div></div>
<div class="ttc" id="structbitpit_1_1VolOctree_1_1OctantInfo_xhtml"><div class="ttname"><a href="structbitpit_1_1VolOctree_1_1OctantInfo.xhtml">bitpit::VolOctree::OctantInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8hpp_source.xhtml#l00050">voloctree.hpp:50</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml_a7726692acedc30fb4a4b4667e7dcdec7"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml#a7726692acedc30fb4a4b4667e7dcdec7">bitpit::VolumeKernel::isPointInside</a></div><div class="ttdeci">bool isPointInside(const double &amp;x, const double &amp;y, const double &amp;z)</div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8cpp_source.xhtml#l00072">volume_kernel.cpp:72</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a8db3fefc682242c999cd2a8f6b9d36e3"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a8db3fefc682242c999cd2a8f6b9d36e3">bitpit::VolOctree::evalCellVolume</a></div><div class="ttdeci">double evalCellVolume(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00189">voloctree.cpp:189</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_af89310e69dbcdd20e131e7bc51c3ef06"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#af89310e69dbcdd20e131e7bc51c3ef06">bitpit::VolOctree::getCellOctant</a></div><div class="ttdeci">OctantInfo getCellOctant(const long &amp;id) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00264">voloctree.cpp:264</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a85b5cb10454acec56e4a32d8ca08b242"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a85b5cb10454acec56e4a32d8ca08b242">bitpit::VolOctree::getOctantId</a></div><div class="ttdeci">long getOctantId(const OctantInfo &amp;octantInfo) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00293">voloctree.cpp:293</a></div></div>
<div class="ttc" id="group__voloctree_xhtml_gaf69c34b5038571eed4c27a02a7325459"><div class="ttname"><a href="group__voloctree.xhtml#gaf69c34b5038571eed4c27a02a7325459">bitpit::VolOctree::_balancePartition</a></div><div class="ttdeci">const std::vector&lt; adaption::Info &gt; _balancePartition(bool trackChanges)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree__parallel_8cpp_source.xhtml#l00060">voloctree_parallel.cpp:60</a></div></div>
<div class="ttc" id="structbitpit_1_1OctreeLevelInfo_xhtml"><div class="ttname"><a href="structbitpit_1_1OctreeLevelInfo.xhtml">bitpit::OctreeLevelInfo</a></div><div class="ttdoc">The OctreeLevelInfo class defines the information associated to an octree level. </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8hpp_source.xhtml#l00037">voloctree.hpp:37</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_af30fcfd3c169f4b2fd68c1f5345cc9fd"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#af30fcfd3c169f4b2fd68c1f5345cc9fd">bitpit::VolOctree::_findCellVertexNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellVertexNeighs(const long &amp;id, const int &amp;vertex, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01636">voloctree.cpp:1636</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a2d2b90a16ba5dd54f3de55675d697ca9"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a2d2b90a16ba5dd54f3de55675d697ca9">bitpit::VolOctree::_enableCellBalancing</a></div><div class="ttdeci">bool _enableCellBalancing(const long &amp;id, bool enabled)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01466">voloctree.cpp:1466</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a64a8e5e394f0c34773eba601ebac3d01"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a64a8e5e394f0c34773eba601ebac3d01">bitpit::VolOctree::_resetTol</a></div><div class="ttdeci">void _resetTol()</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01553">voloctree.cpp:1553</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a4dcc79bac82b518439d1772e9f66f1aa"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a4dcc79bac82b518439d1772e9f66f1aa">bitpit::VolOctree::_findCellEdgeNeighs</a></div><div class="ttdeci">std::vector&lt; long &gt; _findCellEdgeNeighs(const long &amp;id, const int &amp;edge, const std::vector&lt; long &gt; &amp;blackList=std::vector&lt; long &gt;()) const </div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01606">voloctree.cpp:1606</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a4d3f8b18428f49d3b8d605e13c5f231a"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a4d3f8b18428f49d3b8d605e13c5f231a">bitpit::VolOctree::updateAdjacencies</a></div><div class="ttdeci">void updateAdjacencies(const std::vector&lt; long &gt; &amp;cellIds, bool resetAdjacencies=true)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01344">voloctree.cpp:1344</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a22fedca8b132b743770103e75842d2c1"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a22fedca8b132b743770103e75842d2c1">bitpit::VolOctree::locatePoint</a></div><div class="ttdeci">long locatePoint(const std::array&lt; double, 3 &gt; &amp;point)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l01526">voloctree.cpp:1526</a></div></div>
<div class="ttc" id="classbitpit_1_1VolumeKernel_xhtml"><div class="ttname"><a href="classbitpit_1_1VolumeKernel.xhtml">bitpit::VolumeKernel</a></div><div class="ttdoc">The VolumeKernel class provides an interface for defining volume patches. </div><div class="ttdef"><b>Definition:</b> <a href="volume__kernel_8hpp_source.xhtml#l00032">volume_kernel.hpp:32</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a353e616c402bb91bfb6e5094d7fc5bfb"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a353e616c402bb91bfb6e5094d7fc5bfb">bitpit::VolOctree::evalCellCentroid</a></div><div class="ttdeci">std::array&lt; double, 3 &gt; evalCellCentroid(const long &amp;id)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00202">voloctree.cpp:202</a></div></div>
<div class="ttc" id="classbitpit_1_1VolOctree_xhtml_a2f1fb0fa33f6376c1c87b0419a725190"><div class="ttname"><a href="classbitpit_1_1VolOctree.xhtml#a2f1fb0fa33f6376c1c87b0419a725190">bitpit::VolOctree::getOctantConnect</a></div><div class="ttdeci">const std::vector&lt; uint32_t &gt; &amp; getOctantConnect(const OctantInfo &amp;octantInfo)</div><div class="ttdef"><b>Definition:</b> <a href="voloctree_8cpp_source.xhtml#l00317">voloctree.cpp:317</a></div></div>
</div><!-- fragment --></div><!-- contents -->

</div>
<!-- HTML footer for doxygen 1.8.9.1-->
<!-- start footer part -->
<address class="footer"><small>
Generated on Mon Jul 18 2016 09:46:25 for bitpit by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
    <div id="footer" >
        <p><strong>OPTIMAD Engineering Srl</strong> - Via Giacinto Collegno 18 - 10143 Torino</p>
        <p>Capitale Sociale euro 10.000,00 i.v. - Iscr. Reg. Impr. Torino C.F. / P.Iva 09359170017 - R.E.A. TO-1045102</p>
        <p><a href="/bitpit-private/privacy.html">Privacy Policy</a></p>
    </div>
</div>
</body>
</html>
